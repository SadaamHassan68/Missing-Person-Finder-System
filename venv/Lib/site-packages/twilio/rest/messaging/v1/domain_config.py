<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, Optional, Union
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class DomainConfigInstance(InstanceResource):
    """
    :ivar domain_sid: The unique string that we created to identify the Domain resource.
    :ivar config_sid: The unique string that we created to identify the Domain config (prefix ZK).
    :ivar fallback_url: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
    :ivar callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links.
    :ivar continue_on_failure: Boolean field to set customer delivery preference when there is a failure in linkShortening service
    :ivar date_created: Date this Domain Config was created.
    :ivar date_updated: Date that this Domain Config was last updated.
    :ivar url:
    :ivar disable_https: Customer's choice to send links with/without \"https://\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        domain_sid: Optional[str] = None,
    ):
        super().__init__(version)

        self.domain_sid: Optional[str] = payload.get("domain_sid")
        self.config_sid: Optional[str] = payload.get("config_sid")
        self.fallback_url: Optional[str] = payload.get("fallback_url")
        self.callback_url: Optional[str] = payload.get("callback_url")
        self.continue_on_failure: Optional[bool] = payload.get("continue_on_failure")
        self.date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self.date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self.url: Optional[str] = payload.get("url")
        self.disable_https: Optional[bool] = payload.get("disable_https")

        self._solution = {
            "domain_sid": domain_sid or self.domain_sid,
        }
        self._context: Optional[DomainConfigContext] = None

    @property
    def _proxy(self) -> "DomainConfigContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: DomainConfigContext for this DomainConfigInstance
        """
        if self._context is None:
            self._context = DomainConfigContext(
                self._version,
                domain_sid=self._solution["domain_sid"],
            )
        return self._context

    def fetch(self) -> "DomainConfigInstance":
        """
        Fetch the DomainConfigInstance


        :returns: The fetched DomainConfigInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "DomainConfigInstance":
        """
        Asynchronous coroutine to fetch the DomainConfigInstance


        :returns: The fetched DomainConfigInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        fallback_url: Union[str, object] = values.unset,
        callback_url: Union[str, object] = values.unset,
        continue_on_failure: Union[bool, object] = values.unset,
        disable_https: Union[bool, object] = values.unset,
    ) -> "DomainConfigInstance":
        """
        Update the DomainConfigInstance

        :param fallback_url: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
        :param callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param continue_on_failure: Boolean field to set customer delivery preference when there is a failure in linkShortening service
        :param disable_https: Customer's choice to send links with/without \\\"https://\\\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :returns: The updated DomainConfigInstance
        """
        return self._proxy.update(
            fallback_url=fallback_url,
            callback_url=callback_url,
            continue_on_failure=continue_on_failure,
            disable_https=disable_https,
        )

    async def update_async(
        self,
        fallback_url: Union[str, object] = values.unset,
        callback_url: Union[str, object] = values.unset,
        continue_on_failure: Union[bool, object] = values.unset,
        disable_https: Union[bool, object] = values.unset,
    ) -> "DomainConfigInstance":
        """
        Asynchronous coroutine to update the DomainConfigInstance

        :param fallback_url: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
        :param callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param continue_on_failure: Boolean field to set customer delivery preference when there is a failure in linkShortening service
        :param disable_https: Customer's choice to send links with/without \\\"https://\\\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :returns: The updated DomainConfigInstance
        """
        return await self._proxy.update_async(
            fallback_url=fallback_url,
            callback_url=callback_url,
            continue_on_failure=continue_on_failure,
            disable_https=disable_https,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DomainConfigInstance {}>".format(context)


class DomainConfigContext(InstanceContext):

    def __init__(self, version: Version, domain_sid: str):
        """
        Initialize the DomainConfigContext

        :param version: Version that contains the resource
        :param domain_sid: Unique string used to identify the domain that this config should be associated with.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "domain_sid": domain_sid,
        }
        self._uri = "/LinkShortening/Domains/{domain_sid}/Config".format(
            **self._solution
        )

    def fetch(self) -> DomainConfigInstance:
        """
        Fetch the DomainConfigInstance


        :returns: The fetched DomainConfigInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return DomainConfigInstance(
            self._version,
            payload,
            domain_sid=self._solution["domain_sid"],
        )

    async def fetch_async(self) -> DomainConfigInstance:
        """
        Asynchronous coroutine to fetch the DomainConfigInstance


        :returns: The fetched DomainConfigInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return DomainConfigInstance(
            self._version,
            payload,
            domain_sid=self._solution["domain_sid"],
        )

    def update(
        self,
        fallback_url: Union[str, object] = values.unset,
        callback_url: Union[str, object] = values.unset,
        continue_on_failure: Union[bool, object] = values.unset,
        disable_https: Union[bool, object] = values.unset,
    ) -> DomainConfigInstance:
        """
        Update the DomainConfigInstance

        :param fallback_url: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
        :param callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param continue_on_failure: Boolean field to set customer delivery preference when there is a failure in linkShortening service
        :param disable_https: Customer's choice to send links with/without \\\"https://\\\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :returns: The updated DomainConfigInstance
        """

        data = values.of(
            {
                "FallbackUrl": fallback_url,
                "CallbackUrl": callback_url,
                "ContinueOnFailure": serialize.boolean_to_string(continue_on_failure),
                "DisableHttps": serialize.boolean_to_string(disable_https),
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return DomainConfigInstance(
            self._version, payload, domain_sid=self._solution["domain_sid"]
        )

    async def update_async(
        self,
        fallback_url: Union[str, object] = values.unset,
        callback_url: Union[str, object] = values.unset,
        continue_on_failure: Union[bool, object] = values.unset,
        disable_https: Union[bool, object] = values.unset,
    ) -> DomainConfigInstance:
        """
        Asynchronous coroutine to update the DomainConfigInstance

        :param fallback_url: Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
        :param callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param continue_on_failure: Boolean field to set customer delivery preference when there is a failure in linkShortening service
        :param disable_https: Customer's choice to send links with/without \\\"https://\\\" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.

        :returns: The updated DomainConfigInstance
        """

        data = values.of(
            {
                "FallbackUrl": fallback_url,
                "CallbackUrl": callback_url,
                "ContinueOnFailure": serialize.boolean_to_string(continue_on_failure),
                "DisableHttps": serialize.boolean_to_string(disable_https),
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return DomainConfigInstance(
            self._version, payload, domain_sid=self._solution["domain_sid"]
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.DomainConfigContext {}>".format(context)


class DomainConfigList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the DomainConfigList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, domain_sid: str) -> DomainConfigContext:
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class DomainConfigList(ListResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version):
        """
        Initialize the DomainConfigList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigList
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigList
        """
        super(DomainConfigList, self).__init__(version)

        # Path Solution
        self._solution = {}

    def get(self, domain_sid):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Constructs a DomainConfigContext

        :param domain_sid: Unique string used to identify the domain that this config should be associated with.
<<<<<<< HEAD
        """
        return DomainConfigContext(self._version, domain_sid=domain_sid)

    def __call__(self, domain_sid: str) -> DomainConfigContext:
=======

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        """
        return DomainConfigContext(self._version, domain_sid=domain_sid, )

    def __call__(self, domain_sid):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Constructs a DomainConfigContext

        :param domain_sid: Unique string used to identify the domain that this config should be associated with.
<<<<<<< HEAD
        """
        return DomainConfigContext(self._version, domain_sid=domain_sid)

    def __repr__(self) -> str:
=======

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        """
        return DomainConfigContext(self._version, domain_sid=domain_sid, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Messaging.V1.DomainConfigList>"
=======
        :rtype: str
        """
        return '<Twilio.Messaging.V1.DomainConfigList>'


class DomainConfigPage(Page):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, response, solution):
        """
        Initialize the DomainConfigPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigPage
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigPage
        """
        super(DomainConfigPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of DomainConfigInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        return DomainConfigInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Messaging.V1.DomainConfigPage>'


class DomainConfigContext(InstanceContext):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, domain_sid):
        """
        Initialize the DomainConfigContext

        :param Version version: Version that contains the resource
        :param domain_sid: Unique string used to identify the domain that this config should be associated with.

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        """
        super(DomainConfigContext, self).__init__(version)

        # Path Solution
        self._solution = {'domain_sid': domain_sid, }
        self._uri = '/LinkShortening/Domains/{domain_sid}/Config'.format(**self._solution)

    def update(self, messaging_service_sids, fallback_url=values.unset,
               callback_url=values.unset,
               messaging_service_sids_action=values.unset):
        """
        Update the DomainConfigInstance

        :param list[unicode] messaging_service_sids: A list of messagingServiceSids (with prefix MG)
        :param unicode fallback_url: We will redirect requests to urls we are unable to identify to this url.
        :param unicode callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param unicode messaging_service_sids_action: An action type for messaging_service_sids operation (ADD, DELETE, REPLACE)

        :returns: The updated DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        data = values.of({
            'MessagingServiceSids': serialize.map(messaging_service_sids, lambda e: e),
            'FallbackUrl': fallback_url,
            'CallbackUrl': callback_url,
            'MessagingServiceSidsAction': messaging_service_sids_action,
        })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return DomainConfigInstance(self._version, payload, domain_sid=self._solution['domain_sid'], )

    def fetch(self):
        """
        Fetch the DomainConfigInstance

        :returns: The fetched DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return DomainConfigInstance(self._version, payload, domain_sid=self._solution['domain_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Messaging.V1.DomainConfigContext {}>'.format(context)


class DomainConfigInstance(InstanceResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, payload, domain_sid=None):
        """
        Initialize the DomainConfigInstance

        :returns: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        super(DomainConfigInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'domain_sid': payload.get('domain_sid'),
            'config_sid': payload.get('config_sid'),
            'messaging_service_sids': payload.get('messaging_service_sids'),
            'fallback_url': payload.get('fallback_url'),
            'callback_url': payload.get('callback_url'),
            'date_created': deserialize.iso8601_datetime(payload.get('date_created')),
            'date_updated': deserialize.iso8601_datetime(payload.get('date_updated')),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {'domain_sid': domain_sid or self._properties['domain_sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: DomainConfigContext for this DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigContext
        """
        if self._context is None:
            self._context = DomainConfigContext(self._version, domain_sid=self._solution['domain_sid'], )
        return self._context

    @property
    def domain_sid(self):
        """
        :returns: The unique string that we created to identify the Domain resource.
        :rtype: unicode
        """
        return self._properties['domain_sid']

    @property
    def config_sid(self):
        """
        :returns: The unique string that we created to identify the Domain config (prefix ZK).
        :rtype: unicode
        """
        return self._properties['config_sid']

    @property
    def messaging_service_sids(self):
        """
        :returns: A list of messagingServiceSids (with prefix MG).
        :rtype: list[unicode]
        """
        return self._properties['messaging_service_sids']

    @property
    def fallback_url(self):
        """
        :returns: We will redirect requests to urls we are unable to identify to this url.
        :rtype: unicode
        """
        return self._properties['fallback_url']

    @property
    def callback_url(self):
        """
        :returns: URL to receive click events to your webhook whenever the recipients click on the shortened links.
        :rtype: unicode
        """
        return self._properties['callback_url']

    @property
    def date_created(self):
        """
        :returns: Date this Domain Config was created.
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: Date that this Domain Config was last updated.
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    def update(self, messaging_service_sids, fallback_url=values.unset,
               callback_url=values.unset,
               messaging_service_sids_action=values.unset):
        """
        Update the DomainConfigInstance

        :param list[unicode] messaging_service_sids: A list of messagingServiceSids (with prefix MG)
        :param unicode fallback_url: We will redirect requests to urls we are unable to identify to this url.
        :param unicode callback_url: URL to receive click events to your webhook whenever the recipients click on the shortened links
        :param unicode messaging_service_sids_action: An action type for messaging_service_sids operation (ADD, DELETE, REPLACE)

        :returns: The updated DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        return self._proxy.update(
            messaging_service_sids,
            fallback_url=fallback_url,
            callback_url=callback_url,
            messaging_service_sids_action=messaging_service_sids_action,
        )

    def fetch(self):
        """
        Fetch the DomainConfigInstance

        :returns: The fetched DomainConfigInstance
        :rtype: twilio.rest.messaging.v1.domain_config.DomainConfigInstance
        """
        return self._proxy.fetch()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Messaging.V1.DomainConfigInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
