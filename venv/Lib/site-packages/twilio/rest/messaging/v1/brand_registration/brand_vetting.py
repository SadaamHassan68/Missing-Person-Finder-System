<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


class BrandVettingInstance(InstanceResource):

    class VettingProvider(object):
        CAMPAIGN_VERIFY = "campaign-verify"
        AEGIS = "aegis"

    """
    :ivar account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the vetting record.
    :ivar brand_sid: The unique string to identify Brand Registration.
    :ivar brand_vetting_sid: The Twilio SID of the third-party vetting record.
    :ivar date_updated: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    :ivar date_created: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    :ivar vetting_id: The unique identifier of the vetting from the third-party provider.
    :ivar vetting_class: The type of vetting that has been conducted. One of “STANDARD” (Aegis) or “POLITICAL” (Campaign Verify).
    :ivar vetting_status: The status of the import vetting attempt. One of “PENDING,” “SUCCESS,” or “FAILED”.
    :ivar vetting_provider: 
    :ivar url: The absolute URL of the Brand Vetting resource.
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        brand_sid: str,
        brand_vetting_sid: Optional[str] = None,
    ):
        super().__init__(version)

        self.account_sid: Optional[str] = payload.get("account_sid")
        self.brand_sid: Optional[str] = payload.get("brand_sid")
        self.brand_vetting_sid: Optional[str] = payload.get("brand_vetting_sid")
        self.date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self.date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self.vetting_id: Optional[str] = payload.get("vetting_id")
        self.vetting_class: Optional[str] = payload.get("vetting_class")
        self.vetting_status: Optional[str] = payload.get("vetting_status")
        self.vetting_provider: Optional["BrandVettingInstance.VettingProvider"] = (
            payload.get("vetting_provider")
        )
        self.url: Optional[str] = payload.get("url")

        self._solution = {
            "brand_sid": brand_sid,
            "brand_vetting_sid": brand_vetting_sid or self.brand_vetting_sid,
        }
        self._context: Optional[BrandVettingContext] = None

    @property
    def _proxy(self) -> "BrandVettingContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: BrandVettingContext for this BrandVettingInstance
        """
        if self._context is None:
            self._context = BrandVettingContext(
                self._version,
                brand_sid=self._solution["brand_sid"],
                brand_vetting_sid=self._solution["brand_vetting_sid"],
            )
        return self._context

    def fetch(self) -> "BrandVettingInstance":
        """
        Fetch the BrandVettingInstance


        :returns: The fetched BrandVettingInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "BrandVettingInstance":
        """
        Asynchronous coroutine to fetch the BrandVettingInstance


        :returns: The fetched BrandVettingInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.BrandVettingInstance {}>".format(context)


class BrandVettingContext(InstanceContext):

    def __init__(self, version: Version, brand_sid: str, brand_vetting_sid: str):
        """
        Initialize the BrandVettingContext

        :param version: Version that contains the resource
        :param brand_sid: The SID of the Brand Registration resource of the vettings to read .
        :param brand_vetting_sid: The Twilio SID of the third-party vetting record.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "brand_sid": brand_sid,
            "brand_vetting_sid": brand_vetting_sid,
        }
        self._uri = (
            "/a2p/BrandRegistrations/{brand_sid}/Vettings/{brand_vetting_sid}".format(
                **self._solution
            )
        )

    def fetch(self) -> BrandVettingInstance:
        """
        Fetch the BrandVettingInstance


        :returns: The fetched BrandVettingInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return BrandVettingInstance(
            self._version,
            payload,
            brand_sid=self._solution["brand_sid"],
            brand_vetting_sid=self._solution["brand_vetting_sid"],
        )

    async def fetch_async(self) -> BrandVettingInstance:
        """
        Asynchronous coroutine to fetch the BrandVettingInstance


        :returns: The fetched BrandVettingInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return BrandVettingInstance(
            self._version,
            payload,
            brand_sid=self._solution["brand_sid"],
            brand_vetting_sid=self._solution["brand_vetting_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Messaging.V1.BrandVettingContext {}>".format(context)


class BrandVettingPage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> BrandVettingInstance:
        """
        Build an instance of BrandVettingInstance

        :param payload: Payload response from the API
        """
        return BrandVettingInstance(
            self._version, payload, brand_sid=self._solution["brand_sid"]
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Messaging.V1.BrandVettingPage>"


class BrandVettingList(ListResource):

    def __init__(self, version: Version, brand_sid: str):
        """
        Initialize the BrandVettingList

        :param version: Version that contains the resource
        :param brand_sid: The SID of the Brand Registration resource of the vettings to read .

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "brand_sid": brand_sid,
        }
        self._uri = "/a2p/BrandRegistrations/{brand_sid}/Vettings".format(
            **self._solution
        )

    def create(
        self,
        vetting_provider: "BrandVettingInstance.VettingProvider",
        vetting_id: Union[str, object] = values.unset,
    ) -> BrandVettingInstance:
        """
        Create the BrandVettingInstance

        :param vetting_provider:
        :param vetting_id: The unique ID of the vetting

        :returns: The created BrandVettingInstance
        """

        data = values.of(
            {
                "VettingProvider": vetting_provider,
                "VettingId": vetting_id,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.create(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return BrandVettingInstance(
            self._version, payload, brand_sid=self._solution["brand_sid"]
        )

    async def create_async(
        self,
        vetting_provider: "BrandVettingInstance.VettingProvider",
        vetting_id: Union[str, object] = values.unset,
    ) -> BrandVettingInstance:
        """
        Asynchronously create the BrandVettingInstance

        :param vetting_provider:
        :param vetting_id: The unique ID of the vetting

        :returns: The created BrandVettingInstance
        """

        data = values.of(
            {
                "VettingProvider": vetting_provider,
                "VettingId": vetting_id,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return BrandVettingInstance(
            self._version, payload, brand_sid=self._solution["brand_sid"]
        )

    def stream(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[BrandVettingInstance]:
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class BrandVettingList(ListResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, brand_sid):
        """
        Initialize the BrandVettingList

        :param Version version: Version that contains the resource
        :param brand_sid: A2P BrandRegistration Sid

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingList
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingList
        """
        super(BrandVettingList, self).__init__(version)

        # Path Solution
        self._solution = {'brand_sid': brand_sid, }
        self._uri = '/a2p/BrandRegistrations/{brand_sid}/Vettings'.format(**self._solution)

    def create(self, vetting_provider, vetting_id=values.unset):
        """
        Create the BrandVettingInstance

        :param BrandVettingInstance.VettingProvider vetting_provider: Third-party provider of the vettings to create
        :param unicode vetting_id: The unique ID of the vetting

        :returns: The created BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        """
        data = values.of({'VettingProvider': vetting_provider, 'VettingId': vetting_id, })

        payload = self._version.create(method='POST', uri=self._uri, data=data, )

        return BrandVettingInstance(self._version, payload, brand_sid=self._solution['brand_sid'], )

    def stream(self, vetting_provider=values.unset, limit=None, page_size=None):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Streams BrandVettingInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

<<<<<<< HEAD
        :param &quot;BrandVettingInstance.VettingProvider&quot; vetting_provider: The third-party provider of the vettings to read
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            vetting_provider=vetting_provider, page_size=limits["page_size"]
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[BrandVettingInstance]:
        """
        Asynchronously streams BrandVettingInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param &quot;BrandVettingInstance.VettingProvider&quot; vetting_provider: The third-party provider of the vettings to read
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            vetting_provider=vetting_provider, page_size=limits["page_size"]
        )

        return self._version.stream_async(page, limits["limit"])

    def list(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[BrandVettingInstance]:
=======
        :param BrandVettingInstance.VettingProvider vetting_provider: Third-party provider of the vettings to create
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(vetting_provider=vetting_provider, page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, vetting_provider=values.unset, limit=None, page_size=None):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Lists BrandVettingInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

<<<<<<< HEAD
        :param &quot;BrandVettingInstance.VettingProvider&quot; vetting_provider: The third-party provider of the vettings to read
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(
            self.stream(
                vetting_provider=vetting_provider,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[BrandVettingInstance]:
        """
        Asynchronously lists BrandVettingInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param &quot;BrandVettingInstance.VettingProvider&quot; vetting_provider: The third-party provider of the vettings to read
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [
            record
            async for record in await self.stream_async(
                vetting_provider=vetting_provider,
                limit=limit,
                page_size=page_size,
            )
        ]

    def page(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> BrandVettingPage:
=======
        :param BrandVettingInstance.VettingProvider vetting_provider: Third-party provider of the vettings to create
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance]
        """
        return list(self.stream(vetting_provider=vetting_provider, limit=limit, page_size=page_size, ))

    def page(self, vetting_provider=values.unset, page_token=values.unset,
             page_number=values.unset, page_size=values.unset):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Retrieve a single page of BrandVettingInstance records from the API.
        Request is executed immediately

<<<<<<< HEAD
        :param vetting_provider: The third-party provider of the vettings to read
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of BrandVettingInstance
        """
        data = values.of(
            {
                "VettingProvider": vetting_provider,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = self._version.page(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return BrandVettingPage(self._version, response, self._solution)

    async def page_async(
        self,
        vetting_provider: Union[
            "BrandVettingInstance.VettingProvider", object
        ] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> BrandVettingPage:
        """
        Asynchronously retrieve a single page of BrandVettingInstance records from the API.
        Request is executed immediately

        :param vetting_provider: The third-party provider of the vettings to read
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of BrandVettingInstance
        """
        data = values.of(
            {
                "VettingProvider": vetting_provider,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return BrandVettingPage(self._version, response, self._solution)

    def get_page(self, target_url: str) -> BrandVettingPage:
=======
        :param BrandVettingInstance.VettingProvider vetting_provider: Third-party provider of the vettings to create
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingPage
        """
        data = values.of({
            'VettingProvider': vetting_provider,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return BrandVettingPage(self._version, response, self._solution)

    def get_page(self, target_url):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Retrieve a specific page of BrandVettingInstance records from the API.
        Request is executed immediately

<<<<<<< HEAD
        :param target_url: API-generated URL for the requested results page

        :returns: Page of BrandVettingInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return BrandVettingPage(self._version, response, self._solution)

    async def get_page_async(self, target_url: str) -> BrandVettingPage:
        """
        Asynchronously retrieve a specific page of BrandVettingInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of BrandVettingInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return BrandVettingPage(self._version, response, self._solution)

    def get(self, brand_vetting_sid: str) -> BrandVettingContext:
        """
        Constructs a BrandVettingContext

        :param brand_vetting_sid: The Twilio SID of the third-party vetting record.
        """
        return BrandVettingContext(
            self._version,
            brand_sid=self._solution["brand_sid"],
            brand_vetting_sid=brand_vetting_sid,
        )

    def __call__(self, brand_vetting_sid: str) -> BrandVettingContext:
        """
        Constructs a BrandVettingContext

        :param brand_vetting_sid: The Twilio SID of the third-party vetting record.
        """
        return BrandVettingContext(
            self._version,
            brand_sid=self._solution["brand_sid"],
            brand_vetting_sid=brand_vetting_sid,
        )

    def __repr__(self) -> str:
=======
        :param str target_url: API-generated URL for the requested results page

        :returns: Page of BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return BrandVettingPage(self._version, response, self._solution)

    def get(self, brand_vetting_sid):
        """
        Constructs a BrandVettingContext

        :param brand_vetting_sid: SID for third-party vetting record

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        """
        return BrandVettingContext(
            self._version,
            brand_sid=self._solution['brand_sid'],
            brand_vetting_sid=brand_vetting_sid,
        )

    def __call__(self, brand_vetting_sid):
        """
        Constructs a BrandVettingContext

        :param brand_vetting_sid: SID for third-party vetting record

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        """
        return BrandVettingContext(
            self._version,
            brand_sid=self._solution['brand_sid'],
            brand_vetting_sid=brand_vetting_sid,
        )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Messaging.V1.BrandVettingList>"
=======
        :rtype: str
        """
        return '<Twilio.Messaging.V1.BrandVettingList>'


class BrandVettingPage(Page):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, response, solution):
        """
        Initialize the BrandVettingPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param brand_sid: A2P BrandRegistration Sid

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingPage
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingPage
        """
        super(BrandVettingPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of BrandVettingInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        """
        return BrandVettingInstance(self._version, payload, brand_sid=self._solution['brand_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Messaging.V1.BrandVettingPage>'


class BrandVettingContext(InstanceContext):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, brand_sid, brand_vetting_sid):
        """
        Initialize the BrandVettingContext

        :param Version version: Version that contains the resource
        :param brand_sid: A2P BrandRegistration Sid
        :param brand_vetting_sid: SID for third-party vetting record

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        """
        super(BrandVettingContext, self).__init__(version)

        # Path Solution
        self._solution = {'brand_sid': brand_sid, 'brand_vetting_sid': brand_vetting_sid, }
        self._uri = '/a2p/BrandRegistrations/{brand_sid}/Vettings/{brand_vetting_sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch the BrandVettingInstance

        :returns: The fetched BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return BrandVettingInstance(
            self._version,
            payload,
            brand_sid=self._solution['brand_sid'],
            brand_vetting_sid=self._solution['brand_vetting_sid'],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Messaging.V1.BrandVettingContext {}>'.format(context)


class BrandVettingInstance(InstanceResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    class VettingProvider(object):
        CAMPAIGN_VERIFY = "campaign-verify"

    def __init__(self, version, payload, brand_sid, brand_vetting_sid=None):
        """
        Initialize the BrandVettingInstance

        :returns: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        """
        super(BrandVettingInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload.get('account_sid'),
            'brand_sid': payload.get('brand_sid'),
            'brand_vetting_sid': payload.get('brand_vetting_sid'),
            'date_updated': deserialize.iso8601_datetime(payload.get('date_updated')),
            'date_created': deserialize.iso8601_datetime(payload.get('date_created')),
            'vetting_id': payload.get('vetting_id'),
            'vetting_class': payload.get('vetting_class'),
            'vetting_status': payload.get('vetting_status'),
            'vetting_provider': payload.get('vetting_provider'),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {
            'brand_sid': brand_sid,
            'brand_vetting_sid': brand_vetting_sid or self._properties['brand_vetting_sid'],
        }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: BrandVettingContext for this BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingContext
        """
        if self._context is None:
            self._context = BrandVettingContext(
                self._version,
                brand_sid=self._solution['brand_sid'],
                brand_vetting_sid=self._solution['brand_vetting_sid'],
            )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The SID of the Account that created the vetting
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def brand_sid(self):
        """
        :returns: A2P BrandRegistration Sid
        :rtype: unicode
        """
        return self._properties['brand_sid']

    @property
    def brand_vetting_sid(self):
        """
        :returns: SID for third-party vetting record
        :rtype: unicode
        """
        return self._properties['brand_vetting_sid']

    @property
    def date_updated(self):
        """
        :returns: The ISO 8601 date and time in GMT when the resource was last updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def date_created(self):
        """
        :returns: The ISO 8601 date and time in GMT when the resource was created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def vetting_id(self):
        """
        :returns: The unique ID of the vetting
        :rtype: unicode
        """
        return self._properties['vetting_id']

    @property
    def vetting_class(self):
        """
        :returns: The type of vetting
        :rtype: unicode
        """
        return self._properties['vetting_class']

    @property
    def vetting_status(self):
        """
        :returns: Status of vetting attempt
        :rtype: unicode
        """
        return self._properties['vetting_status']

    @property
    def vetting_provider(self):
        """
        :returns: Third-party provider that has conducted the vetting
        :rtype: BrandVettingInstance.VettingProvider
        """
        return self._properties['vetting_provider']

    @property
    def url(self):
        """
        :returns: The absolute URL of the Brand Vetting
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self):
        """
        Fetch the BrandVettingInstance

        :returns: The fetched BrandVettingInstance
        :rtype: twilio.rest.messaging.v1.brand_registration.brand_vetting.BrandVettingInstance
        """
        return self._proxy.fetch()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Messaging.V1.BrandVettingInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
