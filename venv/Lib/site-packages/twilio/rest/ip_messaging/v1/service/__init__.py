<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Ip_messaging
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base.page import Page
from twilio.rest.ip_messaging.v1.service.channel import ChannelList
from twilio.rest.ip_messaging.v1.service.role import RoleList
from twilio.rest.ip_messaging.v1.service.user import UserList


<<<<<<< HEAD
class ServiceInstance(InstanceResource):
    """
    :ivar sid:
    :ivar account_sid:
    :ivar friendly_name:
    :ivar date_created:
    :ivar date_updated:
    :ivar default_service_role_sid:
    :ivar default_channel_role_sid:
    :ivar default_channel_creator_role_sid:
    :ivar read_status_enabled:
    :ivar reachability_enabled:
    :ivar typing_indicator_timeout:
    :ivar consumption_report_interval:
    :ivar limits:
    :ivar webhooks:
    :ivar pre_webhook_url:
    :ivar post_webhook_url:
    :ivar webhook_method:
    :ivar webhook_filters:
    :ivar notifications:
    :ivar url:
    :ivar links:
    """

    def __init__(
        self, version: Version, payload: Dict[str, Any], sid: Optional[str] = None
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.account_sid: Optional[str] = payload.get("account_sid")
        self.friendly_name: Optional[str] = payload.get("friendly_name")
        self.date_created: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_created")
        )
        self.date_updated: Optional[datetime] = deserialize.iso8601_datetime(
            payload.get("date_updated")
        )
        self.default_service_role_sid: Optional[str] = payload.get(
            "default_service_role_sid"
        )
        self.default_channel_role_sid: Optional[str] = payload.get(
            "default_channel_role_sid"
        )
        self.default_channel_creator_role_sid: Optional[str] = payload.get(
            "default_channel_creator_role_sid"
        )
        self.read_status_enabled: Optional[bool] = payload.get("read_status_enabled")
        self.reachability_enabled: Optional[bool] = payload.get("reachability_enabled")
        self.typing_indicator_timeout: Optional[int] = deserialize.integer(
            payload.get("typing_indicator_timeout")
        )
        self.consumption_report_interval: Optional[int] = deserialize.integer(
            payload.get("consumption_report_interval")
        )
        self.limits: Optional[Dict[str, object]] = payload.get("limits")
        self.webhooks: Optional[Dict[str, object]] = payload.get("webhooks")
        self.pre_webhook_url: Optional[str] = payload.get("pre_webhook_url")
        self.post_webhook_url: Optional[str] = payload.get("post_webhook_url")
        self.webhook_method: Optional[str] = payload.get("webhook_method")
        self.webhook_filters: Optional[List[str]] = payload.get("webhook_filters")
        self.notifications: Optional[Dict[str, object]] = payload.get("notifications")
        self.url: Optional[str] = payload.get("url")
        self.links: Optional[Dict[str, object]] = payload.get("links")

        self._solution = {
            "sid": sid or self.sid,
        }
        self._context: Optional[ServiceContext] = None

    @property
    def _proxy(self) -> "ServiceContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: ServiceContext for this ServiceInstance
        """
        if self._context is None:
            self._context = ServiceContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    def delete(self) -> bool:
        """
        Deletes the ServiceInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the ServiceInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "ServiceInstance":
        """
        Fetch the ServiceInstance


        :returns: The fetched ServiceInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "ServiceInstance":
        """
        Asynchronous coroutine to fetch the ServiceInstance


        :returns: The fetched ServiceInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        friendly_name: Union[str, object] = values.unset,
        default_service_role_sid: Union[str, object] = values.unset,
        default_channel_role_sid: Union[str, object] = values.unset,
        default_channel_creator_role_sid: Union[str, object] = values.unset,
        read_status_enabled: Union[bool, object] = values.unset,
        reachability_enabled: Union[bool, object] = values.unset,
        typing_indicator_timeout: Union[int, object] = values.unset,
        consumption_report_interval: Union[int, object] = values.unset,
        notifications_new_message_enabled: Union[bool, object] = values.unset,
        notifications_new_message_template: Union[str, object] = values.unset,
        notifications_added_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_added_to_channel_template: Union[str, object] = values.unset,
        notifications_removed_from_channel_enabled: Union[bool, object] = values.unset,
        notifications_removed_from_channel_template: Union[str, object] = values.unset,
        notifications_invited_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_invited_to_channel_template: Union[str, object] = values.unset,
        pre_webhook_url: Union[str, object] = values.unset,
        post_webhook_url: Union[str, object] = values.unset,
        webhook_method: Union[str, object] = values.unset,
        webhook_filters: Union[List[str], object] = values.unset,
        webhooks_on_message_send_url: Union[str, object] = values.unset,
        webhooks_on_message_send_method: Union[str, object] = values.unset,
        webhooks_on_message_update_url: Union[str, object] = values.unset,
        webhooks_on_message_update_method: Union[str, object] = values.unset,
        webhooks_on_message_remove_url: Union[str, object] = values.unset,
        webhooks_on_message_remove_method: Union[str, object] = values.unset,
        webhooks_on_channel_add_url: Union[str, object] = values.unset,
        webhooks_on_channel_add_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_method: Union[str, object] = values.unset,
        webhooks_on_channel_update_url: Union[str, object] = values.unset,
        webhooks_on_channel_update_method: Union[str, object] = values.unset,
        webhooks_on_member_add_url: Union[str, object] = values.unset,
        webhooks_on_member_add_method: Union[str, object] = values.unset,
        webhooks_on_member_remove_url: Union[str, object] = values.unset,
        webhooks_on_member_remove_method: Union[str, object] = values.unset,
        webhooks_on_message_sent_url: Union[str, object] = values.unset,
        webhooks_on_message_sent_method: Union[str, object] = values.unset,
        webhooks_on_message_updated_url: Union[str, object] = values.unset,
        webhooks_on_message_updated_method: Union[str, object] = values.unset,
        webhooks_on_message_removed_url: Union[str, object] = values.unset,
        webhooks_on_message_removed_method: Union[str, object] = values.unset,
        webhooks_on_channel_added_url: Union[str, object] = values.unset,
        webhooks_on_channel_added_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_method: Union[str, object] = values.unset,
        webhooks_on_channel_updated_url: Union[str, object] = values.unset,
        webhooks_on_channel_updated_method: Union[str, object] = values.unset,
        webhooks_on_member_added_url: Union[str, object] = values.unset,
        webhooks_on_member_added_method: Union[str, object] = values.unset,
        webhooks_on_member_removed_url: Union[str, object] = values.unset,
        webhooks_on_member_removed_method: Union[str, object] = values.unset,
        limits_channel_members: Union[int, object] = values.unset,
        limits_user_channels: Union[int, object] = values.unset,
    ) -> "ServiceInstance":
        """
        Update the ServiceInstance

        :param friendly_name:
        :param default_service_role_sid:
        :param default_channel_role_sid:
        :param default_channel_creator_role_sid:
        :param read_status_enabled:
        :param reachability_enabled:
        :param typing_indicator_timeout:
        :param consumption_report_interval:
        :param notifications_new_message_enabled:
        :param notifications_new_message_template:
        :param notifications_added_to_channel_enabled:
        :param notifications_added_to_channel_template:
        :param notifications_removed_from_channel_enabled:
        :param notifications_removed_from_channel_template:
        :param notifications_invited_to_channel_enabled:
        :param notifications_invited_to_channel_template:
        :param pre_webhook_url:
        :param post_webhook_url:
        :param webhook_method:
        :param webhook_filters:
        :param webhooks_on_message_send_url:
        :param webhooks_on_message_send_method:
        :param webhooks_on_message_update_url:
        :param webhooks_on_message_update_method:
        :param webhooks_on_message_remove_url:
        :param webhooks_on_message_remove_method:
        :param webhooks_on_channel_add_url:
        :param webhooks_on_channel_add_method:
        :param webhooks_on_channel_destroy_url:
        :param webhooks_on_channel_destroy_method:
        :param webhooks_on_channel_update_url:
        :param webhooks_on_channel_update_method:
        :param webhooks_on_member_add_url:
        :param webhooks_on_member_add_method:
        :param webhooks_on_member_remove_url:
        :param webhooks_on_member_remove_method:
        :param webhooks_on_message_sent_url:
        :param webhooks_on_message_sent_method:
        :param webhooks_on_message_updated_url:
        :param webhooks_on_message_updated_method:
        :param webhooks_on_message_removed_url:
        :param webhooks_on_message_removed_method:
        :param webhooks_on_channel_added_url:
        :param webhooks_on_channel_added_method:
        :param webhooks_on_channel_destroyed_url:
        :param webhooks_on_channel_destroyed_method:
        :param webhooks_on_channel_updated_url:
        :param webhooks_on_channel_updated_method:
        :param webhooks_on_member_added_url:
        :param webhooks_on_member_added_method:
        :param webhooks_on_member_removed_url:
        :param webhooks_on_member_removed_method:
        :param limits_channel_members:
        :param limits_user_channels:

        :returns: The updated ServiceInstance
=======
class ServiceList(ListResource):

    def __init__(self, version):
        """
        Initialize the ServiceList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.ip_messaging.v1.service.ServiceList
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceList
        """
        super(ServiceList, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/Services'.format(**self._solution)

    def create(self, friendly_name):
        """
        Create the ServiceInstance

        :param unicode friendly_name: The friendly_name

        :returns: The created ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        data = values.of({'FriendlyName': friendly_name, })

        payload = self._version.create(method='POST', uri=self._uri, data=data, )

        return ServiceInstance(self._version, payload, )

    def stream(self, limit=None, page_size=None):
        """
        Streams ServiceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.ip_messaging.v1.service.ServiceInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, limit=None, page_size=None):
        """
        Lists ServiceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.ip_messaging.v1.service.ServiceInstance]
        """
        return list(self.stream(limit=limit, page_size=page_size, ))

    def page(self, page_token=values.unset, page_number=values.unset,
             page_size=values.unset):
        """
        Retrieve a single page of ServiceInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServicePage
        """
        data = values.of({'PageToken': page_token, 'Page': page_number, 'PageSize': page_size, })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return ServicePage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of ServiceInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServicePage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return ServicePage(self._version, response, self._solution)

    def get(self, sid):
        """
        Constructs a ServiceContext

        :param sid: The sid

        :returns: twilio.rest.ip_messaging.v1.service.ServiceContext
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceContext
        """
        return ServiceContext(self._version, sid=sid, )

    def __call__(self, sid):
        """
        Constructs a ServiceContext

        :param sid: The sid

        :returns: twilio.rest.ip_messaging.v1.service.ServiceContext
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceContext
        """
        return ServiceContext(self._version, sid=sid, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.IpMessaging.V1.ServiceList>'


class ServicePage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ServicePage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.ip_messaging.v1.service.ServicePage
        :rtype: twilio.rest.ip_messaging.v1.service.ServicePage
        """
        super(ServicePage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ServiceInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.ip_messaging.v1.service.ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        return ServiceInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.IpMessaging.V1.ServicePage>'


class ServiceContext(InstanceContext):

    def __init__(self, version, sid):
        """
        Initialize the ServiceContext

        :param Version version: Version that contains the resource
        :param sid: The sid

        :returns: twilio.rest.ip_messaging.v1.service.ServiceContext
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceContext
        """
        super(ServiceContext, self).__init__(version)

        # Path Solution
        self._solution = {'sid': sid, }
        self._uri = '/Services/{sid}'.format(**self._solution)

        # Dependents
        self._channels = None
        self._roles = None
        self._users = None

    def fetch(self):
        """
        Fetch the ServiceInstance

        :returns: The fetched ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ServiceInstance(self._version, payload, sid=self._solution['sid'], )

    def delete(self):
        """
        Deletes the ServiceInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )

    def update(self, friendly_name=values.unset,
               default_service_role_sid=values.unset,
               default_channel_role_sid=values.unset,
               default_channel_creator_role_sid=values.unset,
               read_status_enabled=values.unset, reachability_enabled=values.unset,
               typing_indicator_timeout=values.unset,
               consumption_report_interval=values.unset,
               notifications_new_message_enabled=values.unset,
               notifications_new_message_template=values.unset,
               notifications_added_to_channel_enabled=values.unset,
               notifications_added_to_channel_template=values.unset,
               notifications_removed_from_channel_enabled=values.unset,
               notifications_removed_from_channel_template=values.unset,
               notifications_invited_to_channel_enabled=values.unset,
               notifications_invited_to_channel_template=values.unset,
               pre_webhook_url=values.unset, post_webhook_url=values.unset,
               webhook_method=values.unset, webhook_filters=values.unset,
               webhooks_on_message_send_url=values.unset,
               webhooks_on_message_send_method=values.unset,
               webhooks_on_message_update_url=values.unset,
               webhooks_on_message_update_method=values.unset,
               webhooks_on_message_remove_url=values.unset,
               webhooks_on_message_remove_method=values.unset,
               webhooks_on_channel_add_url=values.unset,
               webhooks_on_channel_add_method=values.unset,
               webhooks_on_channel_destroy_url=values.unset,
               webhooks_on_channel_destroy_method=values.unset,
               webhooks_on_channel_update_url=values.unset,
               webhooks_on_channel_update_method=values.unset,
               webhooks_on_member_add_url=values.unset,
               webhooks_on_member_add_method=values.unset,
               webhooks_on_member_remove_url=values.unset,
               webhooks_on_member_remove_method=values.unset,
               webhooks_on_message_sent_url=values.unset,
               webhooks_on_message_sent_method=values.unset,
               webhooks_on_message_updated_url=values.unset,
               webhooks_on_message_updated_method=values.unset,
               webhooks_on_message_removed_url=values.unset,
               webhooks_on_message_removed_method=values.unset,
               webhooks_on_channel_added_url=values.unset,
               webhooks_on_channel_added_method=values.unset,
               webhooks_on_channel_destroyed_url=values.unset,
               webhooks_on_channel_destroyed_method=values.unset,
               webhooks_on_channel_updated_url=values.unset,
               webhooks_on_channel_updated_method=values.unset,
               webhooks_on_member_added_url=values.unset,
               webhooks_on_member_added_method=values.unset,
               webhooks_on_member_removed_url=values.unset,
               webhooks_on_member_removed_method=values.unset,
               limits_channel_members=values.unset,
               limits_user_channels=values.unset):
        """
        Update the ServiceInstance

        :param unicode friendly_name: The friendly_name
        :param unicode default_service_role_sid: The default_service_role_sid
        :param unicode default_channel_role_sid: The default_channel_role_sid
        :param unicode default_channel_creator_role_sid: The default_channel_creator_role_sid
        :param bool read_status_enabled: The read_status_enabled
        :param bool reachability_enabled: The reachability_enabled
        :param unicode typing_indicator_timeout: The typing_indicator_timeout
        :param unicode consumption_report_interval: The consumption_report_interval
        :param bool notifications_new_message_enabled: The notifications.new_message.enabled
        :param unicode notifications_new_message_template: The notifications.new_message.template
        :param bool notifications_added_to_channel_enabled: The notifications.added_to_channel.enabled
        :param unicode notifications_added_to_channel_template: The notifications.added_to_channel.template
        :param bool notifications_removed_from_channel_enabled: The notifications.removed_from_channel.enabled
        :param unicode notifications_removed_from_channel_template: The notifications.removed_from_channel.template
        :param bool notifications_invited_to_channel_enabled: The notifications.invited_to_channel.enabled
        :param unicode notifications_invited_to_channel_template: The notifications.invited_to_channel.template
        :param unicode pre_webhook_url: The pre_webhook_url
        :param unicode post_webhook_url: The post_webhook_url
        :param unicode webhook_method: The webhook_method
        :param list[unicode] webhook_filters: The webhook_filters
        :param unicode webhooks_on_message_send_url: The webhooks.on_message_send.url
        :param unicode webhooks_on_message_send_method: The webhooks.on_message_send.method
        :param unicode webhooks_on_message_update_url: The webhooks.on_message_update.url
        :param unicode webhooks_on_message_update_method: The webhooks.on_message_update.method
        :param unicode webhooks_on_message_remove_url: The webhooks.on_message_remove.url
        :param unicode webhooks_on_message_remove_method: The webhooks.on_message_remove.method
        :param unicode webhooks_on_channel_add_url: The webhooks.on_channel_add.url
        :param unicode webhooks_on_channel_add_method: The webhooks.on_channel_add.method
        :param unicode webhooks_on_channel_destroy_url: The webhooks.on_channel_destroy.url
        :param unicode webhooks_on_channel_destroy_method: The webhooks.on_channel_destroy.method
        :param unicode webhooks_on_channel_update_url: The webhooks.on_channel_update.url
        :param unicode webhooks_on_channel_update_method: The webhooks.on_channel_update.method
        :param unicode webhooks_on_member_add_url: The webhooks.on_member_add.url
        :param unicode webhooks_on_member_add_method: The webhooks.on_member_add.method
        :param unicode webhooks_on_member_remove_url: The webhooks.on_member_remove.url
        :param unicode webhooks_on_member_remove_method: The webhooks.on_member_remove.method
        :param unicode webhooks_on_message_sent_url: The webhooks.on_message_sent.url
        :param unicode webhooks_on_message_sent_method: The webhooks.on_message_sent.method
        :param unicode webhooks_on_message_updated_url: The webhooks.on_message_updated.url
        :param unicode webhooks_on_message_updated_method: The webhooks.on_message_updated.method
        :param unicode webhooks_on_message_removed_url: The webhooks.on_message_removed.url
        :param unicode webhooks_on_message_removed_method: The webhooks.on_message_removed.method
        :param unicode webhooks_on_channel_added_url: The webhooks.on_channel_added.url
        :param unicode webhooks_on_channel_added_method: The webhooks.on_channel_added.method
        :param unicode webhooks_on_channel_destroyed_url: The webhooks.on_channel_destroyed.url
        :param unicode webhooks_on_channel_destroyed_method: The webhooks.on_channel_destroyed.method
        :param unicode webhooks_on_channel_updated_url: The webhooks.on_channel_updated.url
        :param unicode webhooks_on_channel_updated_method: The webhooks.on_channel_updated.method
        :param unicode webhooks_on_member_added_url: The webhooks.on_member_added.url
        :param unicode webhooks_on_member_added_method: The webhooks.on_member_added.method
        :param unicode webhooks_on_member_removed_url: The webhooks.on_member_removed.url
        :param unicode webhooks_on_member_removed_method: The webhooks.on_member_removed.method
        :param unicode limits_channel_members: The limits.channel_members
        :param unicode limits_user_channels: The limits.user_channels

        :returns: The updated ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        data = values.of({
            'FriendlyName': friendly_name,
            'DefaultServiceRoleSid': default_service_role_sid,
            'DefaultChannelRoleSid': default_channel_role_sid,
            'DefaultChannelCreatorRoleSid': default_channel_creator_role_sid,
            'ReadStatusEnabled': read_status_enabled,
            'ReachabilityEnabled': reachability_enabled,
            'TypingIndicatorTimeout': typing_indicator_timeout,
            'ConsumptionReportInterval': consumption_report_interval,
            'Notifications.NewMessage.Enabled': notifications_new_message_enabled,
            'Notifications.NewMessage.Template': notifications_new_message_template,
            'Notifications.AddedToChannel.Enabled': notifications_added_to_channel_enabled,
            'Notifications.AddedToChannel.Template': notifications_added_to_channel_template,
            'Notifications.RemovedFromChannel.Enabled': notifications_removed_from_channel_enabled,
            'Notifications.RemovedFromChannel.Template': notifications_removed_from_channel_template,
            'Notifications.InvitedToChannel.Enabled': notifications_invited_to_channel_enabled,
            'Notifications.InvitedToChannel.Template': notifications_invited_to_channel_template,
            'PreWebhookUrl': pre_webhook_url,
            'PostWebhookUrl': post_webhook_url,
            'WebhookMethod': webhook_method,
            'WebhookFilters': serialize.map(webhook_filters, lambda e: e),
            'Webhooks.OnMessageSend.Url': webhooks_on_message_send_url,
            'Webhooks.OnMessageSend.Method': webhooks_on_message_send_method,
            'Webhooks.OnMessageUpdate.Url': webhooks_on_message_update_url,
            'Webhooks.OnMessageUpdate.Method': webhooks_on_message_update_method,
            'Webhooks.OnMessageRemove.Url': webhooks_on_message_remove_url,
            'Webhooks.OnMessageRemove.Method': webhooks_on_message_remove_method,
            'Webhooks.OnChannelAdd.Url': webhooks_on_channel_add_url,
            'Webhooks.OnChannelAdd.Method': webhooks_on_channel_add_method,
            'Webhooks.OnChannelDestroy.Url': webhooks_on_channel_destroy_url,
            'Webhooks.OnChannelDestroy.Method': webhooks_on_channel_destroy_method,
            'Webhooks.OnChannelUpdate.Url': webhooks_on_channel_update_url,
            'Webhooks.OnChannelUpdate.Method': webhooks_on_channel_update_method,
            'Webhooks.OnMemberAdd.Url': webhooks_on_member_add_url,
            'Webhooks.OnMemberAdd.Method': webhooks_on_member_add_method,
            'Webhooks.OnMemberRemove.Url': webhooks_on_member_remove_url,
            'Webhooks.OnMemberRemove.Method': webhooks_on_member_remove_method,
            'Webhooks.OnMessageSent.Url': webhooks_on_message_sent_url,
            'Webhooks.OnMessageSent.Method': webhooks_on_message_sent_method,
            'Webhooks.OnMessageUpdated.Url': webhooks_on_message_updated_url,
            'Webhooks.OnMessageUpdated.Method': webhooks_on_message_updated_method,
            'Webhooks.OnMessageRemoved.Url': webhooks_on_message_removed_url,
            'Webhooks.OnMessageRemoved.Method': webhooks_on_message_removed_method,
            'Webhooks.OnChannelAdded.Url': webhooks_on_channel_added_url,
            'Webhooks.OnChannelAdded.Method': webhooks_on_channel_added_method,
            'Webhooks.OnChannelDestroyed.Url': webhooks_on_channel_destroyed_url,
            'Webhooks.OnChannelDestroyed.Method': webhooks_on_channel_destroyed_method,
            'Webhooks.OnChannelUpdated.Url': webhooks_on_channel_updated_url,
            'Webhooks.OnChannelUpdated.Method': webhooks_on_channel_updated_method,
            'Webhooks.OnMemberAdded.Url': webhooks_on_member_added_url,
            'Webhooks.OnMemberAdded.Method': webhooks_on_member_added_method,
            'Webhooks.OnMemberRemoved.Url': webhooks_on_member_removed_url,
            'Webhooks.OnMemberRemoved.Method': webhooks_on_member_removed_method,
            'Limits.ChannelMembers': limits_channel_members,
            'Limits.UserChannels': limits_user_channels,
        })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return ServiceInstance(self._version, payload, sid=self._solution['sid'], )

    @property
    def channels(self):
        """
        Access the channels

        :returns: twilio.rest.ip_messaging.v1.service.channel.ChannelList
        :rtype: twilio.rest.ip_messaging.v1.service.channel.ChannelList
        """
        if self._channels is None:
            self._channels = ChannelList(self._version, service_sid=self._solution['sid'], )
        return self._channels

    @property
    def roles(self):
        """
        Access the roles

        :returns: twilio.rest.ip_messaging.v1.service.role.RoleList
        :rtype: twilio.rest.ip_messaging.v1.service.role.RoleList
        """
        if self._roles is None:
            self._roles = RoleList(self._version, service_sid=self._solution['sid'], )
        return self._roles

    @property
    def users(self):
        """
        Access the users

        :returns: twilio.rest.ip_messaging.v1.service.user.UserList
        :rtype: twilio.rest.ip_messaging.v1.service.user.UserList
        """
        if self._users is None:
            self._users = UserList(self._version, service_sid=self._solution['sid'], )
        return self._users

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.IpMessaging.V1.ServiceContext {}>'.format(context)


class ServiceInstance(InstanceResource):

    def __init__(self, version, payload, sid=None):
        """
        Initialize the ServiceInstance

        :returns: twilio.rest.ip_messaging.v1.service.ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        super(ServiceInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'sid': payload.get('sid'),
            'account_sid': payload.get('account_sid'),
            'friendly_name': payload.get('friendly_name'),
            'date_created': deserialize.iso8601_datetime(payload.get('date_created')),
            'date_updated': deserialize.iso8601_datetime(payload.get('date_updated')),
            'default_service_role_sid': payload.get('default_service_role_sid'),
            'default_channel_role_sid': payload.get('default_channel_role_sid'),
            'default_channel_creator_role_sid': payload.get('default_channel_creator_role_sid'),
            'read_status_enabled': payload.get('read_status_enabled'),
            'reachability_enabled': payload.get('reachability_enabled'),
            'typing_indicator_timeout': deserialize.integer(payload.get('typing_indicator_timeout')),
            'consumption_report_interval': deserialize.integer(payload.get('consumption_report_interval')),
            'limits': payload.get('limits'),
            'webhooks': payload.get('webhooks'),
            'pre_webhook_url': payload.get('pre_webhook_url'),
            'post_webhook_url': payload.get('post_webhook_url'),
            'webhook_method': payload.get('webhook_method'),
            'webhook_filters': payload.get('webhook_filters'),
            'notifications': payload.get('notifications'),
            'url': payload.get('url'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {'sid': sid or self._properties['sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: ServiceContext for this ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceContext
        """
        if self._context is None:
            self._context = ServiceContext(self._version, sid=self._solution['sid'], )
        return self._context

    @property
    def sid(self):
        """
        :returns: The sid
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def friendly_name(self):
        """
        :returns: The friendly_name
        :rtype: unicode
        """
        return self._properties['friendly_name']

    @property
    def date_created(self):
        """
        :returns: The date_created
        :rtype: datetime
        """
        return self._properties['date_created']

    @property
    def date_updated(self):
        """
        :returns: The date_updated
        :rtype: datetime
        """
        return self._properties['date_updated']

    @property
    def default_service_role_sid(self):
        """
        :returns: The default_service_role_sid
        :rtype: unicode
        """
        return self._properties['default_service_role_sid']

    @property
    def default_channel_role_sid(self):
        """
        :returns: The default_channel_role_sid
        :rtype: unicode
        """
        return self._properties['default_channel_role_sid']

    @property
    def default_channel_creator_role_sid(self):
        """
        :returns: The default_channel_creator_role_sid
        :rtype: unicode
        """
        return self._properties['default_channel_creator_role_sid']

    @property
    def read_status_enabled(self):
        """
        :returns: The read_status_enabled
        :rtype: bool
        """
        return self._properties['read_status_enabled']

    @property
    def reachability_enabled(self):
        """
        :returns: The reachability_enabled
        :rtype: bool
        """
        return self._properties['reachability_enabled']

    @property
    def typing_indicator_timeout(self):
        """
        :returns: The typing_indicator_timeout
        :rtype: unicode
        """
        return self._properties['typing_indicator_timeout']

    @property
    def consumption_report_interval(self):
        """
        :returns: The consumption_report_interval
        :rtype: unicode
        """
        return self._properties['consumption_report_interval']

    @property
    def limits(self):
        """
        :returns: The limits
        :rtype: dict
        """
        return self._properties['limits']

    @property
    def webhooks(self):
        """
        :returns: The webhooks
        :rtype: dict
        """
        return self._properties['webhooks']

    @property
    def pre_webhook_url(self):
        """
        :returns: The pre_webhook_url
        :rtype: unicode
        """
        return self._properties['pre_webhook_url']

    @property
    def post_webhook_url(self):
        """
        :returns: The post_webhook_url
        :rtype: unicode
        """
        return self._properties['post_webhook_url']

    @property
    def webhook_method(self):
        """
        :returns: The webhook_method
        :rtype: unicode
        """
        return self._properties['webhook_method']

    @property
    def webhook_filters(self):
        """
        :returns: The webhook_filters
        :rtype: list[unicode]
        """
        return self._properties['webhook_filters']

    @property
    def notifications(self):
        """
        :returns: The notifications
        :rtype: dict
        """
        return self._properties['notifications']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: The links
        :rtype: unicode
        """
        return self._properties['links']

    def fetch(self):
        """
        Fetch the ServiceInstance

        :returns: The fetched ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
        """
        return self._proxy.fetch()

    def delete(self):
        """
        Deletes the ServiceInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    def update(self, friendly_name=values.unset,
               default_service_role_sid=values.unset,
               default_channel_role_sid=values.unset,
               default_channel_creator_role_sid=values.unset,
               read_status_enabled=values.unset, reachability_enabled=values.unset,
               typing_indicator_timeout=values.unset,
               consumption_report_interval=values.unset,
               notifications_new_message_enabled=values.unset,
               notifications_new_message_template=values.unset,
               notifications_added_to_channel_enabled=values.unset,
               notifications_added_to_channel_template=values.unset,
               notifications_removed_from_channel_enabled=values.unset,
               notifications_removed_from_channel_template=values.unset,
               notifications_invited_to_channel_enabled=values.unset,
               notifications_invited_to_channel_template=values.unset,
               pre_webhook_url=values.unset, post_webhook_url=values.unset,
               webhook_method=values.unset, webhook_filters=values.unset,
               webhooks_on_message_send_url=values.unset,
               webhooks_on_message_send_method=values.unset,
               webhooks_on_message_update_url=values.unset,
               webhooks_on_message_update_method=values.unset,
               webhooks_on_message_remove_url=values.unset,
               webhooks_on_message_remove_method=values.unset,
               webhooks_on_channel_add_url=values.unset,
               webhooks_on_channel_add_method=values.unset,
               webhooks_on_channel_destroy_url=values.unset,
               webhooks_on_channel_destroy_method=values.unset,
               webhooks_on_channel_update_url=values.unset,
               webhooks_on_channel_update_method=values.unset,
               webhooks_on_member_add_url=values.unset,
               webhooks_on_member_add_method=values.unset,
               webhooks_on_member_remove_url=values.unset,
               webhooks_on_member_remove_method=values.unset,
               webhooks_on_message_sent_url=values.unset,
               webhooks_on_message_sent_method=values.unset,
               webhooks_on_message_updated_url=values.unset,
               webhooks_on_message_updated_method=values.unset,
               webhooks_on_message_removed_url=values.unset,
               webhooks_on_message_removed_method=values.unset,
               webhooks_on_channel_added_url=values.unset,
               webhooks_on_channel_added_method=values.unset,
               webhooks_on_channel_destroyed_url=values.unset,
               webhooks_on_channel_destroyed_method=values.unset,
               webhooks_on_channel_updated_url=values.unset,
               webhooks_on_channel_updated_method=values.unset,
               webhooks_on_member_added_url=values.unset,
               webhooks_on_member_added_method=values.unset,
               webhooks_on_member_removed_url=values.unset,
               webhooks_on_member_removed_method=values.unset,
               limits_channel_members=values.unset,
               limits_user_channels=values.unset):
        """
        Update the ServiceInstance

        :param unicode friendly_name: The friendly_name
        :param unicode default_service_role_sid: The default_service_role_sid
        :param unicode default_channel_role_sid: The default_channel_role_sid
        :param unicode default_channel_creator_role_sid: The default_channel_creator_role_sid
        :param bool read_status_enabled: The read_status_enabled
        :param bool reachability_enabled: The reachability_enabled
        :param unicode typing_indicator_timeout: The typing_indicator_timeout
        :param unicode consumption_report_interval: The consumption_report_interval
        :param bool notifications_new_message_enabled: The notifications.new_message.enabled
        :param unicode notifications_new_message_template: The notifications.new_message.template
        :param bool notifications_added_to_channel_enabled: The notifications.added_to_channel.enabled
        :param unicode notifications_added_to_channel_template: The notifications.added_to_channel.template
        :param bool notifications_removed_from_channel_enabled: The notifications.removed_from_channel.enabled
        :param unicode notifications_removed_from_channel_template: The notifications.removed_from_channel.template
        :param bool notifications_invited_to_channel_enabled: The notifications.invited_to_channel.enabled
        :param unicode notifications_invited_to_channel_template: The notifications.invited_to_channel.template
        :param unicode pre_webhook_url: The pre_webhook_url
        :param unicode post_webhook_url: The post_webhook_url
        :param unicode webhook_method: The webhook_method
        :param list[unicode] webhook_filters: The webhook_filters
        :param unicode webhooks_on_message_send_url: The webhooks.on_message_send.url
        :param unicode webhooks_on_message_send_method: The webhooks.on_message_send.method
        :param unicode webhooks_on_message_update_url: The webhooks.on_message_update.url
        :param unicode webhooks_on_message_update_method: The webhooks.on_message_update.method
        :param unicode webhooks_on_message_remove_url: The webhooks.on_message_remove.url
        :param unicode webhooks_on_message_remove_method: The webhooks.on_message_remove.method
        :param unicode webhooks_on_channel_add_url: The webhooks.on_channel_add.url
        :param unicode webhooks_on_channel_add_method: The webhooks.on_channel_add.method
        :param unicode webhooks_on_channel_destroy_url: The webhooks.on_channel_destroy.url
        :param unicode webhooks_on_channel_destroy_method: The webhooks.on_channel_destroy.method
        :param unicode webhooks_on_channel_update_url: The webhooks.on_channel_update.url
        :param unicode webhooks_on_channel_update_method: The webhooks.on_channel_update.method
        :param unicode webhooks_on_member_add_url: The webhooks.on_member_add.url
        :param unicode webhooks_on_member_add_method: The webhooks.on_member_add.method
        :param unicode webhooks_on_member_remove_url: The webhooks.on_member_remove.url
        :param unicode webhooks_on_member_remove_method: The webhooks.on_member_remove.method
        :param unicode webhooks_on_message_sent_url: The webhooks.on_message_sent.url
        :param unicode webhooks_on_message_sent_method: The webhooks.on_message_sent.method
        :param unicode webhooks_on_message_updated_url: The webhooks.on_message_updated.url
        :param unicode webhooks_on_message_updated_method: The webhooks.on_message_updated.method
        :param unicode webhooks_on_message_removed_url: The webhooks.on_message_removed.url
        :param unicode webhooks_on_message_removed_method: The webhooks.on_message_removed.method
        :param unicode webhooks_on_channel_added_url: The webhooks.on_channel_added.url
        :param unicode webhooks_on_channel_added_method: The webhooks.on_channel_added.method
        :param unicode webhooks_on_channel_destroyed_url: The webhooks.on_channel_destroyed.url
        :param unicode webhooks_on_channel_destroyed_method: The webhooks.on_channel_destroyed.method
        :param unicode webhooks_on_channel_updated_url: The webhooks.on_channel_updated.url
        :param unicode webhooks_on_channel_updated_method: The webhooks.on_channel_updated.method
        :param unicode webhooks_on_member_added_url: The webhooks.on_member_added.url
        :param unicode webhooks_on_member_added_method: The webhooks.on_member_added.method
        :param unicode webhooks_on_member_removed_url: The webhooks.on_member_removed.url
        :param unicode webhooks_on_member_removed_method: The webhooks.on_member_removed.method
        :param unicode limits_channel_members: The limits.channel_members
        :param unicode limits_user_channels: The limits.user_channels

        :returns: The updated ServiceInstance
        :rtype: twilio.rest.ip_messaging.v1.service.ServiceInstance
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.update(
            friendly_name=friendly_name,
            default_service_role_sid=default_service_role_sid,
            default_channel_role_sid=default_channel_role_sid,
            default_channel_creator_role_sid=default_channel_creator_role_sid,
            read_status_enabled=read_status_enabled,
            reachability_enabled=reachability_enabled,
            typing_indicator_timeout=typing_indicator_timeout,
            consumption_report_interval=consumption_report_interval,
            notifications_new_message_enabled=notifications_new_message_enabled,
            notifications_new_message_template=notifications_new_message_template,
            notifications_added_to_channel_enabled=notifications_added_to_channel_enabled,
            notifications_added_to_channel_template=notifications_added_to_channel_template,
            notifications_removed_from_channel_enabled=notifications_removed_from_channel_enabled,
            notifications_removed_from_channel_template=notifications_removed_from_channel_template,
            notifications_invited_to_channel_enabled=notifications_invited_to_channel_enabled,
            notifications_invited_to_channel_template=notifications_invited_to_channel_template,
            pre_webhook_url=pre_webhook_url,
            post_webhook_url=post_webhook_url,
            webhook_method=webhook_method,
            webhook_filters=webhook_filters,
            webhooks_on_message_send_url=webhooks_on_message_send_url,
            webhooks_on_message_send_method=webhooks_on_message_send_method,
            webhooks_on_message_update_url=webhooks_on_message_update_url,
            webhooks_on_message_update_method=webhooks_on_message_update_method,
            webhooks_on_message_remove_url=webhooks_on_message_remove_url,
            webhooks_on_message_remove_method=webhooks_on_message_remove_method,
            webhooks_on_channel_add_url=webhooks_on_channel_add_url,
            webhooks_on_channel_add_method=webhooks_on_channel_add_method,
            webhooks_on_channel_destroy_url=webhooks_on_channel_destroy_url,
            webhooks_on_channel_destroy_method=webhooks_on_channel_destroy_method,
            webhooks_on_channel_update_url=webhooks_on_channel_update_url,
            webhooks_on_channel_update_method=webhooks_on_channel_update_method,
            webhooks_on_member_add_url=webhooks_on_member_add_url,
            webhooks_on_member_add_method=webhooks_on_member_add_method,
            webhooks_on_member_remove_url=webhooks_on_member_remove_url,
            webhooks_on_member_remove_method=webhooks_on_member_remove_method,
            webhooks_on_message_sent_url=webhooks_on_message_sent_url,
            webhooks_on_message_sent_method=webhooks_on_message_sent_method,
            webhooks_on_message_updated_url=webhooks_on_message_updated_url,
            webhooks_on_message_updated_method=webhooks_on_message_updated_method,
            webhooks_on_message_removed_url=webhooks_on_message_removed_url,
            webhooks_on_message_removed_method=webhooks_on_message_removed_method,
            webhooks_on_channel_added_url=webhooks_on_channel_added_url,
            webhooks_on_channel_added_method=webhooks_on_channel_added_method,
            webhooks_on_channel_destroyed_url=webhooks_on_channel_destroyed_url,
            webhooks_on_channel_destroyed_method=webhooks_on_channel_destroyed_method,
            webhooks_on_channel_updated_url=webhooks_on_channel_updated_url,
            webhooks_on_channel_updated_method=webhooks_on_channel_updated_method,
            webhooks_on_member_added_url=webhooks_on_member_added_url,
            webhooks_on_member_added_method=webhooks_on_member_added_method,
            webhooks_on_member_removed_url=webhooks_on_member_removed_url,
            webhooks_on_member_removed_method=webhooks_on_member_removed_method,
            limits_channel_members=limits_channel_members,
            limits_user_channels=limits_user_channels,
        )

<<<<<<< HEAD
    async def update_async(
        self,
        friendly_name: Union[str, object] = values.unset,
        default_service_role_sid: Union[str, object] = values.unset,
        default_channel_role_sid: Union[str, object] = values.unset,
        default_channel_creator_role_sid: Union[str, object] = values.unset,
        read_status_enabled: Union[bool, object] = values.unset,
        reachability_enabled: Union[bool, object] = values.unset,
        typing_indicator_timeout: Union[int, object] = values.unset,
        consumption_report_interval: Union[int, object] = values.unset,
        notifications_new_message_enabled: Union[bool, object] = values.unset,
        notifications_new_message_template: Union[str, object] = values.unset,
        notifications_added_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_added_to_channel_template: Union[str, object] = values.unset,
        notifications_removed_from_channel_enabled: Union[bool, object] = values.unset,
        notifications_removed_from_channel_template: Union[str, object] = values.unset,
        notifications_invited_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_invited_to_channel_template: Union[str, object] = values.unset,
        pre_webhook_url: Union[str, object] = values.unset,
        post_webhook_url: Union[str, object] = values.unset,
        webhook_method: Union[str, object] = values.unset,
        webhook_filters: Union[List[str], object] = values.unset,
        webhooks_on_message_send_url: Union[str, object] = values.unset,
        webhooks_on_message_send_method: Union[str, object] = values.unset,
        webhooks_on_message_update_url: Union[str, object] = values.unset,
        webhooks_on_message_update_method: Union[str, object] = values.unset,
        webhooks_on_message_remove_url: Union[str, object] = values.unset,
        webhooks_on_message_remove_method: Union[str, object] = values.unset,
        webhooks_on_channel_add_url: Union[str, object] = values.unset,
        webhooks_on_channel_add_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_method: Union[str, object] = values.unset,
        webhooks_on_channel_update_url: Union[str, object] = values.unset,
        webhooks_on_channel_update_method: Union[str, object] = values.unset,
        webhooks_on_member_add_url: Union[str, object] = values.unset,
        webhooks_on_member_add_method: Union[str, object] = values.unset,
        webhooks_on_member_remove_url: Union[str, object] = values.unset,
        webhooks_on_member_remove_method: Union[str, object] = values.unset,
        webhooks_on_message_sent_url: Union[str, object] = values.unset,
        webhooks_on_message_sent_method: Union[str, object] = values.unset,
        webhooks_on_message_updated_url: Union[str, object] = values.unset,
        webhooks_on_message_updated_method: Union[str, object] = values.unset,
        webhooks_on_message_removed_url: Union[str, object] = values.unset,
        webhooks_on_message_removed_method: Union[str, object] = values.unset,
        webhooks_on_channel_added_url: Union[str, object] = values.unset,
        webhooks_on_channel_added_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_method: Union[str, object] = values.unset,
        webhooks_on_channel_updated_url: Union[str, object] = values.unset,
        webhooks_on_channel_updated_method: Union[str, object] = values.unset,
        webhooks_on_member_added_url: Union[str, object] = values.unset,
        webhooks_on_member_added_method: Union[str, object] = values.unset,
        webhooks_on_member_removed_url: Union[str, object] = values.unset,
        webhooks_on_member_removed_method: Union[str, object] = values.unset,
        limits_channel_members: Union[int, object] = values.unset,
        limits_user_channels: Union[int, object] = values.unset,
    ) -> "ServiceInstance":
        """
        Asynchronous coroutine to update the ServiceInstance

        :param friendly_name:
        :param default_service_role_sid:
        :param default_channel_role_sid:
        :param default_channel_creator_role_sid:
        :param read_status_enabled:
        :param reachability_enabled:
        :param typing_indicator_timeout:
        :param consumption_report_interval:
        :param notifications_new_message_enabled:
        :param notifications_new_message_template:
        :param notifications_added_to_channel_enabled:
        :param notifications_added_to_channel_template:
        :param notifications_removed_from_channel_enabled:
        :param notifications_removed_from_channel_template:
        :param notifications_invited_to_channel_enabled:
        :param notifications_invited_to_channel_template:
        :param pre_webhook_url:
        :param post_webhook_url:
        :param webhook_method:
        :param webhook_filters:
        :param webhooks_on_message_send_url:
        :param webhooks_on_message_send_method:
        :param webhooks_on_message_update_url:
        :param webhooks_on_message_update_method:
        :param webhooks_on_message_remove_url:
        :param webhooks_on_message_remove_method:
        :param webhooks_on_channel_add_url:
        :param webhooks_on_channel_add_method:
        :param webhooks_on_channel_destroy_url:
        :param webhooks_on_channel_destroy_method:
        :param webhooks_on_channel_update_url:
        :param webhooks_on_channel_update_method:
        :param webhooks_on_member_add_url:
        :param webhooks_on_member_add_method:
        :param webhooks_on_member_remove_url:
        :param webhooks_on_member_remove_method:
        :param webhooks_on_message_sent_url:
        :param webhooks_on_message_sent_method:
        :param webhooks_on_message_updated_url:
        :param webhooks_on_message_updated_method:
        :param webhooks_on_message_removed_url:
        :param webhooks_on_message_removed_method:
        :param webhooks_on_channel_added_url:
        :param webhooks_on_channel_added_method:
        :param webhooks_on_channel_destroyed_url:
        :param webhooks_on_channel_destroyed_method:
        :param webhooks_on_channel_updated_url:
        :param webhooks_on_channel_updated_method:
        :param webhooks_on_member_added_url:
        :param webhooks_on_member_added_method:
        :param webhooks_on_member_removed_url:
        :param webhooks_on_member_removed_method:
        :param limits_channel_members:
        :param limits_user_channels:

        :returns: The updated ServiceInstance
        """
        return await self._proxy.update_async(
            friendly_name=friendly_name,
            default_service_role_sid=default_service_role_sid,
            default_channel_role_sid=default_channel_role_sid,
            default_channel_creator_role_sid=default_channel_creator_role_sid,
            read_status_enabled=read_status_enabled,
            reachability_enabled=reachability_enabled,
            typing_indicator_timeout=typing_indicator_timeout,
            consumption_report_interval=consumption_report_interval,
            notifications_new_message_enabled=notifications_new_message_enabled,
            notifications_new_message_template=notifications_new_message_template,
            notifications_added_to_channel_enabled=notifications_added_to_channel_enabled,
            notifications_added_to_channel_template=notifications_added_to_channel_template,
            notifications_removed_from_channel_enabled=notifications_removed_from_channel_enabled,
            notifications_removed_from_channel_template=notifications_removed_from_channel_template,
            notifications_invited_to_channel_enabled=notifications_invited_to_channel_enabled,
            notifications_invited_to_channel_template=notifications_invited_to_channel_template,
            pre_webhook_url=pre_webhook_url,
            post_webhook_url=post_webhook_url,
            webhook_method=webhook_method,
            webhook_filters=webhook_filters,
            webhooks_on_message_send_url=webhooks_on_message_send_url,
            webhooks_on_message_send_method=webhooks_on_message_send_method,
            webhooks_on_message_update_url=webhooks_on_message_update_url,
            webhooks_on_message_update_method=webhooks_on_message_update_method,
            webhooks_on_message_remove_url=webhooks_on_message_remove_url,
            webhooks_on_message_remove_method=webhooks_on_message_remove_method,
            webhooks_on_channel_add_url=webhooks_on_channel_add_url,
            webhooks_on_channel_add_method=webhooks_on_channel_add_method,
            webhooks_on_channel_destroy_url=webhooks_on_channel_destroy_url,
            webhooks_on_channel_destroy_method=webhooks_on_channel_destroy_method,
            webhooks_on_channel_update_url=webhooks_on_channel_update_url,
            webhooks_on_channel_update_method=webhooks_on_channel_update_method,
            webhooks_on_member_add_url=webhooks_on_member_add_url,
            webhooks_on_member_add_method=webhooks_on_member_add_method,
            webhooks_on_member_remove_url=webhooks_on_member_remove_url,
            webhooks_on_member_remove_method=webhooks_on_member_remove_method,
            webhooks_on_message_sent_url=webhooks_on_message_sent_url,
            webhooks_on_message_sent_method=webhooks_on_message_sent_method,
            webhooks_on_message_updated_url=webhooks_on_message_updated_url,
            webhooks_on_message_updated_method=webhooks_on_message_updated_method,
            webhooks_on_message_removed_url=webhooks_on_message_removed_url,
            webhooks_on_message_removed_method=webhooks_on_message_removed_method,
            webhooks_on_channel_added_url=webhooks_on_channel_added_url,
            webhooks_on_channel_added_method=webhooks_on_channel_added_method,
            webhooks_on_channel_destroyed_url=webhooks_on_channel_destroyed_url,
            webhooks_on_channel_destroyed_method=webhooks_on_channel_destroyed_method,
            webhooks_on_channel_updated_url=webhooks_on_channel_updated_url,
            webhooks_on_channel_updated_method=webhooks_on_channel_updated_method,
            webhooks_on_member_added_url=webhooks_on_member_added_url,
            webhooks_on_member_added_method=webhooks_on_member_added_method,
            webhooks_on_member_removed_url=webhooks_on_member_removed_url,
            webhooks_on_member_removed_method=webhooks_on_member_removed_method,
            limits_channel_members=limits_channel_members,
            limits_user_channels=limits_user_channels,
        )

    @property
    def channels(self) -> ChannelList:
        """
        Access the channels
=======
    @property
    def channels(self):
        """
        Access the channels

        :returns: twilio.rest.ip_messaging.v1.service.channel.ChannelList
        :rtype: twilio.rest.ip_messaging.v1.service.channel.ChannelList
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.channels

    @property
<<<<<<< HEAD
    def roles(self) -> RoleList:
        """
        Access the roles
=======
    def roles(self):
        """
        Access the roles

        :returns: twilio.rest.ip_messaging.v1.service.role.RoleList
        :rtype: twilio.rest.ip_messaging.v1.service.role.RoleList
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.roles

    @property
<<<<<<< HEAD
    def users(self) -> UserList:
        """
        Access the users
        """
        return self._proxy.users

    def __repr__(self) -> str:
=======
    def users(self):
        """
        Access the users

        :returns: twilio.rest.ip_messaging.v1.service.user.UserList
        :rtype: twilio.rest.ip_messaging.v1.service.user.UserList
        """
        return self._proxy.users

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.IpMessaging.V1.ServiceInstance {}>".format(context)


class ServiceContext(InstanceContext):

    def __init__(self, version: Version, sid: str):
        """
        Initialize the ServiceContext

        :param version: Version that contains the resource
        :param sid:
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Services/{sid}".format(**self._solution)

        self._channels: Optional[ChannelList] = None
        self._roles: Optional[RoleList] = None
        self._users: Optional[UserList] = None

    def delete(self) -> bool:
        """
        Deletes the ServiceInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return self._version.delete(method="DELETE", uri=self._uri, headers=headers)

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the ServiceInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return await self._version.delete_async(
            method="DELETE", uri=self._uri, headers=headers
        )

    def fetch(self) -> ServiceInstance:
        """
        Fetch the ServiceInstance


        :returns: The fetched ServiceInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return ServiceInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> ServiceInstance:
        """
        Asynchronous coroutine to fetch the ServiceInstance


        :returns: The fetched ServiceInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return ServiceInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def update(
        self,
        friendly_name: Union[str, object] = values.unset,
        default_service_role_sid: Union[str, object] = values.unset,
        default_channel_role_sid: Union[str, object] = values.unset,
        default_channel_creator_role_sid: Union[str, object] = values.unset,
        read_status_enabled: Union[bool, object] = values.unset,
        reachability_enabled: Union[bool, object] = values.unset,
        typing_indicator_timeout: Union[int, object] = values.unset,
        consumption_report_interval: Union[int, object] = values.unset,
        notifications_new_message_enabled: Union[bool, object] = values.unset,
        notifications_new_message_template: Union[str, object] = values.unset,
        notifications_added_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_added_to_channel_template: Union[str, object] = values.unset,
        notifications_removed_from_channel_enabled: Union[bool, object] = values.unset,
        notifications_removed_from_channel_template: Union[str, object] = values.unset,
        notifications_invited_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_invited_to_channel_template: Union[str, object] = values.unset,
        pre_webhook_url: Union[str, object] = values.unset,
        post_webhook_url: Union[str, object] = values.unset,
        webhook_method: Union[str, object] = values.unset,
        webhook_filters: Union[List[str], object] = values.unset,
        webhooks_on_message_send_url: Union[str, object] = values.unset,
        webhooks_on_message_send_method: Union[str, object] = values.unset,
        webhooks_on_message_update_url: Union[str, object] = values.unset,
        webhooks_on_message_update_method: Union[str, object] = values.unset,
        webhooks_on_message_remove_url: Union[str, object] = values.unset,
        webhooks_on_message_remove_method: Union[str, object] = values.unset,
        webhooks_on_channel_add_url: Union[str, object] = values.unset,
        webhooks_on_channel_add_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_method: Union[str, object] = values.unset,
        webhooks_on_channel_update_url: Union[str, object] = values.unset,
        webhooks_on_channel_update_method: Union[str, object] = values.unset,
        webhooks_on_member_add_url: Union[str, object] = values.unset,
        webhooks_on_member_add_method: Union[str, object] = values.unset,
        webhooks_on_member_remove_url: Union[str, object] = values.unset,
        webhooks_on_member_remove_method: Union[str, object] = values.unset,
        webhooks_on_message_sent_url: Union[str, object] = values.unset,
        webhooks_on_message_sent_method: Union[str, object] = values.unset,
        webhooks_on_message_updated_url: Union[str, object] = values.unset,
        webhooks_on_message_updated_method: Union[str, object] = values.unset,
        webhooks_on_message_removed_url: Union[str, object] = values.unset,
        webhooks_on_message_removed_method: Union[str, object] = values.unset,
        webhooks_on_channel_added_url: Union[str, object] = values.unset,
        webhooks_on_channel_added_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_method: Union[str, object] = values.unset,
        webhooks_on_channel_updated_url: Union[str, object] = values.unset,
        webhooks_on_channel_updated_method: Union[str, object] = values.unset,
        webhooks_on_member_added_url: Union[str, object] = values.unset,
        webhooks_on_member_added_method: Union[str, object] = values.unset,
        webhooks_on_member_removed_url: Union[str, object] = values.unset,
        webhooks_on_member_removed_method: Union[str, object] = values.unset,
        limits_channel_members: Union[int, object] = values.unset,
        limits_user_channels: Union[int, object] = values.unset,
    ) -> ServiceInstance:
        """
        Update the ServiceInstance

        :param friendly_name:
        :param default_service_role_sid:
        :param default_channel_role_sid:
        :param default_channel_creator_role_sid:
        :param read_status_enabled:
        :param reachability_enabled:
        :param typing_indicator_timeout:
        :param consumption_report_interval:
        :param notifications_new_message_enabled:
        :param notifications_new_message_template:
        :param notifications_added_to_channel_enabled:
        :param notifications_added_to_channel_template:
        :param notifications_removed_from_channel_enabled:
        :param notifications_removed_from_channel_template:
        :param notifications_invited_to_channel_enabled:
        :param notifications_invited_to_channel_template:
        :param pre_webhook_url:
        :param post_webhook_url:
        :param webhook_method:
        :param webhook_filters:
        :param webhooks_on_message_send_url:
        :param webhooks_on_message_send_method:
        :param webhooks_on_message_update_url:
        :param webhooks_on_message_update_method:
        :param webhooks_on_message_remove_url:
        :param webhooks_on_message_remove_method:
        :param webhooks_on_channel_add_url:
        :param webhooks_on_channel_add_method:
        :param webhooks_on_channel_destroy_url:
        :param webhooks_on_channel_destroy_method:
        :param webhooks_on_channel_update_url:
        :param webhooks_on_channel_update_method:
        :param webhooks_on_member_add_url:
        :param webhooks_on_member_add_method:
        :param webhooks_on_member_remove_url:
        :param webhooks_on_member_remove_method:
        :param webhooks_on_message_sent_url:
        :param webhooks_on_message_sent_method:
        :param webhooks_on_message_updated_url:
        :param webhooks_on_message_updated_method:
        :param webhooks_on_message_removed_url:
        :param webhooks_on_message_removed_method:
        :param webhooks_on_channel_added_url:
        :param webhooks_on_channel_added_method:
        :param webhooks_on_channel_destroyed_url:
        :param webhooks_on_channel_destroyed_method:
        :param webhooks_on_channel_updated_url:
        :param webhooks_on_channel_updated_method:
        :param webhooks_on_member_added_url:
        :param webhooks_on_member_added_method:
        :param webhooks_on_member_removed_url:
        :param webhooks_on_member_removed_method:
        :param limits_channel_members:
        :param limits_user_channels:

        :returns: The updated ServiceInstance
        """

        data = values.of(
            {
                "FriendlyName": friendly_name,
                "DefaultServiceRoleSid": default_service_role_sid,
                "DefaultChannelRoleSid": default_channel_role_sid,
                "DefaultChannelCreatorRoleSid": default_channel_creator_role_sid,
                "ReadStatusEnabled": serialize.boolean_to_string(read_status_enabled),
                "ReachabilityEnabled": serialize.boolean_to_string(
                    reachability_enabled
                ),
                "TypingIndicatorTimeout": typing_indicator_timeout,
                "ConsumptionReportInterval": consumption_report_interval,
                "Notifications.NewMessage.Enabled": serialize.boolean_to_string(
                    notifications_new_message_enabled
                ),
                "Notifications.NewMessage.Template": notifications_new_message_template,
                "Notifications.AddedToChannel.Enabled": serialize.boolean_to_string(
                    notifications_added_to_channel_enabled
                ),
                "Notifications.AddedToChannel.Template": notifications_added_to_channel_template,
                "Notifications.RemovedFromChannel.Enabled": serialize.boolean_to_string(
                    notifications_removed_from_channel_enabled
                ),
                "Notifications.RemovedFromChannel.Template": notifications_removed_from_channel_template,
                "Notifications.InvitedToChannel.Enabled": serialize.boolean_to_string(
                    notifications_invited_to_channel_enabled
                ),
                "Notifications.InvitedToChannel.Template": notifications_invited_to_channel_template,
                "PreWebhookUrl": pre_webhook_url,
                "PostWebhookUrl": post_webhook_url,
                "WebhookMethod": webhook_method,
                "WebhookFilters": serialize.map(webhook_filters, lambda e: e),
                "Webhooks.OnMessageSend.Url": webhooks_on_message_send_url,
                "Webhooks.OnMessageSend.Method": webhooks_on_message_send_method,
                "Webhooks.OnMessageUpdate.Url": webhooks_on_message_update_url,
                "Webhooks.OnMessageUpdate.Method": webhooks_on_message_update_method,
                "Webhooks.OnMessageRemove.Url": webhooks_on_message_remove_url,
                "Webhooks.OnMessageRemove.Method": webhooks_on_message_remove_method,
                "Webhooks.OnChannelAdd.Url": webhooks_on_channel_add_url,
                "Webhooks.OnChannelAdd.Method": webhooks_on_channel_add_method,
                "Webhooks.OnChannelDestroy.Url": webhooks_on_channel_destroy_url,
                "Webhooks.OnChannelDestroy.Method": webhooks_on_channel_destroy_method,
                "Webhooks.OnChannelUpdate.Url": webhooks_on_channel_update_url,
                "Webhooks.OnChannelUpdate.Method": webhooks_on_channel_update_method,
                "Webhooks.OnMemberAdd.Url": webhooks_on_member_add_url,
                "Webhooks.OnMemberAdd.Method": webhooks_on_member_add_method,
                "Webhooks.OnMemberRemove.Url": webhooks_on_member_remove_url,
                "Webhooks.OnMemberRemove.Method": webhooks_on_member_remove_method,
                "Webhooks.OnMessageSent.Url": webhooks_on_message_sent_url,
                "Webhooks.OnMessageSent.Method": webhooks_on_message_sent_method,
                "Webhooks.OnMessageUpdated.Url": webhooks_on_message_updated_url,
                "Webhooks.OnMessageUpdated.Method": webhooks_on_message_updated_method,
                "Webhooks.OnMessageRemoved.Url": webhooks_on_message_removed_url,
                "Webhooks.OnMessageRemoved.Method": webhooks_on_message_removed_method,
                "Webhooks.OnChannelAdded.Url": webhooks_on_channel_added_url,
                "Webhooks.OnChannelAdded.Method": webhooks_on_channel_added_method,
                "Webhooks.OnChannelDestroyed.Url": webhooks_on_channel_destroyed_url,
                "Webhooks.OnChannelDestroyed.Method": webhooks_on_channel_destroyed_method,
                "Webhooks.OnChannelUpdated.Url": webhooks_on_channel_updated_url,
                "Webhooks.OnChannelUpdated.Method": webhooks_on_channel_updated_method,
                "Webhooks.OnMemberAdded.Url": webhooks_on_member_added_url,
                "Webhooks.OnMemberAdded.Method": webhooks_on_member_added_method,
                "Webhooks.OnMemberRemoved.Url": webhooks_on_member_removed_url,
                "Webhooks.OnMemberRemoved.Method": webhooks_on_member_removed_method,
                "Limits.ChannelMembers": limits_channel_members,
                "Limits.UserChannels": limits_user_channels,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ServiceInstance(self._version, payload, sid=self._solution["sid"])

    async def update_async(
        self,
        friendly_name: Union[str, object] = values.unset,
        default_service_role_sid: Union[str, object] = values.unset,
        default_channel_role_sid: Union[str, object] = values.unset,
        default_channel_creator_role_sid: Union[str, object] = values.unset,
        read_status_enabled: Union[bool, object] = values.unset,
        reachability_enabled: Union[bool, object] = values.unset,
        typing_indicator_timeout: Union[int, object] = values.unset,
        consumption_report_interval: Union[int, object] = values.unset,
        notifications_new_message_enabled: Union[bool, object] = values.unset,
        notifications_new_message_template: Union[str, object] = values.unset,
        notifications_added_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_added_to_channel_template: Union[str, object] = values.unset,
        notifications_removed_from_channel_enabled: Union[bool, object] = values.unset,
        notifications_removed_from_channel_template: Union[str, object] = values.unset,
        notifications_invited_to_channel_enabled: Union[bool, object] = values.unset,
        notifications_invited_to_channel_template: Union[str, object] = values.unset,
        pre_webhook_url: Union[str, object] = values.unset,
        post_webhook_url: Union[str, object] = values.unset,
        webhook_method: Union[str, object] = values.unset,
        webhook_filters: Union[List[str], object] = values.unset,
        webhooks_on_message_send_url: Union[str, object] = values.unset,
        webhooks_on_message_send_method: Union[str, object] = values.unset,
        webhooks_on_message_update_url: Union[str, object] = values.unset,
        webhooks_on_message_update_method: Union[str, object] = values.unset,
        webhooks_on_message_remove_url: Union[str, object] = values.unset,
        webhooks_on_message_remove_method: Union[str, object] = values.unset,
        webhooks_on_channel_add_url: Union[str, object] = values.unset,
        webhooks_on_channel_add_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroy_method: Union[str, object] = values.unset,
        webhooks_on_channel_update_url: Union[str, object] = values.unset,
        webhooks_on_channel_update_method: Union[str, object] = values.unset,
        webhooks_on_member_add_url: Union[str, object] = values.unset,
        webhooks_on_member_add_method: Union[str, object] = values.unset,
        webhooks_on_member_remove_url: Union[str, object] = values.unset,
        webhooks_on_member_remove_method: Union[str, object] = values.unset,
        webhooks_on_message_sent_url: Union[str, object] = values.unset,
        webhooks_on_message_sent_method: Union[str, object] = values.unset,
        webhooks_on_message_updated_url: Union[str, object] = values.unset,
        webhooks_on_message_updated_method: Union[str, object] = values.unset,
        webhooks_on_message_removed_url: Union[str, object] = values.unset,
        webhooks_on_message_removed_method: Union[str, object] = values.unset,
        webhooks_on_channel_added_url: Union[str, object] = values.unset,
        webhooks_on_channel_added_method: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_url: Union[str, object] = values.unset,
        webhooks_on_channel_destroyed_method: Union[str, object] = values.unset,
        webhooks_on_channel_updated_url: Union[str, object] = values.unset,
        webhooks_on_channel_updated_method: Union[str, object] = values.unset,
        webhooks_on_member_added_url: Union[str, object] = values.unset,
        webhooks_on_member_added_method: Union[str, object] = values.unset,
        webhooks_on_member_removed_url: Union[str, object] = values.unset,
        webhooks_on_member_removed_method: Union[str, object] = values.unset,
        limits_channel_members: Union[int, object] = values.unset,
        limits_user_channels: Union[int, object] = values.unset,
    ) -> ServiceInstance:
        """
        Asynchronous coroutine to update the ServiceInstance

        :param friendly_name:
        :param default_service_role_sid:
        :param default_channel_role_sid:
        :param default_channel_creator_role_sid:
        :param read_status_enabled:
        :param reachability_enabled:
        :param typing_indicator_timeout:
        :param consumption_report_interval:
        :param notifications_new_message_enabled:
        :param notifications_new_message_template:
        :param notifications_added_to_channel_enabled:
        :param notifications_added_to_channel_template:
        :param notifications_removed_from_channel_enabled:
        :param notifications_removed_from_channel_template:
        :param notifications_invited_to_channel_enabled:
        :param notifications_invited_to_channel_template:
        :param pre_webhook_url:
        :param post_webhook_url:
        :param webhook_method:
        :param webhook_filters:
        :param webhooks_on_message_send_url:
        :param webhooks_on_message_send_method:
        :param webhooks_on_message_update_url:
        :param webhooks_on_message_update_method:
        :param webhooks_on_message_remove_url:
        :param webhooks_on_message_remove_method:
        :param webhooks_on_channel_add_url:
        :param webhooks_on_channel_add_method:
        :param webhooks_on_channel_destroy_url:
        :param webhooks_on_channel_destroy_method:
        :param webhooks_on_channel_update_url:
        :param webhooks_on_channel_update_method:
        :param webhooks_on_member_add_url:
        :param webhooks_on_member_add_method:
        :param webhooks_on_member_remove_url:
        :param webhooks_on_member_remove_method:
        :param webhooks_on_message_sent_url:
        :param webhooks_on_message_sent_method:
        :param webhooks_on_message_updated_url:
        :param webhooks_on_message_updated_method:
        :param webhooks_on_message_removed_url:
        :param webhooks_on_message_removed_method:
        :param webhooks_on_channel_added_url:
        :param webhooks_on_channel_added_method:
        :param webhooks_on_channel_destroyed_url:
        :param webhooks_on_channel_destroyed_method:
        :param webhooks_on_channel_updated_url:
        :param webhooks_on_channel_updated_method:
        :param webhooks_on_member_added_url:
        :param webhooks_on_member_added_method:
        :param webhooks_on_member_removed_url:
        :param webhooks_on_member_removed_method:
        :param limits_channel_members:
        :param limits_user_channels:

        :returns: The updated ServiceInstance
        """

        data = values.of(
            {
                "FriendlyName": friendly_name,
                "DefaultServiceRoleSid": default_service_role_sid,
                "DefaultChannelRoleSid": default_channel_role_sid,
                "DefaultChannelCreatorRoleSid": default_channel_creator_role_sid,
                "ReadStatusEnabled": serialize.boolean_to_string(read_status_enabled),
                "ReachabilityEnabled": serialize.boolean_to_string(
                    reachability_enabled
                ),
                "TypingIndicatorTimeout": typing_indicator_timeout,
                "ConsumptionReportInterval": consumption_report_interval,
                "Notifications.NewMessage.Enabled": serialize.boolean_to_string(
                    notifications_new_message_enabled
                ),
                "Notifications.NewMessage.Template": notifications_new_message_template,
                "Notifications.AddedToChannel.Enabled": serialize.boolean_to_string(
                    notifications_added_to_channel_enabled
                ),
                "Notifications.AddedToChannel.Template": notifications_added_to_channel_template,
                "Notifications.RemovedFromChannel.Enabled": serialize.boolean_to_string(
                    notifications_removed_from_channel_enabled
                ),
                "Notifications.RemovedFromChannel.Template": notifications_removed_from_channel_template,
                "Notifications.InvitedToChannel.Enabled": serialize.boolean_to_string(
                    notifications_invited_to_channel_enabled
                ),
                "Notifications.InvitedToChannel.Template": notifications_invited_to_channel_template,
                "PreWebhookUrl": pre_webhook_url,
                "PostWebhookUrl": post_webhook_url,
                "WebhookMethod": webhook_method,
                "WebhookFilters": serialize.map(webhook_filters, lambda e: e),
                "Webhooks.OnMessageSend.Url": webhooks_on_message_send_url,
                "Webhooks.OnMessageSend.Method": webhooks_on_message_send_method,
                "Webhooks.OnMessageUpdate.Url": webhooks_on_message_update_url,
                "Webhooks.OnMessageUpdate.Method": webhooks_on_message_update_method,
                "Webhooks.OnMessageRemove.Url": webhooks_on_message_remove_url,
                "Webhooks.OnMessageRemove.Method": webhooks_on_message_remove_method,
                "Webhooks.OnChannelAdd.Url": webhooks_on_channel_add_url,
                "Webhooks.OnChannelAdd.Method": webhooks_on_channel_add_method,
                "Webhooks.OnChannelDestroy.Url": webhooks_on_channel_destroy_url,
                "Webhooks.OnChannelDestroy.Method": webhooks_on_channel_destroy_method,
                "Webhooks.OnChannelUpdate.Url": webhooks_on_channel_update_url,
                "Webhooks.OnChannelUpdate.Method": webhooks_on_channel_update_method,
                "Webhooks.OnMemberAdd.Url": webhooks_on_member_add_url,
                "Webhooks.OnMemberAdd.Method": webhooks_on_member_add_method,
                "Webhooks.OnMemberRemove.Url": webhooks_on_member_remove_url,
                "Webhooks.OnMemberRemove.Method": webhooks_on_member_remove_method,
                "Webhooks.OnMessageSent.Url": webhooks_on_message_sent_url,
                "Webhooks.OnMessageSent.Method": webhooks_on_message_sent_method,
                "Webhooks.OnMessageUpdated.Url": webhooks_on_message_updated_url,
                "Webhooks.OnMessageUpdated.Method": webhooks_on_message_updated_method,
                "Webhooks.OnMessageRemoved.Url": webhooks_on_message_removed_url,
                "Webhooks.OnMessageRemoved.Method": webhooks_on_message_removed_method,
                "Webhooks.OnChannelAdded.Url": webhooks_on_channel_added_url,
                "Webhooks.OnChannelAdded.Method": webhooks_on_channel_added_method,
                "Webhooks.OnChannelDestroyed.Url": webhooks_on_channel_destroyed_url,
                "Webhooks.OnChannelDestroyed.Method": webhooks_on_channel_destroyed_method,
                "Webhooks.OnChannelUpdated.Url": webhooks_on_channel_updated_url,
                "Webhooks.OnChannelUpdated.Method": webhooks_on_channel_updated_method,
                "Webhooks.OnMemberAdded.Url": webhooks_on_member_added_url,
                "Webhooks.OnMemberAdded.Method": webhooks_on_member_added_method,
                "Webhooks.OnMemberRemoved.Url": webhooks_on_member_removed_url,
                "Webhooks.OnMemberRemoved.Method": webhooks_on_member_removed_method,
                "Limits.ChannelMembers": limits_channel_members,
                "Limits.UserChannels": limits_user_channels,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ServiceInstance(self._version, payload, sid=self._solution["sid"])

    @property
    def channels(self) -> ChannelList:
        """
        Access the channels
        """
        if self._channels is None:
            self._channels = ChannelList(
                self._version,
                self._solution["sid"],
            )
        return self._channels

    @property
    def roles(self) -> RoleList:
        """
        Access the roles
        """
        if self._roles is None:
            self._roles = RoleList(
                self._version,
                self._solution["sid"],
            )
        return self._roles

    @property
    def users(self) -> UserList:
        """
        Access the users
        """
        if self._users is None:
            self._users = UserList(
                self._version,
                self._solution["sid"],
            )
        return self._users

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.IpMessaging.V1.ServiceContext {}>".format(context)


class ServicePage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> ServiceInstance:
        """
        Build an instance of ServiceInstance

        :param payload: Payload response from the API
        """
        return ServiceInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.IpMessaging.V1.ServicePage>"


class ServiceList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ServiceList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/Services"

    def create(self, friendly_name: str) -> ServiceInstance:
        """
        Create the ServiceInstance

        :param friendly_name:

        :returns: The created ServiceInstance
        """

        data = values.of(
            {
                "FriendlyName": friendly_name,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.create(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ServiceInstance(self._version, payload)

    async def create_async(self, friendly_name: str) -> ServiceInstance:
        """
        Asynchronously create the ServiceInstance

        :param friendly_name:

        :returns: The created ServiceInstance
        """

        data = values.of(
            {
                "FriendlyName": friendly_name,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ServiceInstance(self._version, payload)

    def stream(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[ServiceInstance]:
        """
        Streams ServiceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[ServiceInstance]:
        """
        Asynchronously streams ServiceInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(page_size=limits["page_size"])

        return self._version.stream_async(page, limits["limit"])

    def list(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ServiceInstance]:
        """
        Lists ServiceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(
            self.stream(
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ServiceInstance]:
        """
        Asynchronously lists ServiceInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [
            record
            async for record in await self.stream_async(
                limit=limit,
                page_size=page_size,
            )
        ]

    def page(
        self,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ServicePage:
        """
        Retrieve a single page of ServiceInstance records from the API.
        Request is executed immediately

        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ServiceInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = self._version.page(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return ServicePage(self._version, response)

    async def page_async(
        self,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ServicePage:
        """
        Asynchronously retrieve a single page of ServiceInstance records from the API.
        Request is executed immediately

        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ServiceInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return ServicePage(self._version, response)

    def get_page(self, target_url: str) -> ServicePage:
        """
        Retrieve a specific page of ServiceInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ServiceInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return ServicePage(self._version, response)

    async def get_page_async(self, target_url: str) -> ServicePage:
        """
        Asynchronously retrieve a specific page of ServiceInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ServiceInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return ServicePage(self._version, response)

    def get(self, sid: str) -> ServiceContext:
        """
        Constructs a ServiceContext

        :param sid:
        """
        return ServiceContext(self._version, sid=sid)

    def __call__(self, sid: str) -> ServiceContext:
        """
        Constructs a ServiceContext

        :param sid:
        """
        return ServiceContext(self._version, sid=sid)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.IpMessaging.V1.ServiceList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.IpMessaging.V1.ServiceInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
