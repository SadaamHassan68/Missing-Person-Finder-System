<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Events
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional
from twilio.base import values

from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class SinkTestInstance(InstanceResource):
    """
    :ivar result: Feedback indicating whether the test event was generated.
    """

    def __init__(self, version: Version, payload: Dict[str, Any], sid: str):
        super().__init__(version)

        self.result: Optional[str] = payload.get("result")

        self._solution = {
            "sid": sid,
        }

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Events.V1.SinkTestInstance {}>".format(context)


class SinkTestList(ListResource):

    def __init__(self, version: Version, sid: str):
        """
        Initialize the SinkTestList

        :param version: Version that contains the resource
        :param sid: A 34 character string that uniquely identifies the Sink to be Tested.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Sinks/{sid}/Test".format(**self._solution)

    def create(self) -> SinkTestInstance:
        """
        Create the SinkTestInstance


        :returns: The created SinkTestInstance
        """

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        payload = self._version.create(method="POST", uri=self._uri, headers=headers)

        return SinkTestInstance(self._version, payload, sid=self._solution["sid"])

    async def create_async(self) -> SinkTestInstance:
        """
        Asynchronously create the SinkTestInstance


        :returns: The created SinkTestInstance
        """

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, headers=headers
        )

        return SinkTestInstance(self._version, payload, sid=self._solution["sid"])

    def __repr__(self) -> str:
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import values
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class SinkTestList(ListResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, sid):
        """
        Initialize the SinkTestList

        :param Version version: Version that contains the resource
        :param sid: A string that uniquely identifies this Sink.

        :returns: twilio.rest.events.v1.sink.sink_test.SinkTestList
        :rtype: twilio.rest.events.v1.sink.sink_test.SinkTestList
        """
        super(SinkTestList, self).__init__(version)

        # Path Solution
        self._solution = {'sid': sid, }
        self._uri = '/Sinks/{sid}/Test'.format(**self._solution)

    def create(self):
        """
        Create the SinkTestInstance

        :returns: The created SinkTestInstance
        :rtype: twilio.rest.events.v1.sink.sink_test.SinkTestInstance
        """
        payload = self._version.create(method='POST', uri=self._uri, )

        return SinkTestInstance(self._version, payload, sid=self._solution['sid'], )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Events.V1.SinkTestList>"
=======
        :rtype: str
        """
        return '<Twilio.Events.V1.SinkTestList>'


class SinkTestPage(Page):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, response, solution):
        """
        Initialize the SinkTestPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param sid: A string that uniquely identifies this Sink.

        :returns: twilio.rest.events.v1.sink.sink_test.SinkTestPage
        :rtype: twilio.rest.events.v1.sink.sink_test.SinkTestPage
        """
        super(SinkTestPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of SinkTestInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.events.v1.sink.sink_test.SinkTestInstance
        :rtype: twilio.rest.events.v1.sink.sink_test.SinkTestInstance
        """
        return SinkTestInstance(self._version, payload, sid=self._solution['sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Events.V1.SinkTestPage>'


class SinkTestInstance(InstanceResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, payload, sid):
        """
        Initialize the SinkTestInstance

        :returns: twilio.rest.events.v1.sink.sink_test.SinkTestInstance
        :rtype: twilio.rest.events.v1.sink.sink_test.SinkTestInstance
        """
        super(SinkTestInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {'result': payload.get('result'), }

        # Context
        self._context = None
        self._solution = {'sid': sid, }

    @property
    def result(self):
        """
        :returns: Feedback indicating whether the test event was generated.
        :rtype: unicode
        """
        return self._properties['result']

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Events.V1.SinkTestInstance>'
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
