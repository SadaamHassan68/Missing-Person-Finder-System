<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Bulkexports
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
<<<<<<< HEAD
from twilio.base.version import Version

=======
from twilio.base.page import Page
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.rest.bulkexports.v1.export.day import DayList
from twilio.rest.bulkexports.v1.export.export_custom_job import ExportCustomJobList
from twilio.rest.bulkexports.v1.export.job import JobList


<<<<<<< HEAD
class ExportInstance(InstanceResource):
    """
    :ivar resource_type: The type of communication – Messages, Calls, Conferences, and Participants
    :ivar url: The URL of this resource.
    :ivar links: Contains a dictionary of URL links to nested resources of this Export.
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        resource_type: Optional[str] = None,
    ):
        super().__init__(version)

        self.resource_type: Optional[str] = payload.get("resource_type")
        self.url: Optional[str] = payload.get("url")
        self.links: Optional[Dict[str, object]] = payload.get("links")

        self._solution = {
            "resource_type": resource_type or self.resource_type,
        }
        self._context: Optional[ExportContext] = None

    @property
    def _proxy(self) -> "ExportContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: ExportContext for this ExportInstance
        """
        if self._context is None:
            self._context = ExportContext(
                self._version,
                resource_type=self._solution["resource_type"],
            )
        return self._context

    def fetch(self) -> "ExportInstance":
        """
        Fetch the ExportInstance


        :returns: The fetched ExportInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "ExportInstance":
        """
        Asynchronous coroutine to fetch the ExportInstance


        :returns: The fetched ExportInstance
        """
        return await self._proxy.fetch_async()

    @property
    def days(self) -> DayList:
        """
        Access the days
        """
        return self._proxy.days

    @property
    def export_custom_jobs(self) -> ExportCustomJobList:
        """
        Access the export_custom_jobs
        """
        return self._proxy.export_custom_jobs

    def __repr__(self) -> str:
=======
class ExportList(ListResource):

    def __init__(self, version):
        """
        Initialize the ExportList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.bulkexports.v1.export.ExportList
        :rtype: twilio.rest.bulkexports.v1.export.ExportList
        """
        super(ExportList, self).__init__(version)

        # Path Solution
        self._solution = {}

        # Components
        self._jobs = None

    @property
    def jobs(self):
        """
        Access the jobs

        :returns: twilio.rest.bulkexports.v1.export.job.JobList
        :rtype: twilio.rest.bulkexports.v1.export.job.JobList
        """
        if self._jobs is None:
            self._jobs = JobList(self._version, )
        return self._jobs

    def get(self, resource_type):
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        return ExportContext(self._version, resource_type=resource_type, )

    def __call__(self, resource_type):
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        return ExportContext(self._version, resource_type=resource_type, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.ExportInstance {}>".format(context)
=======
        :rtype: str
        """
        return '<Twilio.Bulkexports.V1.ExportList>'


class ExportPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ExportPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.bulkexports.v1.export.ExportPage
        :rtype: twilio.rest.bulkexports.v1.export.ExportPage
        """
        super(ExportPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ExportInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.bulkexports.v1.export.ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        return ExportInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Bulkexports.V1.ExportPage>'
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class ExportContext(InstanceContext):

<<<<<<< HEAD
    def __init__(self, version: Version, resource_type: str):
        """
        Initialize the ExportContext

        :param version: Version that contains the resource
        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "resource_type": resource_type,
        }
        self._uri = "/Exports/{resource_type}".format(**self._solution)

        self._days: Optional[DayList] = None
        self._export_custom_jobs: Optional[ExportCustomJobList] = None

    def fetch(self) -> ExportInstance:
        """
        Fetch the ExportInstance


        :returns: The fetched ExportInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return ExportInstance(
            self._version,
            payload,
            resource_type=self._solution["resource_type"],
        )

    async def fetch_async(self) -> ExportInstance:
        """
        Asynchronous coroutine to fetch the ExportInstance


        :returns: The fetched ExportInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return ExportInstance(
            self._version,
            payload,
            resource_type=self._solution["resource_type"],
        )

    @property
    def days(self) -> DayList:
        """
        Access the days
        """
        if self._days is None:
            self._days = DayList(
                self._version,
                self._solution["resource_type"],
            )
        return self._days

    @property
    def export_custom_jobs(self) -> ExportCustomJobList:
        """
        Access the export_custom_jobs
=======
    def __init__(self, version, resource_type):
        """
        Initialize the ExportContext

        :param Version version: Version that contains the resource
        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants

        :returns: twilio.rest.bulkexports.v1.export.ExportContext
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        super(ExportContext, self).__init__(version)

        # Path Solution
        self._solution = {'resource_type': resource_type, }
        self._uri = '/Exports/{resource_type}'.format(**self._solution)

        # Dependents
        self._days = None
        self._export_custom_jobs = None

    def fetch(self):
        """
        Fetch the ExportInstance

        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ExportInstance(self._version, payload, resource_type=self._solution['resource_type'], )

    @property
    def days(self):
        """
        Access the days

        :returns: twilio.rest.bulkexports.v1.export.day.DayList
        :rtype: twilio.rest.bulkexports.v1.export.day.DayList
        """
        if self._days is None:
            self._days = DayList(self._version, resource_type=self._solution['resource_type'], )
        return self._days

    @property
    def export_custom_jobs(self):
        """
        Access the export_custom_jobs

        :returns: twilio.rest.bulkexports.v1.export.export_custom_job.ExportCustomJobList
        :rtype: twilio.rest.bulkexports.v1.export.export_custom_job.ExportCustomJobList
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        if self._export_custom_jobs is None:
            self._export_custom_jobs = ExportCustomJobList(
                self._version,
<<<<<<< HEAD
                self._solution["resource_type"],
            )
        return self._export_custom_jobs

    def __repr__(self) -> str:
=======
                resource_type=self._solution['resource_type'],
            )
        return self._export_custom_jobs

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.ExportContext {}>".format(context)


class ExportList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ExportList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/Exports"

        self._jobs: Optional[JobList] = None

    @property
    def jobs(self) -> JobList:
        """
        Access the jobs
        """
        if self._jobs is None:
            self._jobs = JobList(self._version)
        return self._jobs

    def get(self, resource_type: str) -> ExportContext:
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants
        """
        return ExportContext(self._version, resource_type=resource_type)

    def __call__(self, resource_type: str) -> ExportContext:
        """
        Constructs a ExportContext

        :param resource_type: The type of communication – Messages, Calls, Conferences, and Participants
        """
        return ExportContext(self._version, resource_type=resource_type)

    def __repr__(self) -> str:
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Bulkexports.V1.ExportContext {}>'.format(context)


class ExportInstance(InstanceResource):

    def __init__(self, version, payload, resource_type=None):
        """
        Initialize the ExportInstance

        :returns: twilio.rest.bulkexports.v1.export.ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        super(ExportInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'resource_type': payload.get('resource_type'),
            'url': payload.get('url'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {'resource_type': resource_type or self._properties['resource_type'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: ExportContext for this ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportContext
        """
        if self._context is None:
            self._context = ExportContext(self._version, resource_type=self._solution['resource_type'], )
        return self._context

    @property
    def resource_type(self):
        """
        :returns: The type of communication – Messages, Calls, Conferences, and Participants
        :rtype: unicode
        """
        return self._properties['resource_type']

    @property
    def url(self):
        """
        :returns: The URL of this resource.
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: Nested resource URLs.
        :rtype: unicode
        """
        return self._properties['links']

    def fetch(self):
        """
        Fetch the ExportInstance

        :returns: The fetched ExportInstance
        :rtype: twilio.rest.bulkexports.v1.export.ExportInstance
        """
        return self._proxy.fetch()

    @property
    def days(self):
        """
        Access the days

        :returns: twilio.rest.bulkexports.v1.export.day.DayList
        :rtype: twilio.rest.bulkexports.v1.export.day.DayList
        """
        return self._proxy.days

    @property
    def export_custom_jobs(self):
        """
        Access the export_custom_jobs

        :returns: twilio.rest.bulkexports.v1.export.export_custom_job.ExportCustomJobList
        :rtype: twilio.rest.bulkexports.v1.export.export_custom_job.ExportCustomJobList
        """
        return self._proxy.export_custom_jobs

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Bulkexports.V1.ExportList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Bulkexports.V1.ExportInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
