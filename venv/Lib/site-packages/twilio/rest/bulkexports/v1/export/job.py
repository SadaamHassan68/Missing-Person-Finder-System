<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Bulkexports
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
<<<<<<< HEAD
from twilio.base.version import Version


class JobInstance(InstanceResource):
    """
    :ivar resource_type: The type of communication â€“ Messages, Calls, Conferences, and Participants
    :ivar friendly_name: The friendly name specified when creating the job
    :ivar details: The details of a job which is an object that contains an array of status grouped by `status` state.  Each `status` object has a `status` string, a count which is the number of days in that `status`, and list of days in that `status`. The day strings are in the format yyyy-MM-dd. As an example, a currently running job may have a status object for COMPLETED and a `status` object for SUBMITTED each with its own count and list of days.
    :ivar start_day: The start time for the export specified when creating the job
    :ivar end_day: The end time for the export specified when creating the job
    :ivar job_sid: The job_sid returned when the export was created
    :ivar webhook_url: The optional webhook url called on completion
    :ivar webhook_method: This is the method used to call the webhook
    :ivar email: The optional email to send the completion notification to
    :ivar url:
    :ivar job_queue_position: This is the job position from the 1st in line. Your queue position will never increase. As jobs ahead of yours in the queue are processed, the queue position number will decrease
    :ivar estimated_completion_time: this is the time estimated until your job is complete. This is calculated each time you request the job list. The time is calculated based on the current rate of job completion (which may vary) and your job queue position
    """

    def __init__(
        self, version: Version, payload: Dict[str, Any], job_sid: Optional[str] = None
    ):
        super().__init__(version)

        self.resource_type: Optional[str] = payload.get("resource_type")
        self.friendly_name: Optional[str] = payload.get("friendly_name")
        self.details: Optional[Dict[str, object]] = payload.get("details")
        self.start_day: Optional[str] = payload.get("start_day")
        self.end_day: Optional[str] = payload.get("end_day")
        self.job_sid: Optional[str] = payload.get("job_sid")
        self.webhook_url: Optional[str] = payload.get("webhook_url")
        self.webhook_method: Optional[str] = payload.get("webhook_method")
        self.email: Optional[str] = payload.get("email")
        self.url: Optional[str] = payload.get("url")
        self.job_queue_position: Optional[str] = payload.get("job_queue_position")
        self.estimated_completion_time: Optional[str] = payload.get(
            "estimated_completion_time"
        )

        self._solution = {
            "job_sid": job_sid or self.job_sid,
        }
        self._context: Optional[JobContext] = None

    @property
    def _proxy(self) -> "JobContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: JobContext for this JobInstance
        """
        if self._context is None:
            self._context = JobContext(
                self._version,
                job_sid=self._solution["job_sid"],
            )
        return self._context

    def delete(self) -> bool:
        """
        Deletes the JobInstance


        :returns: True if delete succeeds, False otherwise
        """
        return self._proxy.delete()

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the JobInstance


        :returns: True if delete succeeds, False otherwise
        """
        return await self._proxy.delete_async()

    def fetch(self) -> "JobInstance":
        """
        Fetch the JobInstance


        :returns: The fetched JobInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "JobInstance":
        """
        Asynchronous coroutine to fetch the JobInstance


        :returns: The fetched JobInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.JobInstance {}>".format(context)


class JobContext(InstanceContext):

    def __init__(self, version: Version, job_sid: str):
        """
        Initialize the JobContext

        :param version: Version that contains the resource
        :param job_sid: The unique string that that we created to identify the Bulk Export job
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "job_sid": job_sid,
        }
        self._uri = "/Exports/Jobs/{job_sid}".format(**self._solution)

    def delete(self) -> bool:
        """
        Deletes the JobInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return self._version.delete(method="DELETE", uri=self._uri, headers=headers)

    async def delete_async(self) -> bool:
        """
        Asynchronous coroutine that deletes the JobInstance


        :returns: True if delete succeeds, False otherwise
        """

        headers = values.of({})

        return await self._version.delete_async(
            method="DELETE", uri=self._uri, headers=headers
        )

    def fetch(self) -> JobInstance:
        """
        Fetch the JobInstance


        :returns: The fetched JobInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return JobInstance(
            self._version,
            payload,
            job_sid=self._solution["job_sid"],
        )

    async def fetch_async(self) -> JobInstance:
        """
        Asynchronous coroutine to fetch the JobInstance


        :returns: The fetched JobInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return JobInstance(
            self._version,
            payload,
            job_sid=self._solution["job_sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Bulkexports.V1.JobContext {}>".format(context)
=======
from twilio.base.page import Page
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class JobList(ListResource):

<<<<<<< HEAD
    def __init__(self, version: Version):
        """
        Initialize the JobList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, job_sid: str) -> JobContext:
=======
    def __init__(self, version):
        """
        Initialize the JobList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.bulkexports.v1.export.job.JobList
        :rtype: twilio.rest.bulkexports.v1.export.job.JobList
        """
        super(JobList, self).__init__(version)

        # Path Solution
        self._solution = {}

    def get(self, job_sid):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Constructs a JobContext

        :param job_sid: The unique string that that we created to identify the Bulk Export job
<<<<<<< HEAD
        """
        return JobContext(self._version, job_sid=job_sid)

    def __call__(self, job_sid: str) -> JobContext:
=======

        :returns: twilio.rest.bulkexports.v1.export.job.JobContext
        :rtype: twilio.rest.bulkexports.v1.export.job.JobContext
        """
        return JobContext(self._version, job_sid=job_sid, )

    def __call__(self, job_sid):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Constructs a JobContext

        :param job_sid: The unique string that that we created to identify the Bulk Export job
<<<<<<< HEAD
        """
        return JobContext(self._version, job_sid=job_sid)

    def __repr__(self) -> str:
=======

        :returns: twilio.rest.bulkexports.v1.export.job.JobContext
        :rtype: twilio.rest.bulkexports.v1.export.job.JobContext
        """
        return JobContext(self._version, job_sid=job_sid, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Bulkexports.V1.JobList>"
=======
        :rtype: str
        """
        return '<Twilio.Bulkexports.V1.JobList>'


class JobPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the JobPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.bulkexports.v1.export.job.JobPage
        :rtype: twilio.rest.bulkexports.v1.export.job.JobPage
        """
        super(JobPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of JobInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.bulkexports.v1.export.job.JobInstance
        :rtype: twilio.rest.bulkexports.v1.export.job.JobInstance
        """
        return JobInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Bulkexports.V1.JobPage>'


class JobContext(InstanceContext):

    def __init__(self, version, job_sid):
        """
        Initialize the JobContext

        :param Version version: Version that contains the resource
        :param job_sid: The unique string that that we created to identify the Bulk Export job

        :returns: twilio.rest.bulkexports.v1.export.job.JobContext
        :rtype: twilio.rest.bulkexports.v1.export.job.JobContext
        """
        super(JobContext, self).__init__(version)

        # Path Solution
        self._solution = {'job_sid': job_sid, }
        self._uri = '/Exports/Jobs/{job_sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch the JobInstance

        :returns: The fetched JobInstance
        :rtype: twilio.rest.bulkexports.v1.export.job.JobInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return JobInstance(self._version, payload, job_sid=self._solution['job_sid'], )

    def delete(self):
        """
        Deletes the JobInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._version.delete(method='DELETE', uri=self._uri, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Bulkexports.V1.JobContext {}>'.format(context)


class JobInstance(InstanceResource):

    class Status(object):
        ERRORDURINGRUN = "ErrorDuringRun"
        SUBMITTED = "Submitted"
        RUNNING = "Running"
        COMPLETEDEMPTYRECORDS = "CompletedEmptyRecords"
        COMPLETED = "Completed"
        FAILED = "Failed"
        RUNNINGTOBEDELETED = "RunningToBeDeleted"
        DELETEDBYUSERREQUEST = "DeletedByUserRequest"

    def __init__(self, version, payload, job_sid=None):
        """
        Initialize the JobInstance

        :returns: twilio.rest.bulkexports.v1.export.job.JobInstance
        :rtype: twilio.rest.bulkexports.v1.export.job.JobInstance
        """
        super(JobInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'resource_type': payload.get('resource_type'),
            'friendly_name': payload.get('friendly_name'),
            'details': payload.get('details'),
            'start_day': payload.get('start_day'),
            'end_day': payload.get('end_day'),
            'job_sid': payload.get('job_sid'),
            'webhook_url': payload.get('webhook_url'),
            'webhook_method': payload.get('webhook_method'),
            'email': payload.get('email'),
            'url': payload.get('url'),
            'job_queue_position': payload.get('job_queue_position'),
            'estimated_completion_time': payload.get('estimated_completion_time'),
        }

        # Context
        self._context = None
        self._solution = {'job_sid': job_sid or self._properties['job_sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: JobContext for this JobInstance
        :rtype: twilio.rest.bulkexports.v1.export.job.JobContext
        """
        if self._context is None:
            self._context = JobContext(self._version, job_sid=self._solution['job_sid'], )
        return self._context

    @property
    def resource_type(self):
        """
        :returns: The type of communication â€“ Messages, Calls, Conferences, and Participants
        :rtype: unicode
        """
        return self._properties['resource_type']

    @property
    def friendly_name(self):
        """
        :returns: The friendly name specified when creating the job
        :rtype: unicode
        """
        return self._properties['friendly_name']

    @property
    def details(self):
        """
        :returns: The details of a job state which is an object that contains a `status` string, a day count integer, and list of days in the job
        :rtype: dict
        """
        return self._properties['details']

    @property
    def start_day(self):
        """
        :returns: The start time for the export specified when creating the job
        :rtype: unicode
        """
        return self._properties['start_day']

    @property
    def end_day(self):
        """
        :returns: The end time for the export specified when creating the job
        :rtype: unicode
        """
        return self._properties['end_day']

    @property
    def job_sid(self):
        """
        :returns: The job_sid returned when the export was created
        :rtype: unicode
        """
        return self._properties['job_sid']

    @property
    def webhook_url(self):
        """
        :returns: The optional webhook url called on completion
        :rtype: unicode
        """
        return self._properties['webhook_url']

    @property
    def webhook_method(self):
        """
        :returns: This is the method used to call the webhook
        :rtype: unicode
        """
        return self._properties['webhook_method']

    @property
    def email(self):
        """
        :returns: The optional email to send the completion notification to
        :rtype: unicode
        """
        return self._properties['email']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def job_queue_position(self):
        """
        :returns: This is the job position from the 1st in line. Your queue position will never increase. As jobs ahead of yours in the queue are processed, the queue position number will decrease
        :rtype: unicode
        """
        return self._properties['job_queue_position']

    @property
    def estimated_completion_time(self):
        """
        :returns: this is the time estimated until your job is complete. This is calculated each time you request the job list. The time is calculated based on the current rate of job completion (which may vary) and your job queue position
        :rtype: unicode
        """
        return self._properties['estimated_completion_time']

    def fetch(self):
        """
        Fetch the JobInstance

        :returns: The fetched JobInstance
        :rtype: twilio.rest.bulkexports.v1.export.job.JobInstance
        """
        return self._proxy.fetch()

    def delete(self):
        """
        Deletes the JobInstance

        :returns: True if delete succeeds, False otherwise
        :rtype: bool
        """
        return self._proxy.delete()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Bulkexports.V1.JobInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
