<<<<<<< HEAD
r"""
  This code was generated by
  ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
   |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
   |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

  NOTE: This class is auto generated by OpenAPI Generator.
  https://openapi-generator.tech
  Do not edit the class manually.
"""

from typing import TYPE_CHECKING, Optional

from twilio.base.client_base import ClientBase

if TYPE_CHECKING:
    from twilio.rest.accounts import Accounts
    from twilio.rest.api import Api
    from twilio.rest.assistants import Assistants
    from twilio.rest.bulkexports import Bulkexports
    from twilio.rest.chat import Chat
    from twilio.rest.content import Content
    from twilio.rest.conversations import Conversations
    from twilio.rest.events import Events
    from twilio.rest.flex_api import FlexApi
    from twilio.rest.frontline_api import FrontlineApi
    from twilio.rest.preview_iam import PreviewIam
    from twilio.rest.iam import Iam
    from twilio.rest.insights import Insights
    from twilio.rest.intelligence import Intelligence
    from twilio.rest.ip_messaging import IpMessaging
    from twilio.rest.knowledge import Knowledge
    from twilio.rest.lookups import Lookups
    from twilio.rest.marketplace import Marketplace
    from twilio.rest.messaging import Messaging
    from twilio.rest.microvisor import Microvisor
    from twilio.rest.monitor import Monitor
    from twilio.rest.notify import Notify
    from twilio.rest.numbers import Numbers
    from twilio.rest.oauth import Oauth
    from twilio.rest.preview import Preview
    from twilio.rest.pricing import Pricing
    from twilio.rest.proxy import Proxy
    from twilio.rest.routes import Routes
    from twilio.rest.serverless import Serverless
    from twilio.rest.studio import Studio
    from twilio.rest.supersim import Supersim
    from twilio.rest.sync import Sync
    from twilio.rest.taskrouter import Taskrouter
    from twilio.rest.trunking import Trunking
    from twilio.rest.trusthub import Trusthub
    from twilio.rest.verify import Verify
    from twilio.rest.video import Video
    from twilio.rest.voice import Voice
    from twilio.rest.wireless import Wireless
    from twilio.rest.api.v2010.account.address import AddressList
    from twilio.rest.api.v2010.account.application import ApplicationList
    from twilio.rest.api.v2010.account.authorized_connect_app import (
        AuthorizedConnectAppList,
    )
    from twilio.rest.api.v2010.account.available_phone_number_country import (
        AvailablePhoneNumberCountryList,
    )
    from twilio.rest.api.v2010.account.balance import BalanceList
    from twilio.rest.api.v2010.account.call import CallList
    from twilio.rest.api.v2010.account.conference import ConferenceList
    from twilio.rest.api.v2010.account.connect_app import ConnectAppList
    from twilio.rest.api.v2010.account.incoming_phone_number import (
        IncomingPhoneNumberList,
    )
    from twilio.rest.api.v2010.account.key import KeyList
    from twilio.rest.api.v2010.account.new_key import NewKeyList
    from twilio.rest.api.v2010.account.message import MessageList
    from twilio.rest.api.v2010.account.signing_key import SigningKeyList
    from twilio.rest.api.v2010.account.new_signing_key import NewSigningKeyList
    from twilio.rest.api.v2010.account.notification import NotificationList
    from twilio.rest.api.v2010.account.outgoing_caller_id import OutgoingCallerIdList
    from twilio.rest.api.v2010.account.validation_request import ValidationRequestList
    from twilio.rest.api.v2010.account.queue import QueueList
    from twilio.rest.api.v2010.account.recording import RecordingList
    from twilio.rest.api.v2010.account.short_code import ShortCodeList
    from twilio.rest.api.v2010.account.sip import SipList
    from twilio.rest.api.v2010.account.token import TokenList
    from twilio.rest.api.v2010.account.transcription import TranscriptionList
    from twilio.rest.api.v2010.account.usage import UsageList


class Client(ClientBase):
    """A client for accessing the Twilio API."""

    def __init__(
        self,
        username=None,
        password=None,
        account_sid=None,
        region=None,
        http_client=None,
        environment=None,
        edge=None,
        user_agent_extensions=None,
        credential_provider=None,
    ):
        """
        Initializes the Twilio Client

        :param str username: Username to authenticate with, either account_sid or api_key
        :param str password: Password to authenticate with, auth_token (if using account_sid) or api_secret (if using api_key)
        :param str account_sid: Account SID, required if using api_key to authenticate.
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

import os
import platform
from twilio import __version__
from twilio.base.exceptions import TwilioException
from twilio.base.obsolete import obsolete_client
from twilio.http.http_client import TwilioHttpClient
from urllib.parse import (
    urlparse,
    urlunparse,
)


class Client(object):
    """ A client for accessing the Twilio API. """

    def __init__(self, username=None, password=None, account_sid=None, region=None,
                 http_client=None, environment=None, edge=None,
                 user_agent_extensions=None):
        """
        Initializes the Twilio Client

        :param str username: Username to authenticate with
        :param str password: Password to authenticate with
        :param str account_sid: Account SID, defaults to Username
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        :param str region: Twilio Region to make requests to, defaults to 'us1' if an edge is provided
        :param HttpClient http_client: HttpClient, defaults to TwilioHttpClient
        :param dict environment: Environment to look for auth details, defaults to os.environ
        :param str edge: Twilio Edge to make requests to, defaults to None
        :param list[str] user_agent_extensions: Additions to the user agent string

        :returns: Twilio Client
        :rtype: twilio.rest.Client
        """
<<<<<<< HEAD
        super().__init__(
            username,
            password,
            account_sid,
            region,
            http_client,
            environment,
            edge,
            user_agent_extensions,
            credential_provider,
        )

        # Domains
        self._accounts: Optional["Accounts"] = None
        self._api: Optional["Api"] = None
        self._assistants: Optional["Assistants"] = None
        self._bulkexports: Optional["Bulkexports"] = None
        self._chat: Optional["Chat"] = None
        self._content: Optional["Content"] = None
        self._conversations: Optional["Conversations"] = None
        self._events: Optional["Events"] = None
        self._flex_api: Optional["FlexApi"] = None
        self._frontline_api: Optional["FrontlineApi"] = None
        self._preview_iam: Optional["PreviewIam"] = None
        self._iam: Optional["Iam"] = None
        self._insights: Optional["Insights"] = None
        self._intelligence: Optional["Intelligence"] = None
        self._ip_messaging: Optional["IpMessaging"] = None
        self._knowledge: Optional["Knowledge"] = None
        self._lookups: Optional["Lookups"] = None
        self._marketplace: Optional["Marketplace"] = None
        self._messaging: Optional["Messaging"] = None
        self._microvisor: Optional["Microvisor"] = None
        self._monitor: Optional["Monitor"] = None
        self._notify: Optional["Notify"] = None
        self._numbers: Optional["Numbers"] = None
        self._oauth: Optional["Oauth"] = None
        self._preview: Optional["Preview"] = None
        self._pricing: Optional["Pricing"] = None
        self._proxy: Optional["Proxy"] = None
        self._routes: Optional["Routes"] = None
        self._serverless: Optional["Serverless"] = None
        self._studio: Optional["Studio"] = None
        self._supersim: Optional["Supersim"] = None
        self._sync: Optional["Sync"] = None
        self._taskrouter: Optional["Taskrouter"] = None
        self._trunking: Optional["Trunking"] = None
        self._trusthub: Optional["Trusthub"] = None
        self._verify: Optional["Verify"] = None
        self._video: Optional["Video"] = None
        self._voice: Optional["Voice"] = None
        self._wireless: Optional["Wireless"] = None

    @property
    def accounts(self) -> "Accounts":
=======
        environment = environment or os.environ

        self.username = username or environment.get('TWILIO_ACCOUNT_SID')
        """ :type : str """
        self.password = password or environment.get('TWILIO_AUTH_TOKEN')
        """ :type : str """
        self.account_sid = account_sid or self.username
        """ :type : str """
        self.edge = edge or environment.get('TWILIO_EDGE')
        """ :type : str """
        self.region = region or environment.get('TWILIO_REGION')
        """ :type : str """
        self.user_agent_extensions = user_agent_extensions or []
        """ :type : list[str] """

        if not self.username or not self.password:
            raise TwilioException("Credentials are required to create a TwilioClient")

        self.auth = (self.username, self.password)
        """ :type : tuple(str, str) """
        self.http_client = http_client or TwilioHttpClient()
        """ :type : HttpClient """

        # Domains
        self._accounts = None
        self._api = None
        self._autopilot = None
        self._chat = None
        self._content = None
        self._conversations = None
        self._events = None
        self._flex_api = None
        self._frontline_api = None
        self._insights = None
        self._ip_messaging = None
        self._lookups = None
        self._media = None
        self._messaging = None
        self._monitor = None
        self._notify = None
        self._numbers = None
        self._oauth = None
        self._preview = None
        self._pricing = None
        self._proxy = None
        self._routes = None
        self._serverless = None
        self._studio = None
        self._sync = None
        self._taskrouter = None
        self._trunking = None
        self._trusthub = None
        self._verify = None
        self._video = None
        self._voice = None
        self._wireless = None
        self._supersim = None
        self._bulkexports = None
        self._microvisor = None

    def request(self, method, uri, params=None, data=None, headers=None, auth=None,
                timeout=None, allow_redirects=False):
        """
        Makes a request to the Twilio API using the configured http client
        Authentication information is automatically added if none is provided

        :param str method: HTTP Method
        :param str uri: Fully qualified url
        :param dict[str, str] params: Query string parameters
        :param dict[str, str] data: POST body data
        :param dict[str, str] headers: HTTP Headers
        :param tuple(str, str) auth: Authentication
        :param int timeout: Timeout in seconds
        :param bool allow_redirects: Should the client follow redirects

        :returns: Response from the Twilio API
        :rtype: twilio.http.response.Response
        """
        auth = auth or self.auth
        headers = headers or {}

        pkg_version = __version__
        os_name = platform.system()
        os_arch = platform.machine()
        python_version = platform.python_version()
        headers['User-Agent'] = 'twilio-python/{} ({} {}) Python/{}'.format(
            pkg_version,
            os_name,
            os_arch,
            python_version,
        )
        for extension in self.user_agent_extensions:
            headers['User-Agent'] += ' {}'.format(extension)
        headers['X-Twilio-Client'] = 'python-{}'.format(__version__)
        headers['Accept-Charset'] = 'utf-8'

        if method == 'POST' and 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/x-www-form-urlencoded'

        if 'Accept' not in headers:
            headers['Accept'] = 'application/json'

        uri = self.get_hostname(uri)

        return self.http_client.request(
            method,
            uri,
            params=params,
            data=data,
            headers=headers,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects
        )

    def get_hostname(self, uri):
        """
        Determines the proper hostname given edge and region preferences
        via client configuration or uri.

        :param str uri: Fully qualified url

        :returns: The final uri used to make the request
        :rtype: str
        """
        if not self.edge and not self.region:
            return uri

        parsed_url = urlparse(uri)
        pieces = parsed_url.netloc.split('.')
        prefix = pieces[0]
        suffix = '.'.join(pieces[-2:])
        region = None
        edge = None
        if len(pieces) == 4:
            # product.region.twilio.com
            region = pieces[1]
        elif len(pieces) == 5:
            # product.edge.region.twilio.com
            edge = pieces[1]
            region = pieces[2]

        edge = self.edge or edge
        region = self.region or region or (edge and 'us1')

        parsed_url = parsed_url._replace(
            netloc='.'.join([part for part in [prefix, edge, region, suffix] if part])
        )
        return urlunparse(parsed_url)

    @property
    def accounts(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Accounts Twilio Domain

        :returns: Accounts Twilio Domain
<<<<<<< HEAD
        """
        if self._accounts is None:
            from twilio.rest.accounts import Accounts

=======
        :rtype: twilio.rest.accounts.Accounts
        """
        if self._accounts is None:
            from twilio.rest.accounts import Accounts
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._accounts = Accounts(self)
        return self._accounts

    @property
<<<<<<< HEAD
    def api(self) -> "Api":
=======
    def api(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Api Twilio Domain

        :returns: Api Twilio Domain
<<<<<<< HEAD
        """
        if self._api is None:
            from twilio.rest.api import Api

=======
        :rtype: twilio.rest.api.Api
        """
        if self._api is None:
            from twilio.rest.api import Api
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._api = Api(self)
        return self._api

    @property
<<<<<<< HEAD
    def assistants(self) -> "Assistants":
        """
        Access the Assistants Twilio Domain

        :returns: Assistants Twilio Domain
        """
        if self._assistants is None:
            from twilio.rest.assistants import Assistants

            self._assistants = Assistants(self)
        return self._assistants

    @property
    def bulkexports(self) -> "Bulkexports":
        """
        Access the Bulkexports Twilio Domain

        :returns: Bulkexports Twilio Domain
        """
        if self._bulkexports is None:
            from twilio.rest.bulkexports import Bulkexports

            self._bulkexports = Bulkexports(self)
        return self._bulkexports

    @property
    def chat(self) -> "Chat":
=======
    def autopilot(self):
        """
        Access the Autopilot Twilio Domain

        :returns: Autopilot Twilio Domain
        :rtype: twilio.rest.autopilot.Autopilot
        """
        if self._autopilot is None:
            from twilio.rest.autopilot import Autopilot
            self._autopilot = Autopilot(self)
        return self._autopilot

    @property
    def chat(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Chat Twilio Domain

        :returns: Chat Twilio Domain
<<<<<<< HEAD
        """
        if self._chat is None:
            from twilio.rest.chat import Chat

=======
        :rtype: twilio.rest.chat.Chat
        """
        if self._chat is None:
            from twilio.rest.chat import Chat
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._chat = Chat(self)
        return self._chat

    @property
<<<<<<< HEAD
    def content(self) -> "Content":
=======
    def content(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Content Twilio Domain

        :returns: Content Twilio Domain
<<<<<<< HEAD
        """
        if self._content is None:
            from twilio.rest.content import Content

=======
        :rtype: twilio.rest.content.Content
        """
        if self._content is None:
            from twilio.rest.content import Content
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._content = Content(self)
        return self._content

    @property
<<<<<<< HEAD
    def conversations(self) -> "Conversations":
=======
    def conversations(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Conversations Twilio Domain

        :returns: Conversations Twilio Domain
<<<<<<< HEAD
        """
        if self._conversations is None:
            from twilio.rest.conversations import Conversations

=======
        :rtype: twilio.rest.conversations.Conversations
        """
        if self._conversations is None:
            from twilio.rest.conversations import Conversations
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._conversations = Conversations(self)
        return self._conversations

    @property
<<<<<<< HEAD
    def events(self) -> "Events":
=======
    def events(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Events Twilio Domain

        :returns: Events Twilio Domain
<<<<<<< HEAD
        """
        if self._events is None:
            from twilio.rest.events import Events

=======
        :rtype: twilio.rest.events.Events
        """
        if self._events is None:
            from twilio.rest.events import Events
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._events = Events(self)
        return self._events

    @property
<<<<<<< HEAD
    def flex_api(self) -> "FlexApi":
=======
    def flex_api(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the FlexApi Twilio Domain

        :returns: FlexApi Twilio Domain
<<<<<<< HEAD
        """
        if self._flex_api is None:
            from twilio.rest.flex_api import FlexApi

=======
        :rtype: twilio.rest.flex_api.FlexApi
        """
        if self._flex_api is None:
            from twilio.rest.flex_api import FlexApi
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._flex_api = FlexApi(self)
        return self._flex_api

    @property
<<<<<<< HEAD
    def frontline_api(self) -> "FrontlineApi":
=======
    def frontline_api(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the FrontlineApi Twilio Domain

        :returns: FrontlineApi Twilio Domain
<<<<<<< HEAD
        """
        if self._frontline_api is None:
            from twilio.rest.frontline_api import FrontlineApi

=======
        :rtype: twilio.rest.frontline_api.FrontlineApi
        """
        if self._frontline_api is None:
            from twilio.rest.frontline_api import FrontlineApi
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._frontline_api = FrontlineApi(self)
        return self._frontline_api

    @property
<<<<<<< HEAD
    def preview_iam(self) -> "PreviewIam":
        """
        Access the PreviewIam Twilio Domain

        :returns: PreviewIam Twilio Domain
        """
        if self._preview_iam is None:
            from twilio.rest.preview_iam import PreviewIam

            self._preview_iam = PreviewIam(self)
        return self._preview_iam

    @property
    def iam(self) -> "Iam":
        """
        Access the Iam Twilio Domain

        :returns: Iam Twilio Domain
        """
        if self._iam is None:
            from twilio.rest.iam import Iam

            self._iam = Iam(self)
        return self._iam

    @property
    def insights(self) -> "Insights":
=======
    def insights(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Insights Twilio Domain

        :returns: Insights Twilio Domain
<<<<<<< HEAD
        """
        if self._insights is None:
            from twilio.rest.insights import Insights

=======
        :rtype: twilio.rest.insights.Insights
        """
        if self._insights is None:
            from twilio.rest.insights import Insights
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._insights = Insights(self)
        return self._insights

    @property
<<<<<<< HEAD
    def intelligence(self) -> "Intelligence":
        """
        Access the Intelligence Twilio Domain

        :returns: Intelligence Twilio Domain
        """
        if self._intelligence is None:
            from twilio.rest.intelligence import Intelligence

            self._intelligence = Intelligence(self)
        return self._intelligence

    @property
    def ip_messaging(self) -> "IpMessaging":
=======
    def ip_messaging(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the IpMessaging Twilio Domain

        :returns: IpMessaging Twilio Domain
<<<<<<< HEAD
        """
        if self._ip_messaging is None:
            from twilio.rest.ip_messaging import IpMessaging

=======
        :rtype: twilio.rest.ip_messaging.IpMessaging
        """
        if self._ip_messaging is None:
            from twilio.rest.ip_messaging import IpMessaging
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._ip_messaging = IpMessaging(self)
        return self._ip_messaging

    @property
<<<<<<< HEAD
    def knowledge(self) -> "Knowledge":
        """
        Access the Knowledge Twilio Domain

        :returns: Knowledge Twilio Domain
        """
        if self._knowledge is None:
            from twilio.rest.knowledge import Knowledge

            self._knowledge = Knowledge(self)
        return self._knowledge

    @property
    def lookups(self) -> "Lookups":
=======
    def lookups(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Lookups Twilio Domain

        :returns: Lookups Twilio Domain
<<<<<<< HEAD
        """
        if self._lookups is None:
            from twilio.rest.lookups import Lookups

=======
        :rtype: twilio.rest.lookups.Lookups
        """
        if self._lookups is None:
            from twilio.rest.lookups import Lookups
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._lookups = Lookups(self)
        return self._lookups

    @property
<<<<<<< HEAD
    def marketplace(self) -> "Marketplace":
        """
        Access the Marketplace Twilio Domain

        :returns: Marketplace Twilio Domain
        """
        if self._marketplace is None:
            from twilio.rest.marketplace import Marketplace

            self._marketplace = Marketplace(self)
        return self._marketplace

    @property
    def messaging(self) -> "Messaging":
=======
    def media(self):
        """
        Access the Media Twilio Domain

        :returns: Media Twilio Domain
        :rtype: twilio.rest.media.Media
        """
        if self._media is None:
            from twilio.rest.media import Media
            self._media = Media(self)
        return self._media

    @property
    def messaging(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Messaging Twilio Domain

        :returns: Messaging Twilio Domain
<<<<<<< HEAD
        """
        if self._messaging is None:
            from twilio.rest.messaging import Messaging

=======
        :rtype: twilio.rest.messaging.Messaging
        """
        if self._messaging is None:
            from twilio.rest.messaging import Messaging
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._messaging = Messaging(self)
        return self._messaging

    @property
<<<<<<< HEAD
    def microvisor(self) -> "Microvisor":
        """
        Access the Microvisor Twilio Domain

        :returns: Microvisor Twilio Domain
        """
        if self._microvisor is None:
            from twilio.rest.microvisor import Microvisor

            self._microvisor = Microvisor(self)
        return self._microvisor

    @property
    def monitor(self) -> "Monitor":
=======
    def monitor(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Monitor Twilio Domain

        :returns: Monitor Twilio Domain
<<<<<<< HEAD
        """
        if self._monitor is None:
            from twilio.rest.monitor import Monitor

=======
        :rtype: twilio.rest.monitor.Monitor
        """
        if self._monitor is None:
            from twilio.rest.monitor import Monitor
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._monitor = Monitor(self)
        return self._monitor

    @property
<<<<<<< HEAD
    def notify(self) -> "Notify":
=======
    def notify(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Notify Twilio Domain

        :returns: Notify Twilio Domain
<<<<<<< HEAD
        """
        if self._notify is None:
            from twilio.rest.notify import Notify

=======
        :rtype: twilio.rest.notify.Notify
        """
        if self._notify is None:
            from twilio.rest.notify import Notify
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._notify = Notify(self)
        return self._notify

    @property
<<<<<<< HEAD
    def numbers(self) -> "Numbers":
=======
    def numbers(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Numbers Twilio Domain

        :returns: Numbers Twilio Domain
<<<<<<< HEAD
        """
        if self._numbers is None:
            from twilio.rest.numbers import Numbers

=======
        :rtype: twilio.rest.numbers.Numbers
        """
        if self._numbers is None:
            from twilio.rest.numbers import Numbers
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._numbers = Numbers(self)
        return self._numbers

    @property
<<<<<<< HEAD
    def oauth(self) -> "Oauth":
=======
    def oauth(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Oauth Twilio Domain

        :returns: Oauth Twilio Domain
<<<<<<< HEAD
        """
        if self._oauth is None:
            from twilio.rest.oauth import Oauth

=======
        :rtype: twilio.rest.oauth.Oauth
        """
        if self._oauth is None:
            from twilio.rest.oauth import Oauth
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._oauth = Oauth(self)
        return self._oauth

    @property
<<<<<<< HEAD
    def preview(self) -> "Preview":
=======
    def preview(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Preview Twilio Domain

        :returns: Preview Twilio Domain
<<<<<<< HEAD
        """
        if self._preview is None:
            from twilio.rest.preview import Preview

=======
        :rtype: twilio.rest.preview.Preview
        """
        if self._preview is None:
            from twilio.rest.preview import Preview
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._preview = Preview(self)
        return self._preview

    @property
<<<<<<< HEAD
    def pricing(self) -> "Pricing":
=======
    def pricing(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Pricing Twilio Domain

        :returns: Pricing Twilio Domain
<<<<<<< HEAD
        """
        if self._pricing is None:
            from twilio.rest.pricing import Pricing

=======
        :rtype: twilio.rest.pricing.Pricing
        """
        if self._pricing is None:
            from twilio.rest.pricing import Pricing
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._pricing = Pricing(self)
        return self._pricing

    @property
<<<<<<< HEAD
    def proxy(self) -> "Proxy":
=======
    def proxy(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Proxy Twilio Domain

        :returns: Proxy Twilio Domain
<<<<<<< HEAD
        """
        if self._proxy is None:
            from twilio.rest.proxy import Proxy

=======
        :rtype: twilio.rest.proxy.Proxy
        """
        if self._proxy is None:
            from twilio.rest.proxy import Proxy
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._proxy = Proxy(self)
        return self._proxy

    @property
<<<<<<< HEAD
    def routes(self) -> "Routes":
=======
    def routes(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Routes Twilio Domain

        :returns: Routes Twilio Domain
<<<<<<< HEAD
        """
        if self._routes is None:
            from twilio.rest.routes import Routes

=======
        :rtype: twilio.rest.routes.Routes
        """
        if self._routes is None:
            from twilio.rest.routes import Routes
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._routes = Routes(self)
        return self._routes

    @property
<<<<<<< HEAD
    def serverless(self) -> "Serverless":
=======
    def serverless(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Serverless Twilio Domain

        :returns: Serverless Twilio Domain
<<<<<<< HEAD
        """
        if self._serverless is None:
            from twilio.rest.serverless import Serverless

=======
        :rtype: twilio.rest.serverless.Serverless
        """
        if self._serverless is None:
            from twilio.rest.serverless import Serverless
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._serverless = Serverless(self)
        return self._serverless

    @property
<<<<<<< HEAD
    def studio(self) -> "Studio":
=======
    def studio(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Studio Twilio Domain

        :returns: Studio Twilio Domain
<<<<<<< HEAD
        """
        if self._studio is None:
            from twilio.rest.studio import Studio

=======
        :rtype: twilio.rest.studio.Studio
        """
        if self._studio is None:
            from twilio.rest.studio import Studio
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._studio = Studio(self)
        return self._studio

    @property
<<<<<<< HEAD
    def supersim(self) -> "Supersim":
        """
        Access the Supersim Twilio Domain

        :returns: Supersim Twilio Domain
        """
        if self._supersim is None:
            from twilio.rest.supersim import Supersim

            self._supersim = Supersim(self)
        return self._supersim

    @property
    def sync(self) -> "Sync":
=======
    def sync(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Sync Twilio Domain

        :returns: Sync Twilio Domain
<<<<<<< HEAD
        """
        if self._sync is None:
            from twilio.rest.sync import Sync

=======
        :rtype: twilio.rest.sync.Sync
        """
        if self._sync is None:
            from twilio.rest.sync import Sync
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._sync = Sync(self)
        return self._sync

    @property
<<<<<<< HEAD
    def taskrouter(self) -> "Taskrouter":
=======
    def taskrouter(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Taskrouter Twilio Domain

        :returns: Taskrouter Twilio Domain
<<<<<<< HEAD
        """
        if self._taskrouter is None:
            from twilio.rest.taskrouter import Taskrouter

=======
        :rtype: twilio.rest.taskrouter.Taskrouter
        """
        if self._taskrouter is None:
            from twilio.rest.taskrouter import Taskrouter
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._taskrouter = Taskrouter(self)
        return self._taskrouter

    @property
<<<<<<< HEAD
    def trunking(self) -> "Trunking":
=======
    def trunking(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Trunking Twilio Domain

        :returns: Trunking Twilio Domain
<<<<<<< HEAD
        """
        if self._trunking is None:
            from twilio.rest.trunking import Trunking

=======
        :rtype: twilio.rest.trunking.Trunking
        """
        if self._trunking is None:
            from twilio.rest.trunking import Trunking
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._trunking = Trunking(self)
        return self._trunking

    @property
<<<<<<< HEAD
    def trusthub(self) -> "Trusthub":
=======
    def trusthub(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Trusthub Twilio Domain

        :returns: Trusthub Twilio Domain
<<<<<<< HEAD
        """
        if self._trusthub is None:
            from twilio.rest.trusthub import Trusthub

=======
        :rtype: twilio.rest.trusthub.Trusthub
        """
        if self._trusthub is None:
            from twilio.rest.trusthub import Trusthub
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._trusthub = Trusthub(self)
        return self._trusthub

    @property
<<<<<<< HEAD
    def verify(self) -> "Verify":
=======
    def verify(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Verify Twilio Domain

        :returns: Verify Twilio Domain
<<<<<<< HEAD
        """
        if self._verify is None:
            from twilio.rest.verify import Verify

=======
        :rtype: twilio.rest.verify.Verify
        """
        if self._verify is None:
            from twilio.rest.verify import Verify
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._verify = Verify(self)
        return self._verify

    @property
<<<<<<< HEAD
    def video(self) -> "Video":
=======
    def video(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Video Twilio Domain

        :returns: Video Twilio Domain
<<<<<<< HEAD
        """
        if self._video is None:
            from twilio.rest.video import Video

=======
        :rtype: twilio.rest.video.Video
        """
        if self._video is None:
            from twilio.rest.video import Video
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._video = Video(self)
        return self._video

    @property
<<<<<<< HEAD
    def voice(self) -> "Voice":
=======
    def voice(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Voice Twilio Domain

        :returns: Voice Twilio Domain
<<<<<<< HEAD
        """
        if self._voice is None:
            from twilio.rest.voice import Voice

=======
        :rtype: twilio.rest.voice.Voice
        """
        if self._voice is None:
            from twilio.rest.voice import Voice
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._voice = Voice(self)
        return self._voice

    @property
<<<<<<< HEAD
    def wireless(self) -> "Wireless":
=======
    def wireless(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Access the Wireless Twilio Domain

        :returns: Wireless Twilio Domain
<<<<<<< HEAD
        """
        if self._wireless is None:
            from twilio.rest.wireless import Wireless

=======
        :rtype: twilio.rest.wireless.Wireless
        """
        if self._wireless is None:
            from twilio.rest.wireless import Wireless
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
            self._wireless = Wireless(self)
        return self._wireless

    @property
<<<<<<< HEAD
    def addresses(self) -> "AddressList":
        return self.api.account.addresses

    @property
    def applications(self) -> "ApplicationList":
        return self.api.account.applications

    @property
    def authorized_connect_apps(self) -> "AuthorizedConnectAppList":
        return self.api.account.authorized_connect_apps

    @property
    def available_phone_numbers(self) -> "AvailablePhoneNumberCountryList":
        return self.api.account.available_phone_numbers

    @property
    def balance(self) -> "BalanceList":
        return self.api.account.balance

    @property
    def calls(self) -> "CallList":
        return self.api.account.calls

    @property
    def conferences(self) -> "ConferenceList":
        return self.api.account.conferences

    @property
    def connect_apps(self) -> "ConnectAppList":
        return self.api.account.connect_apps

    @property
    def incoming_phone_numbers(self) -> "IncomingPhoneNumberList":
        return self.api.account.incoming_phone_numbers

    @property
    def keys(self) -> "KeyList":
        return self.api.account.keys

    @property
    def new_keys(self) -> "NewKeyList":
        return self.api.account.new_keys

    @property
    def messages(self) -> "MessageList":
        return self.api.account.messages

    @property
    def signing_keys(self) -> "SigningKeyList":
        return self.api.account.signing_keys

    @property
    def new_signing_keys(self) -> "NewSigningKeyList":
        return self.api.account.new_signing_keys

    @property
    def notifications(self) -> "NotificationList":
        return self.api.account.notifications

    @property
    def outgoing_caller_ids(self) -> "OutgoingCallerIdList":
        return self.api.account.outgoing_caller_ids

    @property
    def validation_requests(self) -> "ValidationRequestList":
        return self.api.account.validation_requests

    @property
    def queues(self) -> "QueueList":
        return self.api.account.queues

    @property
    def recordings(self) -> "RecordingList":
        return self.api.account.recordings

    @property
    def short_codes(self) -> "ShortCodeList":
        return self.api.account.short_codes

    @property
    def sip(self) -> "SipList":
        return self.api.account.sip

    @property
    def tokens(self) -> "TokenList":
        return self.api.account.tokens

    @property
    def transcriptions(self) -> "TranscriptionList":
        return self.api.account.transcriptions

    @property
    def usage(self) -> "UsageList":
        return self.api.account.usage
=======
    def supersim(self):
        """
        Access the Supersim Twilio Domain

        :returns: Supersim Twilio Domain
        :rtype: twilio.rest.supersim.Supersim
        """
        if self._supersim is None:
            from twilio.rest.supersim import Supersim
            self._supersim = Supersim(self)
        return self._supersim

    @property
    def bulkexports(self):
        """
        Access the Bulkexports Twilio Domain

        :returns: Bulkexports Twilio Domain
        :rtype: twilio.rest.bulkexports.Bulkexports
        """
        if self._bulkexports is None:
            from twilio.rest.bulkexports import Bulkexports
            self._bulkexports = Bulkexports(self)
        return self._bulkexports

    @property
    def microvisor(self):
        """
        Access the Microvisor Twilio Domain

        :returns: Microvisor Twilio Domain
        :rtype: twilio.rest.microvisor.Microvisor
        """
        if self._microvisor is None:
            from twilio.rest.microvisor import Microvisor
            self._microvisor = Microvisor(self)
        return self._microvisor

    @property
    def addresses(self):
        """
        :rtype: twilio.rest.api.v2010.account.address.AddressList
        """
        return self.api.account.addresses

    @property
    def applications(self):
        """
        :rtype: twilio.rest.api.v2010.account.application.ApplicationList
        """
        return self.api.account.applications

    @property
    def authorized_connect_apps(self):
        """
        :rtype: twilio.rest.api.v2010.account.authorized_connect_app.AuthorizedConnectAppList
        """
        return self.api.account.authorized_connect_apps

    @property
    def available_phone_numbers(self):
        """
        :rtype: twilio.rest.api.v2010.account.available_phone_number.AvailablePhoneNumberCountryList
        """
        return self.api.account.available_phone_numbers

    @property
    def balance(self):
        """
        :rtype: twilio.rest.api.v2010.account.balance.BalanceList
        """
        return self.api.account.balance

    @property
    def calls(self):
        """
        :rtype: twilio.rest.api.v2010.account.call.CallList
        """
        return self.api.account.calls

    @property
    def conferences(self):
        """
        :rtype: twilio.rest.api.v2010.account.conference.ConferenceList
        """
        return self.api.account.conferences

    @property
    def connect_apps(self):
        """
        :rtype: twilio.rest.api.v2010.account.connect_app.ConnectAppList
        """
        return self.api.account.connect_apps

    @property
    def incoming_phone_numbers(self):
        """
        :rtype: twilio.rest.api.v2010.account.incoming_phone_number.IncomingPhoneNumberList
        """
        return self.api.account.incoming_phone_numbers

    @property
    def keys(self):
        """
        :rtype: twilio.rest.api.v2010.account.key.KeyList
        """
        return self.api.account.keys

    @property
    def messages(self):
        """
        :rtype: twilio.rest.api.v2010.account.message.MessageList
        """
        return self.api.account.messages

    @property
    def new_keys(self):
        """
        :rtype: twilio.rest.api.v2010.account.new_key.NewKeyList
        """
        return self.api.account.new_keys

    @property
    def new_signing_keys(self):
        """
        :rtype: twilio.rest.api.v2010.account.new_signing_key.NewSigningKeyList
        """
        return self.api.account.new_signing_keys

    @property
    def notifications(self):
        """
        :rtype: twilio.rest.api.v2010.account.notification.NotificationList
        """
        return self.api.account.notifications

    @property
    def outgoing_caller_ids(self):
        """
        :rtype: twilio.rest.api.v2010.account.outgoing_caller_id.OutgoingCallerIdList
        """
        return self.api.account.outgoing_caller_ids

    @property
    def queues(self):
        """
        :rtype: twilio.rest.api.v2010.account.queue.QueueList
        """
        return self.api.account.queues

    @property
    def recordings(self):
        """
        :rtype: twilio.rest.api.v2010.account.recording.RecordingList
        """
        return self.api.account.recordings

    @property
    def signing_keys(self):
        """
        :rtype: twilio.rest.api.v2010.account.signing_key.SigningKeyList
        """
        return self.api.account.signing_keys

    @property
    def sip(self):
        """
        :rtype: twilio.rest.api.v2010.account.sip.SipList
        """
        return self.api.account.sip

    @property
    def short_codes(self):
        """
        :rtype: twilio.rest.api.v2010.account.short_code.ShortCodeList
        """
        return self.api.account.short_codes

    @property
    def tokens(self):
        """
        :rtype: twilio.rest.api.v2010.account.token.TokenList
        """
        return self.api.account.tokens

    @property
    def transcriptions(self):
        """
        :rtype: twilio.rest.api.v2010.account.transcription.TranscriptionList
        """
        return self.api.account.transcriptions

    @property
    def usage(self):
        """
        :rtype: twilio.rest.api.v2010.account.usage.UsageList
        """
        return self.api.account.usage

    @property
    def validation_requests(self):
        """
        :rtype: twilio.rest.api.v2010.account.validation_request.ValidationRequestList
        """
        return self.api.account.validation_requests

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio {}>'.format(self.account_sid)


@obsolete_client
class TwilioClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioRestClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioIpMessagingClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioLookupsClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioMonitorClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioPricingClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioTaskRouterClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass


@obsolete_client
class TwilioTrunkingClient(object):
    """ Dummy client which provides no functionality. Please use
    twilio.rest.Client instead. """

    def __init__(self, *args):
        pass
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
