<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Flex
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional, Union
from twilio.base import serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version

from twilio.rest.flex_api.v1.interaction.interaction_channel import (
    InteractionChannelList,
)


class InteractionInstance(InstanceResource):
    """
    :ivar sid: The unique string created by Twilio to identify an Interaction resource, prefixed with KD.
    :ivar channel: A JSON object that defines the Interaction’s communication channel and includes details about the channel. See the [Outbound SMS](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) and [inbound (API-initiated)](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#api-initiated-contact) Channel object examples.
    :ivar routing: A JSON Object representing the routing rules for the Interaction Channel. See [Outbound SMS Example](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) for an example Routing object. The Interactions resource uses TaskRouter for all routing functionality.   All attributes in the Routing object on your Interaction request body are added “as is” to the task. For a list of known attributes consumed by the Flex UI and/or Flex Insights, see [Known Task Attributes](https://www.twilio.com/docs/flex/developer/conversations/interactions-api#task-attributes).
    :ivar url:
    :ivar links:
    :ivar interaction_context_sid:
    """

    def __init__(
        self, version: Version, payload: Dict[str, Any], sid: Optional[str] = None
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.channel: Optional[Dict[str, object]] = payload.get("channel")
        self.routing: Optional[Dict[str, object]] = payload.get("routing")
        self.url: Optional[str] = payload.get("url")
        self.links: Optional[Dict[str, object]] = payload.get("links")
        self.interaction_context_sid: Optional[str] = payload.get(
            "interaction_context_sid"
        )

        self._solution = {
            "sid": sid or self.sid,
        }
        self._context: Optional[InteractionContext] = None

    @property
    def _proxy(self) -> "InteractionContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: InteractionContext for this InteractionInstance
        """
        if self._context is None:
            self._context = InteractionContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    def fetch(self) -> "InteractionInstance":
        """
        Fetch the InteractionInstance


        :returns: The fetched InteractionInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "InteractionInstance":
        """
        Asynchronous coroutine to fetch the InteractionInstance


        :returns: The fetched InteractionInstance
        """
        return await self._proxy.fetch_async()

    @property
    def channels(self) -> InteractionChannelList:
        """
        Access the channels
        """
        return self._proxy.channels

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InteractionInstance {}>".format(context)


class InteractionContext(InstanceContext):

    def __init__(self, version: Version, sid: str):
        """
        Initialize the InteractionContext

        :param version: Version that contains the resource
        :param sid: The SID of the Interaction resource to fetch.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Interactions/{sid}".format(**self._solution)

        self._channels: Optional[InteractionChannelList] = None

    def fetch(self) -> InteractionInstance:
        """
        Fetch the InteractionInstance


        :returns: The fetched InteractionInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return InteractionInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> InteractionInstance:
        """
        Asynchronous coroutine to fetch the InteractionInstance


        :returns: The fetched InteractionInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return InteractionInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    @property
    def channels(self) -> InteractionChannelList:
        """
        Access the channels
        """
        if self._channels is None:
            self._channels = InteractionChannelList(
                self._version,
                self._solution["sid"],
            )
        return self._channels

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.FlexApi.V1.InteractionContext {}>".format(context)
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page
from twilio.rest.flex_api.v1.interaction.interaction_channel import InteractionChannelList
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class InteractionList(ListResource):

<<<<<<< HEAD
    def __init__(self, version: Version):
        """
        Initialize the InteractionList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/Interactions"

    def create(
        self,
        channel: object,
        routing: Union[object, object] = values.unset,
        interaction_context_sid: Union[str, object] = values.unset,
    ) -> InteractionInstance:
        """
        Create the InteractionInstance

        :param channel: The Interaction's channel.
        :param routing: The Interaction's routing logic.
        :param interaction_context_sid: The Interaction context sid is used for adding a context lookup sid

        :returns: The created InteractionInstance
        """

        data = values.of(
            {
                "Channel": serialize.object(channel),
                "Routing": serialize.object(routing),
                "InteractionContextSid": interaction_context_sid,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.create(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return InteractionInstance(self._version, payload)

    async def create_async(
        self,
        channel: object,
        routing: Union[object, object] = values.unset,
        interaction_context_sid: Union[str, object] = values.unset,
    ) -> InteractionInstance:
        """
        Asynchronously create the InteractionInstance

        :param channel: The Interaction's channel.
        :param routing: The Interaction's routing logic.
        :param interaction_context_sid: The Interaction context sid is used for adding a context lookup sid

        :returns: The created InteractionInstance
        """

        data = values.of(
            {
                "Channel": serialize.object(channel),
                "Routing": serialize.object(routing),
                "InteractionContextSid": interaction_context_sid,
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return InteractionInstance(self._version, payload)

    def get(self, sid: str) -> InteractionContext:
        """
        Constructs a InteractionContext

        :param sid: The SID of the Interaction resource to fetch.
        """
        return InteractionContext(self._version, sid=sid)

    def __call__(self, sid: str) -> InteractionContext:
        """
        Constructs a InteractionContext

        :param sid: The SID of the Interaction resource to fetch.
        """
        return InteractionContext(self._version, sid=sid)

    def __repr__(self) -> str:
=======
    def __init__(self, version):
        """
        Initialize the InteractionList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.flex_api.v1.interaction.InteractionList
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionList
        """
        super(InteractionList, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/Interactions'.format(**self._solution)

    def create(self, channel, routing):
        """
        Create the InteractionInstance

        :param dict channel: The Interaction's channel
        :param dict routing: The Interaction's routing logic

        :returns: The created InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        data = values.of({'Channel': serialize.object(channel), 'Routing': serialize.object(routing), })

        payload = self._version.create(method='POST', uri=self._uri, data=data, )

        return InteractionInstance(self._version, payload, )

    def get(self, sid):
        """
        Constructs a InteractionContext

        :param sid: The SID that identifies the resource to fetch

        :returns: twilio.rest.flex_api.v1.interaction.InteractionContext
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        return InteractionContext(self._version, sid=sid, )

    def __call__(self, sid):
        """
        Constructs a InteractionContext

        :param sid: The SID that identifies the resource to fetch

        :returns: twilio.rest.flex_api.v1.interaction.InteractionContext
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        return InteractionContext(self._version, sid=sid, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.FlexApi.V1.InteractionList>"
=======
        :rtype: str
        """
        return '<Twilio.FlexApi.V1.InteractionList>'


class InteractionPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the InteractionPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.flex_api.v1.interaction.InteractionPage
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionPage
        """
        super(InteractionPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of InteractionInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.flex_api.v1.interaction.InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        return InteractionInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.FlexApi.V1.InteractionPage>'


class InteractionContext(InstanceContext):

    def __init__(self, version, sid):
        """
        Initialize the InteractionContext

        :param Version version: Version that contains the resource
        :param sid: The SID that identifies the resource to fetch

        :returns: twilio.rest.flex_api.v1.interaction.InteractionContext
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        super(InteractionContext, self).__init__(version)

        # Path Solution
        self._solution = {'sid': sid, }
        self._uri = '/Interactions/{sid}'.format(**self._solution)

        # Dependents
        self._channels = None

    def fetch(self):
        """
        Fetch the InteractionInstance

        :returns: The fetched InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return InteractionInstance(self._version, payload, sid=self._solution['sid'], )

    @property
    def channels(self):
        """
        Access the channels

        :returns: twilio.rest.flex_api.v1.interaction.interaction_channel.InteractionChannelList
        :rtype: twilio.rest.flex_api.v1.interaction.interaction_channel.InteractionChannelList
        """
        if self._channels is None:
            self._channels = InteractionChannelList(self._version, interaction_sid=self._solution['sid'], )
        return self._channels

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.FlexApi.V1.InteractionContext {}>'.format(context)


class InteractionInstance(InstanceResource):

    def __init__(self, version, payload, sid=None):
        """
        Initialize the InteractionInstance

        :returns: twilio.rest.flex_api.v1.interaction.InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        super(InteractionInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'sid': payload.get('sid'),
            'channel': payload.get('channel'),
            'routing': payload.get('routing'),
            'url': payload.get('url'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {'sid': sid or self._properties['sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: InteractionContext for this InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionContext
        """
        if self._context is None:
            self._context = InteractionContext(self._version, sid=self._solution['sid'], )
        return self._context

    @property
    def sid(self):
        """
        :returns: The unique string that identifies the resource
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def channel(self):
        """
        :returns: The Interaction's channel
        :rtype: dict
        """
        return self._properties['channel']

    @property
    def routing(self):
        """
        :returns: A JSON Object representing the routing rules for the Interaction Channel
        :rtype: dict
        """
        return self._properties['routing']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: The links
        :rtype: unicode
        """
        return self._properties['links']

    def fetch(self):
        """
        Fetch the InteractionInstance

        :returns: The fetched InteractionInstance
        :rtype: twilio.rest.flex_api.v1.interaction.InteractionInstance
        """
        return self._proxy.fetch()

    @property
    def channels(self):
        """
        Access the channels

        :returns: twilio.rest.flex_api.v1.interaction.interaction_channel.InteractionChannelList
        :rtype: twilio.rest.flex_api.v1.interaction.interaction_channel.InteractionChannelList
        """
        return self._proxy.channels

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.FlexApi.V1.InteractionInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
