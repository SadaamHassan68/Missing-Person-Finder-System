<<<<<<< HEAD
from warnings import warn

from twilio.rest.content.ContentBase import ContentBase
from twilio.rest.content.v1.content import ContentList
from twilio.rest.content.v1.content_and_approvals import ContentAndApprovalsList
from twilio.rest.content.v1.legacy_content import LegacyContentList


class Content(ContentBase):
    @property
    def contents(self) -> ContentList:
        warn(
            "contents is deprecated. Use v1.contents instead.",
            DeprecationWarning,
            stacklevel=2,
        )
        return self.v1.contents

    @property
    def content_and_approvals(self) -> ContentAndApprovalsList:
        warn(
            "content_and_approvals is deprecated. Use v1.content_and_approvals instead.",
            DeprecationWarning,
            stacklevel=2,
        )
        return self.v1.content_and_approvals

    @property
    def legacy_contents(self) -> LegacyContentList:
        warn(
            "legacy_contents is deprecated. Use v1.legacy_contents instead.",
            DeprecationWarning,
            stacklevel=2,
        )
        return self.v1.legacy_contents
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base.domain import Domain
from twilio.rest.content.v1 import V1


class Content(Domain):

    def __init__(self, twilio):
        """
        Initialize the Content Domain

        :returns: Domain for Content
        :rtype: twilio.rest.content.Content
        """
        super(Content, self).__init__(twilio)

        self.base_url = 'https://content.twilio.com'

        # Versions
        self._v1 = None

    @property
    def v1(self):
        """
        :returns: Version v1 of content
        :rtype: twilio.rest.content.v1.V1
        """
        if self._v1 is None:
            self._v1 = V1(self)
        return self._v1

    @property
    def contents(self):
        """
        :rtype: twilio.rest.content.v1.content.ContentList
        """
        return self.v1.contents

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Content>'
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
