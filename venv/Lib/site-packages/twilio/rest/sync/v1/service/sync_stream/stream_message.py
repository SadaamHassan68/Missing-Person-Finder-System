<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Sync
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional
from twilio.base import serialize, values

from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class StreamMessageInstance(InstanceResource):
    """
    :ivar sid: The unique string that we created to identify the Stream Message resource.
    :ivar data: An arbitrary, schema-less object that contains the Stream Message body. Can be up to 4 KiB in length.
    """

    def __init__(
        self,
        version: Version,
        payload: Dict[str, Any],
        service_sid: str,
        stream_sid: str,
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.data: Optional[Dict[str, object]] = payload.get("data")

        self._solution = {
            "service_sid": service_sid,
            "stream_sid": stream_sid,
        }

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Sync.V1.StreamMessageInstance {}>".format(context)
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class StreamMessageList(ListResource):

<<<<<<< HEAD
    def __init__(self, version: Version, service_sid: str, stream_sid: str):
        """
        Initialize the StreamMessageList

        :param version: Version that contains the resource
        :param service_sid: The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the new Stream Message in.
        :param stream_sid: The SID of the Sync Stream to create the new Stream Message resource for.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "service_sid": service_sid,
            "stream_sid": stream_sid,
        }
        self._uri = "/Services/{service_sid}/Streams/{stream_sid}/Messages".format(
            **self._solution
        )

    def create(self, data: object) -> StreamMessageInstance:
        """
        Create the StreamMessageInstance

        :param data: A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body. Can be up to 4 KiB in length.

        :returns: The created StreamMessageInstance
        """

        data = values.of(
            {
                "Data": serialize.object(data),
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.create(
            method="POST", uri=self._uri, data=data, headers=headers
        )
=======
    def __init__(self, version, service_sid, stream_sid):
        """
        Initialize the StreamMessageList

        :param Version version: Version that contains the resource
        :param service_sid: The SID of the Sync Service that the resource is associated with
        :param stream_sid: The unique string that identifies the resource

        :returns: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageList
        :rtype: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageList
        """
        super(StreamMessageList, self).__init__(version)

        # Path Solution
        self._solution = {'service_sid': service_sid, 'stream_sid': stream_sid, }
        self._uri = '/Services/{service_sid}/Streams/{stream_sid}/Messages'.format(**self._solution)

    def create(self, data):
        """
        Create the StreamMessageInstance

        :param dict data: A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body

        :returns: The created StreamMessageInstance
        :rtype: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageInstance
        """
        data = values.of({'Data': serialize.object(data), })

        payload = self._version.create(method='POST', uri=self._uri, data=data, )
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

        return StreamMessageInstance(
            self._version,
            payload,
<<<<<<< HEAD
            service_sid=self._solution["service_sid"],
            stream_sid=self._solution["stream_sid"],
        )

    async def create_async(self, data: object) -> StreamMessageInstance:
        """
        Asynchronously create the StreamMessageInstance

        :param data: A JSON string that represents an arbitrary, schema-less object that makes up the Stream Message body. Can be up to 4 KiB in length.

        :returns: The created StreamMessageInstance
        """

        data = values.of(
            {
                "Data": serialize.object(data),
            }
        )
        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.create_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return StreamMessageInstance(
            self._version,
            payload,
            service_sid=self._solution["service_sid"],
            stream_sid=self._solution["stream_sid"],
        )

    def __repr__(self) -> str:
=======
            service_sid=self._solution['service_sid'],
            stream_sid=self._solution['stream_sid'],
        )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Sync.V1.StreamMessageList>"
=======
        :rtype: str
        """
        return '<Twilio.Sync.V1.StreamMessageList>'


class StreamMessagePage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the StreamMessagePage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param service_sid: The SID of the Sync Service that the resource is associated with
        :param stream_sid: The unique string that identifies the resource

        :returns: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessagePage
        :rtype: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessagePage
        """
        super(StreamMessagePage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of StreamMessageInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageInstance
        :rtype: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageInstance
        """
        return StreamMessageInstance(
            self._version,
            payload,
            service_sid=self._solution['service_sid'],
            stream_sid=self._solution['stream_sid'],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Sync.V1.StreamMessagePage>'


class StreamMessageInstance(InstanceResource):

    def __init__(self, version, payload, service_sid, stream_sid):
        """
        Initialize the StreamMessageInstance

        :returns: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageInstance
        :rtype: twilio.rest.sync.v1.service.sync_stream.stream_message.StreamMessageInstance
        """
        super(StreamMessageInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {'sid': payload.get('sid'), 'data': payload.get('data'), }

        # Context
        self._context = None
        self._solution = {'service_sid': service_sid, 'stream_sid': stream_sid, }

    @property
    def sid(self):
        """
        :returns: The unique string that identifies the resource
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def data(self):
        """
        :returns: Stream Message body
        :rtype: dict
        """
        return self._properties['data']

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Sync.V1.StreamMessageInstance>'
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
