<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, List, Optional, Union
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class AnnotationInstance(InstanceResource):
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class AnnotationList(ListResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, call_sid):
        """
        Initialize the AnnotationList

        :param Version version: Version that contains the resource
        :param call_sid: Call SID.

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationList
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationList
        """
        super(AnnotationList, self).__init__(version)

        # Path Solution
        self._solution = {'call_sid': call_sid, }

    def get(self):
        """
        Constructs a AnnotationContext

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        return AnnotationContext(self._version, call_sid=self._solution['call_sid'], )

    def __call__(self):
        """
        Constructs a AnnotationContext

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        return AnnotationContext(self._version, call_sid=self._solution['call_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.AnnotationList>'


class AnnotationPage(Page):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, response, solution):
        """
        Initialize the AnnotationPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param call_sid: Call SID.

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationPage
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationPage
        """
        super(AnnotationPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of AnnotationInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return AnnotationInstance(self._version, payload, call_sid=self._solution['call_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.AnnotationPage>'


class AnnotationContext(InstanceContext):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, call_sid):
        """
        Initialize the AnnotationContext

        :param Version version: Version that contains the resource
        :param call_sid: Call SID.

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationContext
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        super(AnnotationContext, self).__init__(version)

        # Path Solution
        self._solution = {'call_sid': call_sid, }
        self._uri = '/Voice/{call_sid}/Annotation'.format(**self._solution)

    def update(self, answered_by=values.unset, connectivity_issue=values.unset,
               quality_issues=values.unset, spam=values.unset,
               call_score=values.unset, comment=values.unset,
               incident=values.unset):
        """
        Update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by: Indicates the answering entity as determined by Answering Machine Detection.
        :param AnnotationInstance.ConnectivityIssue connectivity_issue: Indicates if the call had any connectivity issue
        :param unicode quality_issues: Indicates if the call had audio quality issues.
        :param bool spam: Call spam indicator
        :param unicode call_score: Call Score
        :param unicode comment: User comments
        :param unicode incident: Call tag for incidents or support ticket

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        data = values.of({
            'AnsweredBy': answered_by,
            'ConnectivityIssue': connectivity_issue,
            'QualityIssues': quality_issues,
            'Spam': spam,
            'CallScore': call_score,
            'Comment': comment,
            'Incident': incident,
        })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return AnnotationInstance(self._version, payload, call_sid=self._solution['call_sid'], )

    def fetch(self):
        """
        Fetch the AnnotationInstance

        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return AnnotationInstance(self._version, payload, call_sid=self._solution['call_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.AnnotationContext {}>'.format(context)


class AnnotationInstance(InstanceResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

    class AnsweredBy(object):
        UNKNOWN_ANSWERED_BY = "unknown_answered_by"
        HUMAN = "human"
        MACHINE = "machine"

    class ConnectivityIssue(object):
        UNKNOWN_CONNECTIVITY_ISSUE = "unknown_connectivity_issue"
        NO_CONNECTIVITY_ISSUE = "no_connectivity_issue"
        INVALID_NUMBER = "invalid_number"
        CALLER_ID = "caller_id"
        DROPPED_CALL = "dropped_call"
        NUMBER_REACHABILITY = "number_reachability"

<<<<<<< HEAD
    """
    :ivar call_sid: The unique SID identifier of the Call.
    :ivar account_sid: The unique SID identifier of the Account.
    :ivar answered_by: 
    :ivar connectivity_issue: 
    :ivar quality_issues: Specifies if the call had any subjective quality issues. Possible values are one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, or `static_noise`.
    :ivar spam: Specifies if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call.
    :ivar call_score: Specifies the Call Score, if available. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
    :ivar comment: Specifies any comments pertaining to the call. Twilio does not treat this field as PII, so no PII should be included in comments.
    :ivar incident: Incident or support ticket associated with this call. The `incident` property is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.
    :ivar url: 
    """

    def __init__(self, version: Version, payload: Dict[str, Any], call_sid: str):
        super().__init__(version)

        self.call_sid: Optional[str] = payload.get("call_sid")
        self.account_sid: Optional[str] = payload.get("account_sid")
        self.answered_by: Optional["AnnotationInstance.AnsweredBy"] = payload.get(
            "answered_by"
        )
        self.connectivity_issue: Optional["AnnotationInstance.ConnectivityIssue"] = (
            payload.get("connectivity_issue")
        )
        self.quality_issues: Optional[List[str]] = payload.get("quality_issues")
        self.spam: Optional[bool] = payload.get("spam")
        self.call_score: Optional[int] = deserialize.integer(payload.get("call_score"))
        self.comment: Optional[str] = payload.get("comment")
        self.incident: Optional[str] = payload.get("incident")
        self.url: Optional[str] = payload.get("url")

        self._solution = {
            "call_sid": call_sid,
        }
        self._context: Optional[AnnotationContext] = None

    @property
    def _proxy(self) -> "AnnotationContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: AnnotationContext for this AnnotationInstance
        """
        if self._context is None:
            self._context = AnnotationContext(
                self._version,
                call_sid=self._solution["call_sid"],
            )
        return self._context

    def fetch(self) -> "AnnotationInstance":
        """
        Fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "AnnotationInstance":
        """
        Asynchronous coroutine to fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        answered_by: Union["AnnotationInstance.AnsweredBy", object] = values.unset,
        connectivity_issue: Union[
            "AnnotationInstance.ConnectivityIssue", object
        ] = values.unset,
        quality_issues: Union[str, object] = values.unset,
        spam: Union[bool, object] = values.unset,
        call_score: Union[int, object] = values.unset,
        comment: Union[str, object] = values.unset,
        incident: Union[str, object] = values.unset,
    ) -> "AnnotationInstance":
        """
        Update the AnnotationInstance

        :param answered_by:
        :param connectivity_issue:
        :param quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`. Use comma separated values to indicate multiple quality issues for the same call.
        :param spam: A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use `true` if the call was a spam call.
        :param call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param comment: Specify any comments pertaining to the call. `comment` has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the `comment`.
        :param incident: Associate this call with an incident or support ticket. The `incident` parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :returns: The updated AnnotationInstance
=======
    class QualityIssues(object):
        UNKNOWN_QUALITY_ISSUE = "unknown_quality_issue"
        NO_QUALITY_ISSUE = "no_quality_issue"
        LOW_VOLUME = "low_volume"
        CHOPPY_ROBOTIC = "choppy_robotic"
        ECHO = "echo"
        DTMF = "dtmf"
        LATENCY = "latency"
        OWA = "owa"
        STATIC_NOISE = "static_noise"

    def __init__(self, version, payload, call_sid):
        """
        Initialize the AnnotationInstance

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        super(AnnotationInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'call_sid': payload.get('call_sid'),
            'account_sid': payload.get('account_sid'),
            'answered_by': payload.get('answered_by'),
            'connectivity_issue': payload.get('connectivity_issue'),
            'quality_issues': payload.get('quality_issues'),
            'spam': payload.get('spam'),
            'call_score': deserialize.integer(payload.get('call_score')),
            'comment': payload.get('comment'),
            'incident': payload.get('incident'),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {'call_sid': call_sid, }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: AnnotationContext for this AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationContext
        """
        if self._context is None:
            self._context = AnnotationContext(self._version, call_sid=self._solution['call_sid'], )
        return self._context

    @property
    def call_sid(self):
        """
        :returns: Call SID.
        :rtype: unicode
        """
        return self._properties['call_sid']

    @property
    def account_sid(self):
        """
        :returns: Account SID.
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def answered_by(self):
        """
        :returns: Indicates the answering entity as determined by Answering Machine Detection.
        :rtype: AnnotationInstance.AnsweredBy
        """
        return self._properties['answered_by']

    @property
    def connectivity_issue(self):
        """
        :returns: Indicates if the call had any connectivity issue
        :rtype: AnnotationInstance.ConnectivityIssue
        """
        return self._properties['connectivity_issue']

    @property
    def quality_issues(self):
        """
        :returns: Indicates if the call had audio quality issues.
        :rtype: list[unicode]
        """
        return self._properties['quality_issues']

    @property
    def spam(self):
        """
        :returns: Call spam indicator
        :rtype: bool
        """
        return self._properties['spam']

    @property
    def call_score(self):
        """
        :returns: Call Score
        :rtype: unicode
        """
        return self._properties['call_score']

    @property
    def comment(self):
        """
        :returns: User comments
        :rtype: unicode
        """
        return self._properties['comment']

    @property
    def incident(self):
        """
        :returns: Call tag for incidents or support ticket
        :rtype: unicode
        """
        return self._properties['incident']

    @property
    def url(self):
        """
        :returns: The URL of this resource.
        :rtype: unicode
        """
        return self._properties['url']

    def update(self, answered_by=values.unset, connectivity_issue=values.unset,
               quality_issues=values.unset, spam=values.unset,
               call_score=values.unset, comment=values.unset,
               incident=values.unset):
        """
        Update the AnnotationInstance

        :param AnnotationInstance.AnsweredBy answered_by: Indicates the answering entity as determined by Answering Machine Detection.
        :param AnnotationInstance.ConnectivityIssue connectivity_issue: Indicates if the call had any connectivity issue
        :param unicode quality_issues: Indicates if the call had audio quality issues.
        :param bool spam: Call spam indicator
        :param unicode call_score: Call Score
        :param unicode comment: User comments
        :param unicode incident: Call tag for incidents or support ticket

        :returns: The updated AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.update(
            answered_by=answered_by,
            connectivity_issue=connectivity_issue,
            quality_issues=quality_issues,
            spam=spam,
            call_score=call_score,
            comment=comment,
            incident=incident,
        )

<<<<<<< HEAD
    async def update_async(
        self,
        answered_by: Union["AnnotationInstance.AnsweredBy", object] = values.unset,
        connectivity_issue: Union[
            "AnnotationInstance.ConnectivityIssue", object
        ] = values.unset,
        quality_issues: Union[str, object] = values.unset,
        spam: Union[bool, object] = values.unset,
        call_score: Union[int, object] = values.unset,
        comment: Union[str, object] = values.unset,
        incident: Union[str, object] = values.unset,
    ) -> "AnnotationInstance":
        """
        Asynchronous coroutine to update the AnnotationInstance

        :param answered_by:
        :param connectivity_issue:
        :param quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`. Use comma separated values to indicate multiple quality issues for the same call.
        :param spam: A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use `true` if the call was a spam call.
        :param call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param comment: Specify any comments pertaining to the call. `comment` has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the `comment`.
        :param incident: Associate this call with an incident or support ticket. The `incident` parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :returns: The updated AnnotationInstance
        """
        return await self._proxy.update_async(
            answered_by=answered_by,
            connectivity_issue=connectivity_issue,
            quality_issues=quality_issues,
            spam=spam,
            call_score=call_score,
            comment=comment,
            incident=incident,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.AnnotationInstance {}>".format(context)


class AnnotationContext(InstanceContext):

    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the AnnotationContext

        :param version: Version that contains the resource
        :param call_sid: The unique string that Twilio created to identify this Call resource. It always starts with a CA.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }
        self._uri = "/Voice/{call_sid}/Annotation".format(**self._solution)

    def fetch(self) -> AnnotationInstance:
        """
        Fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return AnnotationInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    async def fetch_async(self) -> AnnotationInstance:
        """
        Asynchronous coroutine to fetch the AnnotationInstance


        :returns: The fetched AnnotationInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return AnnotationInstance(
            self._version,
            payload,
            call_sid=self._solution["call_sid"],
        )

    def update(
        self,
        answered_by: Union["AnnotationInstance.AnsweredBy", object] = values.unset,
        connectivity_issue: Union[
            "AnnotationInstance.ConnectivityIssue", object
        ] = values.unset,
        quality_issues: Union[str, object] = values.unset,
        spam: Union[bool, object] = values.unset,
        call_score: Union[int, object] = values.unset,
        comment: Union[str, object] = values.unset,
        incident: Union[str, object] = values.unset,
    ) -> AnnotationInstance:
        """
        Update the AnnotationInstance

        :param answered_by:
        :param connectivity_issue:
        :param quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`. Use comma separated values to indicate multiple quality issues for the same call.
        :param spam: A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use `true` if the call was a spam call.
        :param call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param comment: Specify any comments pertaining to the call. `comment` has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the `comment`.
        :param incident: Associate this call with an incident or support ticket. The `incident` parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :returns: The updated AnnotationInstance
        """

        data = values.of(
            {
                "AnsweredBy": answered_by,
                "ConnectivityIssue": connectivity_issue,
                "QualityIssues": quality_issues,
                "Spam": serialize.boolean_to_string(spam),
                "CallScore": call_score,
                "Comment": comment,
                "Incident": incident,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return AnnotationInstance(
            self._version, payload, call_sid=self._solution["call_sid"]
        )

    async def update_async(
        self,
        answered_by: Union["AnnotationInstance.AnsweredBy", object] = values.unset,
        connectivity_issue: Union[
            "AnnotationInstance.ConnectivityIssue", object
        ] = values.unset,
        quality_issues: Union[str, object] = values.unset,
        spam: Union[bool, object] = values.unset,
        call_score: Union[int, object] = values.unset,
        comment: Union[str, object] = values.unset,
        incident: Union[str, object] = values.unset,
    ) -> AnnotationInstance:
        """
        Asynchronous coroutine to update the AnnotationInstance

        :param answered_by:
        :param connectivity_issue:
        :param quality_issues: Specify if the call had any subjective quality issues. Possible values, one or more of `no_quality_issue`, `low_volume`, `choppy_robotic`, `echo`, `dtmf`, `latency`, `owa`, `static_noise`. Use comma separated values to indicate multiple quality issues for the same call.
        :param spam: A boolean flag to indicate if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Use `true` if the call was a spam call.
        :param call_score: Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad].
        :param comment: Specify any comments pertaining to the call. `comment` has a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in the `comment`.
        :param incident: Associate this call with an incident or support ticket. The `incident` parameter is of type string with a maximum character limit of 100. Twilio does not treat this field as PII, so no PII should be included in `incident`.

        :returns: The updated AnnotationInstance
        """

        data = values.of(
            {
                "AnsweredBy": answered_by,
                "ConnectivityIssue": connectivity_issue,
                "QualityIssues": quality_issues,
                "Spam": serialize.boolean_to_string(spam),
                "CallScore": call_score,
                "Comment": comment,
                "Incident": incident,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return AnnotationInstance(
            self._version, payload, call_sid=self._solution["call_sid"]
        )

    def __repr__(self) -> str:
=======
    def fetch(self):
        """
        Fetch the AnnotationInstance

        :returns: The fetched AnnotationInstance
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationInstance
        """
        return self._proxy.fetch()

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.AnnotationContext {}>".format(context)


class AnnotationList(ListResource):

    def __init__(self, version: Version, call_sid: str):
        """
        Initialize the AnnotationList

        :param version: Version that contains the resource
        :param call_sid: The unique SID identifier of the Call.

        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "call_sid": call_sid,
        }

    def get(self) -> AnnotationContext:
        """
        Constructs a AnnotationContext

        """
        return AnnotationContext(self._version, call_sid=self._solution["call_sid"])

    def __call__(self) -> AnnotationContext:
        """
        Constructs a AnnotationContext

        """
        return AnnotationContext(self._version, call_sid=self._solution["call_sid"])

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Insights.V1.AnnotationList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.AnnotationInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
