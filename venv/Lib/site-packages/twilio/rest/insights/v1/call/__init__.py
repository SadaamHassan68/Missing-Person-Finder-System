<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
<<<<<<< HEAD
from twilio.base.version import Version

from twilio.rest.insights.v1.call.annotation import AnnotationList
from twilio.rest.insights.v1.call.call_summary import CallSummaryList
from twilio.rest.insights.v1.call.event import EventList
from twilio.rest.insights.v1.call.metric import MetricList


class CallInstance(InstanceResource):
    """
    :ivar sid:
    :ivar url:
    :ivar links:
    """

    def __init__(
        self, version: Version, payload: Dict[str, Any], sid: Optional[str] = None
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.url: Optional[str] = payload.get("url")
        self.links: Optional[Dict[str, object]] = payload.get("links")

        self._solution = {
            "sid": sid or self.sid,
        }
        self._context: Optional[CallContext] = None

    @property
    def _proxy(self) -> "CallContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: CallContext for this CallInstance
        """
        if self._context is None:
            self._context = CallContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    def fetch(self) -> "CallInstance":
        """
        Fetch the CallInstance


        :returns: The fetched CallInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "CallInstance":
        """
        Asynchronous coroutine to fetch the CallInstance


        :returns: The fetched CallInstance
        """
        return await self._proxy.fetch_async()

    @property
    def annotation(self) -> AnnotationList:
        """
        Access the annotation
        """
        return self._proxy.annotation

    @property
    def summary(self) -> CallSummaryList:
        """
        Access the summary
        """
        return self._proxy.summary

    @property
    def events(self) -> EventList:
        """
        Access the events
        """
        return self._proxy.events

    @property
    def metrics(self) -> MetricList:
        """
        Access the metrics
        """
        return self._proxy.metrics

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.CallInstance {}>".format(context)


class CallContext(InstanceContext):

    def __init__(self, version: Version, sid: str):
        """
        Initialize the CallContext

        :param version: Version that contains the resource
        :param sid:
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/Voice/{sid}".format(**self._solution)

        self._annotation: Optional[AnnotationList] = None
        self._summary: Optional[CallSummaryList] = None
        self._events: Optional[EventList] = None
        self._metrics: Optional[MetricList] = None

    def fetch(self) -> CallInstance:
        """
        Fetch the CallInstance


        :returns: The fetched CallInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return CallInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> CallInstance:
        """
        Asynchronous coroutine to fetch the CallInstance


        :returns: The fetched CallInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return CallInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    @property
    def annotation(self) -> AnnotationList:
        """
        Access the annotation
        """
        if self._annotation is None:
            self._annotation = AnnotationList(
                self._version,
                self._solution["sid"],
            )
        return self._annotation

    @property
    def summary(self) -> CallSummaryList:
        """
        Access the summary
        """
        if self._summary is None:
            self._summary = CallSummaryList(
                self._version,
                self._solution["sid"],
            )
        return self._summary

    @property
    def events(self) -> EventList:
        """
        Access the events
        """
        if self._events is None:
            self._events = EventList(
                self._version,
                self._solution["sid"],
            )
        return self._events

    @property
    def metrics(self) -> MetricList:
        """
        Access the metrics
        """
        if self._metrics is None:
            self._metrics = MetricList(
                self._version,
                self._solution["sid"],
            )
        return self._metrics

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Insights.V1.CallContext {}>".format(context)
=======
from twilio.base.page import Page
from twilio.rest.insights.v1.call.annotation import AnnotationList
from twilio.rest.insights.v1.call.event import EventList
from twilio.rest.insights.v1.call.metric import MetricList
from twilio.rest.insights.v1.call.summary import CallSummaryList
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class CallList(ListResource):

<<<<<<< HEAD
    def __init__(self, version: Version):
        """
        Initialize the CallList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self, sid: str) -> CallContext:
        """
        Constructs a CallContext

        :param sid:
        """
        return CallContext(self._version, sid=sid)

    def __call__(self, sid: str) -> CallContext:
        """
        Constructs a CallContext

        :param sid:
        """
        return CallContext(self._version, sid=sid)

    def __repr__(self) -> str:
=======
    def __init__(self, version):
        """
        Initialize the CallList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.insights.v1.call.CallList
        :rtype: twilio.rest.insights.v1.call.CallList
        """
        super(CallList, self).__init__(version)

        # Path Solution
        self._solution = {}

    def get(self, sid):
        """
        Constructs a CallContext

        :param sid: The sid

        :returns: twilio.rest.insights.v1.call.CallContext
        :rtype: twilio.rest.insights.v1.call.CallContext
        """
        return CallContext(self._version, sid=sid, )

    def __call__(self, sid):
        """
        Constructs a CallContext

        :param sid: The sid

        :returns: twilio.rest.insights.v1.call.CallContext
        :rtype: twilio.rest.insights.v1.call.CallContext
        """
        return CallContext(self._version, sid=sid, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Insights.V1.CallList>"
=======
        :rtype: str
        """
        return '<Twilio.Insights.V1.CallList>'


class CallPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the CallPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.insights.v1.call.CallPage
        :rtype: twilio.rest.insights.v1.call.CallPage
        """
        super(CallPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of CallInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.call.CallInstance
        :rtype: twilio.rest.insights.v1.call.CallInstance
        """
        return CallInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.CallPage>'


class CallContext(InstanceContext):

    def __init__(self, version, sid):
        """
        Initialize the CallContext

        :param Version version: Version that contains the resource
        :param sid: The sid

        :returns: twilio.rest.insights.v1.call.CallContext
        :rtype: twilio.rest.insights.v1.call.CallContext
        """
        super(CallContext, self).__init__(version)

        # Path Solution
        self._solution = {'sid': sid, }
        self._uri = '/Voice/{sid}'.format(**self._solution)

        # Dependents
        self._events = None
        self._metrics = None
        self._summary = None
        self._annotation = None

    def fetch(self):
        """
        Fetch the CallInstance

        :returns: The fetched CallInstance
        :rtype: twilio.rest.insights.v1.call.CallInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return CallInstance(self._version, payload, sid=self._solution['sid'], )

    @property
    def events(self):
        """
        Access the events

        :returns: twilio.rest.insights.v1.call.event.EventList
        :rtype: twilio.rest.insights.v1.call.event.EventList
        """
        if self._events is None:
            self._events = EventList(self._version, call_sid=self._solution['sid'], )
        return self._events

    @property
    def metrics(self):
        """
        Access the metrics

        :returns: twilio.rest.insights.v1.call.metric.MetricList
        :rtype: twilio.rest.insights.v1.call.metric.MetricList
        """
        if self._metrics is None:
            self._metrics = MetricList(self._version, call_sid=self._solution['sid'], )
        return self._metrics

    @property
    def summary(self):
        """
        Access the summary

        :returns: twilio.rest.insights.v1.call.summary.CallSummaryList
        :rtype: twilio.rest.insights.v1.call.summary.CallSummaryList
        """
        if self._summary is None:
            self._summary = CallSummaryList(self._version, call_sid=self._solution['sid'], )
        return self._summary

    @property
    def annotation(self):
        """
        Access the annotation

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationList
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationList
        """
        if self._annotation is None:
            self._annotation = AnnotationList(self._version, call_sid=self._solution['sid'], )
        return self._annotation

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.CallContext {}>'.format(context)


class CallInstance(InstanceResource):

    def __init__(self, version, payload, sid=None):
        """
        Initialize the CallInstance

        :returns: twilio.rest.insights.v1.call.CallInstance
        :rtype: twilio.rest.insights.v1.call.CallInstance
        """
        super(CallInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'sid': payload.get('sid'),
            'url': payload.get('url'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {'sid': sid or self._properties['sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: CallContext for this CallInstance
        :rtype: twilio.rest.insights.v1.call.CallContext
        """
        if self._context is None:
            self._context = CallContext(self._version, sid=self._solution['sid'], )
        return self._context

    @property
    def sid(self):
        """
        :returns: The sid
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: The links
        :rtype: unicode
        """
        return self._properties['links']

    def fetch(self):
        """
        Fetch the CallInstance

        :returns: The fetched CallInstance
        :rtype: twilio.rest.insights.v1.call.CallInstance
        """
        return self._proxy.fetch()

    @property
    def events(self):
        """
        Access the events

        :returns: twilio.rest.insights.v1.call.event.EventList
        :rtype: twilio.rest.insights.v1.call.event.EventList
        """
        return self._proxy.events

    @property
    def metrics(self):
        """
        Access the metrics

        :returns: twilio.rest.insights.v1.call.metric.MetricList
        :rtype: twilio.rest.insights.v1.call.metric.MetricList
        """
        return self._proxy.metrics

    @property
    def summary(self):
        """
        Access the summary

        :returns: twilio.rest.insights.v1.call.summary.CallSummaryList
        :rtype: twilio.rest.insights.v1.call.summary.CallSummaryList
        """
        return self._proxy.summary

    @property
    def annotation(self):
        """
        Access the annotation

        :returns: twilio.rest.insights.v1.call.annotation.AnnotationList
        :rtype: twilio.rest.insights.v1.call.annotation.AnnotationList
        """
        return self._proxy.annotation

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.CallInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
