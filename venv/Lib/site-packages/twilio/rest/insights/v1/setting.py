<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Insights
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional, Union
from twilio.base import serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version


class SettingInstance(InstanceResource):
    """
    :ivar account_sid: The unique SID identifier of the Account.
    :ivar advanced_features: A boolean flag indicating whether Advanced Features for Voice Insights are enabled.
    :ivar voice_trace: A boolean flag indicating whether Voice Trace is enabled.
    :ivar url: The URL of this resource.
    """

    def __init__(self, version: Version, payload: Dict[str, Any]):
        super().__init__(version)

        self.account_sid: Optional[str] = payload.get("account_sid")
        self.advanced_features: Optional[bool] = payload.get("advanced_features")
        self.voice_trace: Optional[bool] = payload.get("voice_trace")
        self.url: Optional[str] = payload.get("url")

        self._context: Optional[SettingContext] = None

    @property
    def _proxy(self) -> "SettingContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: SettingContext for this SettingInstance
        """
        if self._context is None:
            self._context = SettingContext(
                self._version,
            )
        return self._context

    def fetch(
        self, subaccount_sid: Union[str, object] = values.unset
    ) -> "SettingInstance":
        """
        Fetch the SettingInstance

        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The fetched SettingInstance
        """
        return self._proxy.fetch(
            subaccount_sid=subaccount_sid,
        )

    async def fetch_async(
        self, subaccount_sid: Union[str, object] = values.unset
    ) -> "SettingInstance":
        """
        Asynchronous coroutine to fetch the SettingInstance

        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The fetched SettingInstance
        """
        return await self._proxy.fetch_async(
            subaccount_sid=subaccount_sid,
        )

    def update(
        self,
        advanced_features: Union[bool, object] = values.unset,
        voice_trace: Union[bool, object] = values.unset,
        subaccount_sid: Union[str, object] = values.unset,
    ) -> "SettingInstance":
        """
        Update the SettingInstance

        :param advanced_features: A boolean flag to enable Advanced Features for Voice Insights.
        :param voice_trace: A boolean flag to enable Voice Trace.
        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The updated SettingInstance
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class SettingList(ListResource):

    def __init__(self, version):
        """
        Initialize the SettingList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.insights.v1.setting.SettingList
        :rtype: twilio.rest.insights.v1.setting.SettingList
        """
        super(SettingList, self).__init__(version)

        # Path Solution
        self._solution = {}

    def get(self):
        """
        Constructs a SettingContext

        :returns: twilio.rest.insights.v1.setting.SettingContext
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        return SettingContext(self._version, )

    def __call__(self):
        """
        Constructs a SettingContext

        :returns: twilio.rest.insights.v1.setting.SettingContext
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        return SettingContext(self._version, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.SettingList>'


class SettingPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the SettingPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.insights.v1.setting.SettingPage
        :rtype: twilio.rest.insights.v1.setting.SettingPage
        """
        super(SettingPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of SettingInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.setting.SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
        """
        return SettingInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.SettingPage>'


class SettingContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the SettingContext

        :param Version version: Version that contains the resource

        :returns: twilio.rest.insights.v1.setting.SettingContext
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        super(SettingContext, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/Voice/Settings'.format(**self._solution)

    def fetch(self, subaccount_sid=values.unset):
        """
        Fetch the SettingInstance

        :param unicode subaccount_sid: The subaccount_sid

        :returns: The fetched SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
        """
        data = values.of({'SubaccountSid': subaccount_sid, })

        payload = self._version.fetch(method='GET', uri=self._uri, params=data, )

        return SettingInstance(self._version, payload, )

    def update(self, advanced_features=values.unset, voice_trace=values.unset,
               subaccount_sid=values.unset):
        """
        Update the SettingInstance

        :param bool advanced_features: The advanced_features
        :param bool voice_trace: The voice_trace
        :param unicode subaccount_sid: The subaccount_sid

        :returns: The updated SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
        """
        data = values.of({
            'AdvancedFeatures': advanced_features,
            'VoiceTrace': voice_trace,
            'SubaccountSid': subaccount_sid,
        })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return SettingInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.SettingContext {}>'.format(context)


class SettingInstance(InstanceResource):

    def __init__(self, version, payload):
        """
        Initialize the SettingInstance

        :returns: twilio.rest.insights.v1.setting.SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
        """
        super(SettingInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload.get('account_sid'),
            'advanced_features': payload.get('advanced_features'),
            'voice_trace': payload.get('voice_trace'),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {}

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: SettingContext for this SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingContext
        """
        if self._context is None:
            self._context = SettingContext(self._version, )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def advanced_features(self):
        """
        :returns: The advanced_features
        :rtype: bool
        """
        return self._properties['advanced_features']

    @property
    def voice_trace(self):
        """
        :returns: The voice_trace
        :rtype: bool
        """
        return self._properties['voice_trace']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self, subaccount_sid=values.unset):
        """
        Fetch the SettingInstance

        :param unicode subaccount_sid: The subaccount_sid

        :returns: The fetched SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
        """
        return self._proxy.fetch(subaccount_sid=subaccount_sid, )

    def update(self, advanced_features=values.unset, voice_trace=values.unset,
               subaccount_sid=values.unset):
        """
        Update the SettingInstance

        :param bool advanced_features: The advanced_features
        :param bool voice_trace: The voice_trace
        :param unicode subaccount_sid: The subaccount_sid

        :returns: The updated SettingInstance
        :rtype: twilio.rest.insights.v1.setting.SettingInstance
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.update(
            advanced_features=advanced_features,
            voice_trace=voice_trace,
            subaccount_sid=subaccount_sid,
        )

<<<<<<< HEAD
    async def update_async(
        self,
        advanced_features: Union[bool, object] = values.unset,
        voice_trace: Union[bool, object] = values.unset,
        subaccount_sid: Union[str, object] = values.unset,
    ) -> "SettingInstance":
        """
        Asynchronous coroutine to update the SettingInstance

        :param advanced_features: A boolean flag to enable Advanced Features for Voice Insights.
        :param voice_trace: A boolean flag to enable Voice Trace.
        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The updated SettingInstance
        """
        return await self._proxy.update_async(
            advanced_features=advanced_features,
            voice_trace=voice_trace,
            subaccount_sid=subaccount_sid,
        )

    def __repr__(self) -> str:
=======
    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """

        return "<Twilio.Insights.V1.SettingInstance>"


class SettingContext(InstanceContext):

    def __init__(self, version: Version):
        """
        Initialize the SettingContext

        :param version: Version that contains the resource
        """
        super().__init__(version)

        self._uri = "/Voice/Settings"

    def fetch(
        self, subaccount_sid: Union[str, object] = values.unset
    ) -> SettingInstance:
        """
        Fetch the SettingInstance

        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The fetched SettingInstance
        """

        data = values.of(
            {
                "SubaccountSid": subaccount_sid,
            }
        )

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(
            method="GET", uri=self._uri, params=data, headers=headers
        )

        return SettingInstance(
            self._version,
            payload,
        )

    async def fetch_async(
        self, subaccount_sid: Union[str, object] = values.unset
    ) -> SettingInstance:
        """
        Asynchronous coroutine to fetch the SettingInstance

        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The fetched SettingInstance
        """

        data = values.of(
            {
                "SubaccountSid": subaccount_sid,
            }
        )

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )

        return SettingInstance(
            self._version,
            payload,
        )

    def update(
        self,
        advanced_features: Union[bool, object] = values.unset,
        voice_trace: Union[bool, object] = values.unset,
        subaccount_sid: Union[str, object] = values.unset,
    ) -> SettingInstance:
        """
        Update the SettingInstance

        :param advanced_features: A boolean flag to enable Advanced Features for Voice Insights.
        :param voice_trace: A boolean flag to enable Voice Trace.
        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The updated SettingInstance
        """

        data = values.of(
            {
                "AdvancedFeatures": serialize.boolean_to_string(advanced_features),
                "VoiceTrace": serialize.boolean_to_string(voice_trace),
                "SubaccountSid": subaccount_sid,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return SettingInstance(self._version, payload)

    async def update_async(
        self,
        advanced_features: Union[bool, object] = values.unset,
        voice_trace: Union[bool, object] = values.unset,
        subaccount_sid: Union[str, object] = values.unset,
    ) -> SettingInstance:
        """
        Asynchronous coroutine to update the SettingInstance

        :param advanced_features: A boolean flag to enable Advanced Features for Voice Insights.
        :param voice_trace: A boolean flag to enable Voice Trace.
        :param subaccount_sid: The unique SID identifier of the Subaccount.

        :returns: The updated SettingInstance
        """

        data = values.of(
            {
                "AdvancedFeatures": serialize.boolean_to_string(advanced_features),
                "VoiceTrace": serialize.boolean_to_string(voice_trace),
                "SubaccountSid": subaccount_sid,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return SettingInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """

        return "<Twilio.Insights.V1.SettingContext>"


class SettingList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the SettingList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self) -> SettingContext:
        """
        Constructs a SettingContext

        """
        return SettingContext(self._version)

    def __call__(self) -> SettingContext:
        """
        Constructs a SettingContext

        """
        return SettingContext(self._version)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Insights.V1.SettingList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.SettingInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
