<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Conversations
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, Optional, Union
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
<<<<<<< HEAD
from twilio.base.version import Version

from twilio.rest.conversations.v1.configuration.webhook import WebhookList


class ConfigurationInstance(InstanceResource):
    """
    :ivar account_sid: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this configuration.
    :ivar default_chat_service_sid: The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) used when creating a conversation.
    :ivar default_messaging_service_sid: The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) used when creating a conversation.
    :ivar default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
    :ivar default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.
    :ivar url: An absolute API resource URL for this global configuration.
    :ivar links: Contains absolute API resource URLs to access the webhook and default service configurations.
    """

    def __init__(self, version: Version, payload: Dict[str, Any]):
        super().__init__(version)

        self.account_sid: Optional[str] = payload.get("account_sid")
        self.default_chat_service_sid: Optional[str] = payload.get(
            "default_chat_service_sid"
        )
        self.default_messaging_service_sid: Optional[str] = payload.get(
            "default_messaging_service_sid"
        )
        self.default_inactive_timer: Optional[str] = payload.get(
            "default_inactive_timer"
        )
        self.default_closed_timer: Optional[str] = payload.get("default_closed_timer")
        self.url: Optional[str] = payload.get("url")
        self.links: Optional[Dict[str, object]] = payload.get("links")

        self._context: Optional[ConfigurationContext] = None

    @property
    def _proxy(self) -> "ConfigurationContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: ConfigurationContext for this ConfigurationInstance
        """
        if self._context is None:
            self._context = ConfigurationContext(
                self._version,
            )
        return self._context

    def fetch(self) -> "ConfigurationInstance":
        """
        Fetch the ConfigurationInstance


        :returns: The fetched ConfigurationInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "ConfigurationInstance":
        """
        Asynchronous coroutine to fetch the ConfigurationInstance


        :returns: The fetched ConfigurationInstance
        """
        return await self._proxy.fetch_async()

    def update(
        self,
        default_chat_service_sid: Union[str, object] = values.unset,
        default_messaging_service_sid: Union[str, object] = values.unset,
        default_inactive_timer: Union[str, object] = values.unset,
        default_closed_timer: Union[str, object] = values.unset,
    ) -> "ConfigurationInstance":
        """
        Update the ConfigurationInstance

        :param default_chat_service_sid: The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
        :param default_messaging_service_sid: The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to use when creating a conversation.
        :param default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
        :param default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.

        :returns: The updated ConfigurationInstance
=======
from twilio.base.page import Page
from twilio.rest.conversations.v1.configuration.webhook import WebhookList


class ConfigurationList(ListResource):

    def __init__(self, version):
        """
        Initialize the ConfigurationList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationList
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationList
        """
        super(ConfigurationList, self).__init__(version)

        # Path Solution
        self._solution = {}

        # Components
        self._webhooks = None

    @property
    def webhooks(self):
        """
        Access the webhooks

        :returns: twilio.rest.conversations.v1.configuration.webhook.WebhookList
        :rtype: twilio.rest.conversations.v1.configuration.webhook.WebhookList
        """
        if self._webhooks is None:
            self._webhooks = WebhookList(self._version, )
        return self._webhooks

    def get(self):
        """
        Constructs a ConfigurationContext

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version, )

    def __call__(self):
        """
        Constructs a ConfigurationContext

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        return ConfigurationContext(self._version, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationList>'


class ConfigurationPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ConfigurationPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationPage
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationPage
        """
        super(ConfigurationPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ConfigurationInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        """
        return ConfigurationInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ConfigurationPage>'


class ConfigurationContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the ConfigurationContext

        :param Version version: Version that contains the resource

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationContext
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        super(ConfigurationContext, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/Configuration'.format(**self._solution)

    def fetch(self):
        """
        Fetch the ConfigurationInstance

        :returns: The fetched ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ConfigurationInstance(self._version, payload, )

    def update(self, default_chat_service_sid=values.unset,
               default_messaging_service_sid=values.unset,
               default_inactive_timer=values.unset,
               default_closed_timer=values.unset):
        """
        Update the ConfigurationInstance

        :param unicode default_chat_service_sid: The SID of the default Conversation Service that every new conversation will be associated with.
        :param unicode default_messaging_service_sid: The SID of the default Messaging Service that every new conversation will be associated with.
        :param unicode default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state.
        :param unicode default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state.

        :returns: The updated ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        """
        data = values.of({
            'DefaultChatServiceSid': default_chat_service_sid,
            'DefaultMessagingServiceSid': default_messaging_service_sid,
            'DefaultInactiveTimer': default_inactive_timer,
            'DefaultClosedTimer': default_closed_timer,
        })

        payload = self._version.update(method='POST', uri=self._uri, data=data, )

        return ConfigurationInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Conversations.V1.ConfigurationContext {}>'.format(context)


class ConfigurationInstance(InstanceResource):

    def __init__(self, version, payload):
        """
        Initialize the ConfigurationInstance

        :returns: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        """
        super(ConfigurationInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload.get('account_sid'),
            'default_chat_service_sid': payload.get('default_chat_service_sid'),
            'default_messaging_service_sid': payload.get('default_messaging_service_sid'),
            'default_inactive_timer': payload.get('default_inactive_timer'),
            'default_closed_timer': payload.get('default_closed_timer'),
            'url': payload.get('url'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {}

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: ConfigurationContext for this ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationContext
        """
        if self._context is None:
            self._context = ConfigurationContext(self._version, )
        return self._context

    @property
    def account_sid(self):
        """
        :returns: The SID of the Account responsible for this configuration.
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def default_chat_service_sid(self):
        """
        :returns: The SID of the default Conversation Service that every new conversation is associated with.
        :rtype: unicode
        """
        return self._properties['default_chat_service_sid']

    @property
    def default_messaging_service_sid(self):
        """
        :returns: The SID of the default Messaging Service that every new conversation is associated with.
        :rtype: unicode
        """
        return self._properties['default_messaging_service_sid']

    @property
    def default_inactive_timer(self):
        """
        :returns: Default ISO8601 duration when conversation will be switched to `inactive` state.
        :rtype: unicode
        """
        return self._properties['default_inactive_timer']

    @property
    def default_closed_timer(self):
        """
        :returns: Default ISO8601 duration when conversation will be switched to `closed` state.
        :rtype: unicode
        """
        return self._properties['default_closed_timer']

    @property
    def url(self):
        """
        :returns: An absolute URL for this global configuration.
        :rtype: unicode
        """
        return self._properties['url']

    @property
    def links(self):
        """
        :returns: Absolute URLs to access the webhook and default service configurations.
        :rtype: unicode
        """
        return self._properties['links']

    def fetch(self):
        """
        Fetch the ConfigurationInstance

        :returns: The fetched ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
        """
        return self._proxy.fetch()

    def update(self, default_chat_service_sid=values.unset,
               default_messaging_service_sid=values.unset,
               default_inactive_timer=values.unset,
               default_closed_timer=values.unset):
        """
        Update the ConfigurationInstance

        :param unicode default_chat_service_sid: The SID of the default Conversation Service that every new conversation will be associated with.
        :param unicode default_messaging_service_sid: The SID of the default Messaging Service that every new conversation will be associated with.
        :param unicode default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state.
        :param unicode default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state.

        :returns: The updated ConfigurationInstance
        :rtype: twilio.rest.conversations.v1.configuration.ConfigurationInstance
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.update(
            default_chat_service_sid=default_chat_service_sid,
            default_messaging_service_sid=default_messaging_service_sid,
            default_inactive_timer=default_inactive_timer,
            default_closed_timer=default_closed_timer,
        )

<<<<<<< HEAD
    async def update_async(
        self,
        default_chat_service_sid: Union[str, object] = values.unset,
        default_messaging_service_sid: Union[str, object] = values.unset,
        default_inactive_timer: Union[str, object] = values.unset,
        default_closed_timer: Union[str, object] = values.unset,
    ) -> "ConfigurationInstance":
        """
        Asynchronous coroutine to update the ConfigurationInstance

        :param default_chat_service_sid: The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
        :param default_messaging_service_sid: The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to use when creating a conversation.
        :param default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
        :param default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.

        :returns: The updated ConfigurationInstance
        """
        return await self._proxy.update_async(
            default_chat_service_sid=default_chat_service_sid,
            default_messaging_service_sid=default_messaging_service_sid,
            default_inactive_timer=default_inactive_timer,
            default_closed_timer=default_closed_timer,
        )

    def __repr__(self) -> str:
=======
    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """

        return "<Twilio.Conversations.V1.ConfigurationInstance>"


class ConfigurationContext(InstanceContext):

    def __init__(self, version: Version):
        """
        Initialize the ConfigurationContext

        :param version: Version that contains the resource
        """
        super().__init__(version)

        self._uri = "/Configuration"

    def fetch(self) -> ConfigurationInstance:
        """
        Fetch the ConfigurationInstance


        :returns: The fetched ConfigurationInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return ConfigurationInstance(
            self._version,
            payload,
        )

    async def fetch_async(self) -> ConfigurationInstance:
        """
        Asynchronous coroutine to fetch the ConfigurationInstance


        :returns: The fetched ConfigurationInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return ConfigurationInstance(
            self._version,
            payload,
        )

    def update(
        self,
        default_chat_service_sid: Union[str, object] = values.unset,
        default_messaging_service_sid: Union[str, object] = values.unset,
        default_inactive_timer: Union[str, object] = values.unset,
        default_closed_timer: Union[str, object] = values.unset,
    ) -> ConfigurationInstance:
        """
        Update the ConfigurationInstance

        :param default_chat_service_sid: The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
        :param default_messaging_service_sid: The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to use when creating a conversation.
        :param default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
        :param default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.

        :returns: The updated ConfigurationInstance
        """

        data = values.of(
            {
                "DefaultChatServiceSid": default_chat_service_sid,
                "DefaultMessagingServiceSid": default_messaging_service_sid,
                "DefaultInactiveTimer": default_inactive_timer,
                "DefaultClosedTimer": default_closed_timer,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = self._version.update(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ConfigurationInstance(self._version, payload)

    async def update_async(
        self,
        default_chat_service_sid: Union[str, object] = values.unset,
        default_messaging_service_sid: Union[str, object] = values.unset,
        default_inactive_timer: Union[str, object] = values.unset,
        default_closed_timer: Union[str, object] = values.unset,
    ) -> ConfigurationInstance:
        """
        Asynchronous coroutine to update the ConfigurationInstance

        :param default_chat_service_sid: The SID of the default [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) to use when creating a conversation.
        :param default_messaging_service_sid: The SID of the default [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to use when creating a conversation.
        :param default_inactive_timer: Default ISO8601 duration when conversation will be switched to `inactive` state. Minimum value for this timer is 1 minute.
        :param default_closed_timer: Default ISO8601 duration when conversation will be switched to `closed` state. Minimum value for this timer is 10 minutes.

        :returns: The updated ConfigurationInstance
        """

        data = values.of(
            {
                "DefaultChatServiceSid": default_chat_service_sid,
                "DefaultMessagingServiceSid": default_messaging_service_sid,
                "DefaultInactiveTimer": default_inactive_timer,
                "DefaultClosedTimer": default_closed_timer,
            }
        )
        headers = values.of({})

        headers["Content-Type"] = "application/x-www-form-urlencoded"

        headers["Accept"] = "application/json"

        payload = await self._version.update_async(
            method="POST", uri=self._uri, data=data, headers=headers
        )

        return ConfigurationInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """

        return "<Twilio.Conversations.V1.ConfigurationContext>"


class ConfigurationList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ConfigurationList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._webhooks: Optional[WebhookList] = None

    @property
    def webhooks(self) -> WebhookList:
        """
        Access the webhooks
        """
        if self._webhooks is None:
            self._webhooks = WebhookList(self._version)
        return self._webhooks

    def get(self) -> ConfigurationContext:
        """
        Constructs a ConfigurationContext

        """
        return ConfigurationContext(self._version)

    def __call__(self) -> ConfigurationContext:
        """
        Constructs a ConfigurationContext

        """
        return ConfigurationContext(self._version)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Conversations.V1.ConfigurationList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Conversations.V1.ConfigurationInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
