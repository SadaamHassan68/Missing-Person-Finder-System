<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Conversations
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from twilio.base import deserialize, values

from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
from twilio.base.page import Page


=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class ParticipantConversationList(ListResource):

    def __init__(self, version):
        """
        Initialize the ParticipantConversationList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationList
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationList
        """
        super(ParticipantConversationList, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/ParticipantConversations'.format(**self._solution)

    def stream(self, identity=values.unset, address=values.unset, limit=None,
               page_size=None):
        """
        Streams ParticipantConversationInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param unicode identity: A unique string identifier for the conversation participant as Conversation User.
        :param unicode address: A unique string identifier for the conversation participant who's not a Conversation User.
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(identity=identity, address=address, page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, identity=values.unset, address=values.unset, limit=None,
             page_size=None):
        """
        Lists ParticipantConversationInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param unicode identity: A unique string identifier for the conversation participant as Conversation User.
        :param unicode address: A unique string identifier for the conversation participant who's not a Conversation User.
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance]
        """
        return list(self.stream(identity=identity, address=address, limit=limit, page_size=page_size, ))

    def page(self, identity=values.unset, address=values.unset,
             page_token=values.unset, page_number=values.unset,
             page_size=values.unset):
        """
        Retrieve a single page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param unicode identity: A unique string identifier for the conversation participant as Conversation User.
        :param unicode address: A unique string identifier for the conversation participant who's not a Conversation User.
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of ParticipantConversationInstance
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationPage
        """
        data = values.of({
            'Identity': identity,
            'Address': address,
            'PageToken': page_token,
            'Page': page_number,
            'PageSize': page_size,
        })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return ParticipantConversationPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of ParticipantConversationInstance
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return ParticipantConversationPage(self._version, response, self._solution)

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ParticipantConversationList>'


class ParticipantConversationPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the ParticipantConversationPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationPage
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationPage
        """
        super(ParticipantConversationPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ParticipantConversationInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance
        """
        return ParticipantConversationInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ParticipantConversationPage>'


>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
class ParticipantConversationInstance(InstanceResource):

    class State(object):
        INACTIVE = "inactive"
        ACTIVE = "active"
        CLOSED = "closed"

<<<<<<< HEAD
    """
    :ivar account_sid: The unique ID of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this conversation.
    :ivar chat_service_sid: The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
    :ivar participant_sid: The unique ID of the [Participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource).
    :ivar participant_user_sid: The unique string that identifies the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource).
    :ivar participant_identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
    :ivar participant_messaging_binding: Information about how this participant exchanges messages with the conversation. A JSON parameter consisting of type and address fields of the participant.
    :ivar conversation_sid: The unique ID of the [Conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) this Participant belongs to.
    :ivar conversation_unique_name: An application-defined string that uniquely identifies the Conversation resource.
    :ivar conversation_friendly_name: The human-readable name of this conversation, limited to 256 characters. Optional.
    :ivar conversation_attributes: An optional string metadata field you can use to store any data you wish. The string value must contain structurally valid JSON if specified.  **Note** that if the attributes are not set \"{}\" will be returned.
    :ivar conversation_date_created: The date that this conversation was created, given in ISO 8601 format.
    :ivar conversation_date_updated: The date that this conversation was last updated, given in ISO 8601 format.
    :ivar conversation_created_by: Identity of the creator of this Conversation.
    :ivar conversation_state: 
    :ivar conversation_timers: Timer date values representing state update for this conversation.
    :ivar links: Contains absolute URLs to access the [participant](https://www.twilio.com/docs/conversations/api/conversation-participant-resource) and [conversation](https://www.twilio.com/docs/conversations/api/conversation-resource) of this conversation.
    """

    def __init__(self, version: Version, payload: Dict[str, Any]):
        super().__init__(version)

        self.account_sid: Optional[str] = payload.get("account_sid")
        self.chat_service_sid: Optional[str] = payload.get("chat_service_sid")
        self.participant_sid: Optional[str] = payload.get("participant_sid")
        self.participant_user_sid: Optional[str] = payload.get("participant_user_sid")
        self.participant_identity: Optional[str] = payload.get("participant_identity")
        self.participant_messaging_binding: Optional[Dict[str, object]] = payload.get(
            "participant_messaging_binding"
        )
        self.conversation_sid: Optional[str] = payload.get("conversation_sid")
        self.conversation_unique_name: Optional[str] = payload.get(
            "conversation_unique_name"
        )
        self.conversation_friendly_name: Optional[str] = payload.get(
            "conversation_friendly_name"
        )
        self.conversation_attributes: Optional[str] = payload.get(
            "conversation_attributes"
        )
        self.conversation_date_created: Optional[datetime] = (
            deserialize.iso8601_datetime(payload.get("conversation_date_created"))
        )
        self.conversation_date_updated: Optional[datetime] = (
            deserialize.iso8601_datetime(payload.get("conversation_date_updated"))
        )
        self.conversation_created_by: Optional[str] = payload.get(
            "conversation_created_by"
        )
        self.conversation_state: Optional["ParticipantConversationInstance.State"] = (
            payload.get("conversation_state")
        )
        self.conversation_timers: Optional[Dict[str, object]] = payload.get(
            "conversation_timers"
        )
        self.links: Optional[Dict[str, object]] = payload.get("links")

    def __repr__(self) -> str:
=======
    def __init__(self, version, payload):
        """
        Initialize the ParticipantConversationInstance

        :returns: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance
        :rtype: twilio.rest.conversations.v1.participant_conversation.ParticipantConversationInstance
        """
        super(ParticipantConversationInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'account_sid': payload.get('account_sid'),
            'chat_service_sid': payload.get('chat_service_sid'),
            'participant_sid': payload.get('participant_sid'),
            'participant_user_sid': payload.get('participant_user_sid'),
            'participant_identity': payload.get('participant_identity'),
            'participant_messaging_binding': payload.get('participant_messaging_binding'),
            'conversation_sid': payload.get('conversation_sid'),
            'conversation_unique_name': payload.get('conversation_unique_name'),
            'conversation_friendly_name': payload.get('conversation_friendly_name'),
            'conversation_attributes': payload.get('conversation_attributes'),
            'conversation_date_created': deserialize.iso8601_datetime(payload.get('conversation_date_created')),
            'conversation_date_updated': deserialize.iso8601_datetime(payload.get('conversation_date_updated')),
            'conversation_created_by': payload.get('conversation_created_by'),
            'conversation_state': payload.get('conversation_state'),
            'conversation_timers': payload.get('conversation_timers'),
            'links': payload.get('links'),
        }

        # Context
        self._context = None
        self._solution = {}

    @property
    def account_sid(self):
        """
        :returns: The unique ID of the Account responsible for this conversation.
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def chat_service_sid(self):
        """
        :returns: The unique ID of the Conversation Service this conversation belongs to.
        :rtype: unicode
        """
        return self._properties['chat_service_sid']

    @property
    def participant_sid(self):
        """
        :returns: The unique ID of the Participant.
        :rtype: unicode
        """
        return self._properties['participant_sid']

    @property
    def participant_user_sid(self):
        """
        :returns: The unique ID for the conversation participant as Conversation User.
        :rtype: unicode
        """
        return self._properties['participant_user_sid']

    @property
    def participant_identity(self):
        """
        :returns: A unique string identifier for the conversation participant as Conversation User.
        :rtype: unicode
        """
        return self._properties['participant_identity']

    @property
    def participant_messaging_binding(self):
        """
        :returns: Information about how this participant exchanges messages with the conversation.
        :rtype: dict
        """
        return self._properties['participant_messaging_binding']

    @property
    def conversation_sid(self):
        """
        :returns: The unique ID of the Conversation this Participant belongs to.
        :rtype: unicode
        """
        return self._properties['conversation_sid']

    @property
    def conversation_unique_name(self):
        """
        :returns: An application-defined string that uniquely identifies the Conversation resource
        :rtype: unicode
        """
        return self._properties['conversation_unique_name']

    @property
    def conversation_friendly_name(self):
        """
        :returns: The human-readable name of this conversation.
        :rtype: unicode
        """
        return self._properties['conversation_friendly_name']

    @property
    def conversation_attributes(self):
        """
        :returns: An optional string metadata field you can use to store any data you wish.
        :rtype: unicode
        """
        return self._properties['conversation_attributes']

    @property
    def conversation_date_created(self):
        """
        :returns: The date that this conversation was created.
        :rtype: datetime
        """
        return self._properties['conversation_date_created']

    @property
    def conversation_date_updated(self):
        """
        :returns: The date that this conversation was last updated.
        :rtype: datetime
        """
        return self._properties['conversation_date_updated']

    @property
    def conversation_created_by(self):
        """
        :returns: Creator of this conversation.
        :rtype: unicode
        """
        return self._properties['conversation_created_by']

    @property
    def conversation_state(self):
        """
        :returns: The current state of this User Conversation
        :rtype: ParticipantConversationInstance.State
        """
        return self._properties['conversation_state']

    @property
    def conversation_timers(self):
        """
        :returns: Timer date values for this conversation.
        :rtype: dict
        """
        return self._properties['conversation_timers']

    @property
    def links(self):
        """
        :returns: Absolute URLs to access the participant and conversation of this Participant Conversation.
        :rtype: unicode
        """
        return self._properties['links']

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """

        return "<Twilio.Conversations.V1.ParticipantConversationInstance>"


class ParticipantConversationPage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> ParticipantConversationInstance:
        """
        Build an instance of ParticipantConversationInstance

        :param payload: Payload response from the API
        """
        return ParticipantConversationInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Conversations.V1.ParticipantConversationPage>"


class ParticipantConversationList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the ParticipantConversationList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/ParticipantConversations"

    def stream(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[ParticipantConversationInstance]:
        """
        Streams ParticipantConversationInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param str address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            identity=identity, address=address, page_size=limits["page_size"]
        )

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[ParticipantConversationInstance]:
        """
        Asynchronously streams ParticipantConversationInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param str identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param str address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            identity=identity, address=address, page_size=limits["page_size"]
        )

        return self._version.stream_async(page, limits["limit"])

    def list(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ParticipantConversationInstance]:
        """
        Lists ParticipantConversationInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param str address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(
            self.stream(
                identity=identity,
                address=address,
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[ParticipantConversationInstance]:
        """
        Asynchronously lists ParticipantConversationInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param str identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param str address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [
            record
            async for record in await self.stream_async(
                identity=identity,
                address=address,
                limit=limit,
                page_size=page_size,
            )
        ]

    def page(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ParticipantConversationPage:
        """
        Retrieve a single page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ParticipantConversationInstance
        """
        data = values.of(
            {
                "Identity": identity,
                "Address": address,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = self._version.page(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return ParticipantConversationPage(self._version, response)

    async def page_async(
        self,
        identity: Union[str, object] = values.unset,
        address: Union[str, object] = values.unset,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> ParticipantConversationPage:
        """
        Asynchronously retrieve a single page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param identity: A unique string identifier for the conversation participant as [Conversation User](https://www.twilio.com/docs/conversations/api/user-resource). This parameter is non-null if (and only if) the participant is using the Conversations SDK to communicate. Limited to 256 characters.
        :param address: A unique string identifier for the conversation participant who's not a Conversation User. This parameter could be found in messaging_binding.address field of Participant resource. It should be url-encoded.
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of ParticipantConversationInstance
        """
        data = values.of(
            {
                "Identity": identity,
                "Address": address,
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return ParticipantConversationPage(self._version, response)

    def get_page(self, target_url: str) -> ParticipantConversationPage:
        """
        Retrieve a specific page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ParticipantConversationInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return ParticipantConversationPage(self._version, response)

    async def get_page_async(self, target_url: str) -> ParticipantConversationPage:
        """
        Asynchronously retrieve a specific page of ParticipantConversationInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of ParticipantConversationInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return ParticipantConversationPage(self._version, response)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Conversations.V1.ParticipantConversationList>"
=======
        :rtype: str
        """
        return '<Twilio.Conversations.V1.ParticipantConversationInstance>'
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
