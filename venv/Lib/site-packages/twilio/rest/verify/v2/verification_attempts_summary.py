<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Verify
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from datetime import datetime
from typing import Any, Dict, Optional, Union
from twilio.base import deserialize, serialize, values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.version import Version
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import serialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class VerificationAttemptsSummaryList(ListResource):

    def __init__(self, version):
        """
        Initialize the VerificationAttemptsSummaryList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryList
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryList
        """
        super(VerificationAttemptsSummaryList, self).__init__(version)

        # Path Solution
        self._solution = {}

    def get(self):
        """
        Constructs a VerificationAttemptsSummaryContext

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        """
        return VerificationAttemptsSummaryContext(self._version, )

    def __call__(self):
        """
        Constructs a VerificationAttemptsSummaryContext

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        """
        return VerificationAttemptsSummaryContext(self._version, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Verify.V2.VerificationAttemptsSummaryList>'


class VerificationAttemptsSummaryPage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the VerificationAttemptsSummaryPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryPage
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryPage
        """
        super(VerificationAttemptsSummaryPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of VerificationAttemptsSummaryInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
        """
        return VerificationAttemptsSummaryInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Verify.V2.VerificationAttemptsSummaryPage>'


class VerificationAttemptsSummaryContext(InstanceContext):

    def __init__(self, version):
        """
        Initialize the VerificationAttemptsSummaryContext

        :param Version version: Version that contains the resource

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        """
        super(VerificationAttemptsSummaryContext, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/Attempts/Summary'.format(**self._solution)

    def fetch(self, verify_service_sid=values.unset,
              date_created_after=values.unset, date_created_before=values.unset,
              country=values.unset, channel=values.unset,
              destination_prefix=values.unset):
        """
        Fetch the VerificationAttemptsSummaryInstance

        :param unicode verify_service_sid: Filter the verification attempts considered on the summary by verify service.
        :param datetime date_created_after: Consider verification attempts create after this date on the summary.
        :param datetime date_created_before: Consider verification attempts created before this date on the summary.
        :param unicode country: Filter verification attempts considered on the summary by destination country.
        :param VerificationAttemptsSummaryInstance.Channels channel: Filter verification attempts considered on the summary by communication channel.
        :param unicode destination_prefix: Filters the attempts considered on the summary by destination prefix.

        :returns: The fetched VerificationAttemptsSummaryInstance
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
        """
        data = values.of({
            'VerifyServiceSid': verify_service_sid,
            'DateCreatedAfter': serialize.iso8601_datetime(date_created_after),
            'DateCreatedBefore': serialize.iso8601_datetime(date_created_before),
            'Country': country,
            'Channel': channel,
            'DestinationPrefix': destination_prefix,
        })

        payload = self._version.fetch(method='GET', uri=self._uri, params=data, )

        return VerificationAttemptsSummaryInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Verify.V2.VerificationAttemptsSummaryContext {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a


class VerificationAttemptsSummaryInstance(InstanceResource):

    class Channels(object):
        SMS = "sms"
        CALL = "call"
        EMAIL = "email"
        WHATSAPP = "whatsapp"

<<<<<<< HEAD
    """
    :ivar total_attempts: Total of attempts made according to the provided filters
    :ivar total_converted: Total of  attempts made that were confirmed by the end user, according to the provided filters.
    :ivar total_unconverted: Total of attempts made that were not confirmed by the end user, according to the provided filters.
    :ivar conversion_rate_percentage: Percentage of the confirmed messages over the total, defined by (total_converted/total_attempts)*100. 
    :ivar url: 
    """

    def __init__(self, version: Version, payload: Dict[str, Any]):
        super().__init__(version)

        self.total_attempts: Optional[int] = deserialize.integer(
            payload.get("total_attempts")
        )
        self.total_converted: Optional[int] = deserialize.integer(
            payload.get("total_converted")
        )
        self.total_unconverted: Optional[int] = deserialize.integer(
            payload.get("total_unconverted")
        )
        self.conversion_rate_percentage: Optional[float] = deserialize.decimal(
            payload.get("conversion_rate_percentage")
        )
        self.url: Optional[str] = payload.get("url")

        self._context: Optional[VerificationAttemptsSummaryContext] = None

    @property
    def _proxy(self) -> "VerificationAttemptsSummaryContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: VerificationAttemptsSummaryContext for this VerificationAttemptsSummaryInstance
        """
        if self._context is None:
            self._context = VerificationAttemptsSummaryContext(
                self._version,
            )
        return self._context

    def fetch(
        self,
        verify_service_sid: Union[str, object] = values.unset,
        date_created_after: Union[datetime, object] = values.unset,
        date_created_before: Union[datetime, object] = values.unset,
        country: Union[str, object] = values.unset,
        channel: Union[
            "VerificationAttemptsSummaryInstance.Channels", object
        ] = values.unset,
        destination_prefix: Union[str, object] = values.unset,
    ) -> "VerificationAttemptsSummaryInstance":
        """
        Fetch the VerificationAttemptsSummaryInstance

        :param verify_service_sid: Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
        :param date_created_after: Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param date_created_before: Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param country: Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
        :param channel: Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are `SMS`, `CALL` and `WHATSAPP`
        :param destination_prefix: Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.

        :returns: The fetched VerificationAttemptsSummaryInstance
=======
    def __init__(self, version, payload):
        """
        Initialize the VerificationAttemptsSummaryInstance

        :returns: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
        """
        super(VerificationAttemptsSummaryInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'total_attempts': deserialize.integer(payload.get('total_attempts')),
            'total_converted': deserialize.integer(payload.get('total_converted')),
            'total_unconverted': deserialize.integer(payload.get('total_unconverted')),
            'conversion_rate_percentage': deserialize.decimal(payload.get('conversion_rate_percentage')),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {}

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: VerificationAttemptsSummaryContext for this VerificationAttemptsSummaryInstance
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryContext
        """
        if self._context is None:
            self._context = VerificationAttemptsSummaryContext(self._version, )
        return self._context

    @property
    def total_attempts(self):
        """
        :returns: Total of attempts made.
        :rtype: unicode
        """
        return self._properties['total_attempts']

    @property
    def total_converted(self):
        """
        :returns: Total of attempts confirmed by the end user.
        :rtype: unicode
        """
        return self._properties['total_converted']

    @property
    def total_unconverted(self):
        """
        :returns: Total of attempts made that were not confirmed by the end user.
        :rtype: unicode
        """
        return self._properties['total_unconverted']

    @property
    def conversion_rate_percentage(self):
        """
        :returns: Percentage of the confirmed messages over the total.
        :rtype: unicode
        """
        return self._properties['conversion_rate_percentage']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self, verify_service_sid=values.unset,
              date_created_after=values.unset, date_created_before=values.unset,
              country=values.unset, channel=values.unset,
              destination_prefix=values.unset):
        """
        Fetch the VerificationAttemptsSummaryInstance

        :param unicode verify_service_sid: Filter the verification attempts considered on the summary by verify service.
        :param datetime date_created_after: Consider verification attempts create after this date on the summary.
        :param datetime date_created_before: Consider verification attempts created before this date on the summary.
        :param unicode country: Filter verification attempts considered on the summary by destination country.
        :param VerificationAttemptsSummaryInstance.Channels channel: Filter verification attempts considered on the summary by communication channel.
        :param unicode destination_prefix: Filters the attempts considered on the summary by destination prefix.

        :returns: The fetched VerificationAttemptsSummaryInstance
        :rtype: twilio.rest.verify.v2.verification_attempts_summary.VerificationAttemptsSummaryInstance
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        return self._proxy.fetch(
            verify_service_sid=verify_service_sid,
            date_created_after=date_created_after,
            date_created_before=date_created_before,
            country=country,
            channel=channel,
            destination_prefix=destination_prefix,
        )

<<<<<<< HEAD
    async def fetch_async(
        self,
        verify_service_sid: Union[str, object] = values.unset,
        date_created_after: Union[datetime, object] = values.unset,
        date_created_before: Union[datetime, object] = values.unset,
        country: Union[str, object] = values.unset,
        channel: Union[
            "VerificationAttemptsSummaryInstance.Channels", object
        ] = values.unset,
        destination_prefix: Union[str, object] = values.unset,
    ) -> "VerificationAttemptsSummaryInstance":
        """
        Asynchronous coroutine to fetch the VerificationAttemptsSummaryInstance

        :param verify_service_sid: Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
        :param date_created_after: Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param date_created_before: Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param country: Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
        :param channel: Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are `SMS`, `CALL` and `WHATSAPP`
        :param destination_prefix: Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.

        :returns: The fetched VerificationAttemptsSummaryInstance
        """
        return await self._proxy.fetch_async(
            verify_service_sid=verify_service_sid,
            date_created_after=date_created_after,
            date_created_before=date_created_before,
            country=country,
            channel=channel,
            destination_prefix=destination_prefix,
        )

    def __repr__(self) -> str:
=======
    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """

        return "<Twilio.Verify.V2.VerificationAttemptsSummaryInstance>"


class VerificationAttemptsSummaryContext(InstanceContext):

    def __init__(self, version: Version):
        """
        Initialize the VerificationAttemptsSummaryContext

        :param version: Version that contains the resource
        """
        super().__init__(version)

        self._uri = "/Attempts/Summary"

    def fetch(
        self,
        verify_service_sid: Union[str, object] = values.unset,
        date_created_after: Union[datetime, object] = values.unset,
        date_created_before: Union[datetime, object] = values.unset,
        country: Union[str, object] = values.unset,
        channel: Union[
            "VerificationAttemptsSummaryInstance.Channels", object
        ] = values.unset,
        destination_prefix: Union[str, object] = values.unset,
    ) -> VerificationAttemptsSummaryInstance:
        """
        Fetch the VerificationAttemptsSummaryInstance

        :param verify_service_sid: Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
        :param date_created_after: Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param date_created_before: Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param country: Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
        :param channel: Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are `SMS`, `CALL` and `WHATSAPP`
        :param destination_prefix: Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.

        :returns: The fetched VerificationAttemptsSummaryInstance
        """

        data = values.of(
            {
                "VerifyServiceSid": verify_service_sid,
                "DateCreatedAfter": serialize.iso8601_datetime(date_created_after),
                "DateCreatedBefore": serialize.iso8601_datetime(date_created_before),
                "Country": country,
                "Channel": channel,
                "DestinationPrefix": destination_prefix,
            }
        )

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(
            method="GET", uri=self._uri, params=data, headers=headers
        )

        return VerificationAttemptsSummaryInstance(
            self._version,
            payload,
        )

    async def fetch_async(
        self,
        verify_service_sid: Union[str, object] = values.unset,
        date_created_after: Union[datetime, object] = values.unset,
        date_created_before: Union[datetime, object] = values.unset,
        country: Union[str, object] = values.unset,
        channel: Union[
            "VerificationAttemptsSummaryInstance.Channels", object
        ] = values.unset,
        destination_prefix: Union[str, object] = values.unset,
    ) -> VerificationAttemptsSummaryInstance:
        """
        Asynchronous coroutine to fetch the VerificationAttemptsSummaryInstance

        :param verify_service_sid: Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
        :param date_created_after: Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param date_created_before: Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
        :param country: Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
        :param channel: Filter Verification Attempts considered on the summary aggregation by communication channel. Valid values are `SMS`, `CALL` and `WHATSAPP`
        :param destination_prefix: Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.

        :returns: The fetched VerificationAttemptsSummaryInstance
        """

        data = values.of(
            {
                "VerifyServiceSid": verify_service_sid,
                "DateCreatedAfter": serialize.iso8601_datetime(date_created_after),
                "DateCreatedBefore": serialize.iso8601_datetime(date_created_before),
                "Country": country,
                "Channel": channel,
                "DestinationPrefix": destination_prefix,
            }
        )

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )

        return VerificationAttemptsSummaryInstance(
            self._version,
            payload,
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """

        return "<Twilio.Verify.V2.VerificationAttemptsSummaryContext>"


class VerificationAttemptsSummaryList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the VerificationAttemptsSummaryList

        :param version: Version that contains the resource

        """
        super().__init__(version)

    def get(self) -> VerificationAttemptsSummaryContext:
        """
        Constructs a VerificationAttemptsSummaryContext

        """
        return VerificationAttemptsSummaryContext(self._version)

    def __call__(self) -> VerificationAttemptsSummaryContext:
        """
        Constructs a VerificationAttemptsSummaryContext

        """
        return VerificationAttemptsSummaryContext(self._version)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Verify.V2.VerificationAttemptsSummaryList>"
=======
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Verify.V2.VerificationAttemptsSummaryInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
