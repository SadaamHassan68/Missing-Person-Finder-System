<<<<<<< HEAD
r"""
    This code was generated by
   ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
    |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
    |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \

    Twilio - Trusthub
    This is the public Twilio REST API.

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""

from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
=======
# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
<<<<<<< HEAD
from twilio.base.version import Version
from twilio.base.page import Page


class EndUserTypeInstance(InstanceResource):
    """
    :ivar sid: The unique string that identifies the End-User Type resource.
    :ivar friendly_name: A human-readable description that is assigned to describe the End-User Type resource. Examples can include first name, last name, email, business name, etc
    :ivar machine_name: A machine-readable description of the End-User Type resource. Examples can include first_name, last_name, email, business_name, etc.
    :ivar fields: The required information for creating an End-User. The required fields will change as regulatory needs change and will differ for businesses and individuals.
    :ivar url: The absolute URL of the End-User Type resource.
    """

    def __init__(
        self, version: Version, payload: Dict[str, Any], sid: Optional[str] = None
    ):
        super().__init__(version)

        self.sid: Optional[str] = payload.get("sid")
        self.friendly_name: Optional[str] = payload.get("friendly_name")
        self.machine_name: Optional[str] = payload.get("machine_name")
        self.fields: Optional[List[Dict[str, object]]] = payload.get("fields")
        self.url: Optional[str] = payload.get("url")

        self._solution = {
            "sid": sid or self.sid,
        }
        self._context: Optional[EndUserTypeContext] = None

    @property
    def _proxy(self) -> "EndUserTypeContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: EndUserTypeContext for this EndUserTypeInstance
        """
        if self._context is None:
            self._context = EndUserTypeContext(
                self._version,
                sid=self._solution["sid"],
            )
        return self._context

    def fetch(self) -> "EndUserTypeInstance":
        """
        Fetch the EndUserTypeInstance


        :returns: The fetched EndUserTypeInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "EndUserTypeInstance":
        """
        Asynchronous coroutine to fetch the EndUserTypeInstance


        :returns: The fetched EndUserTypeInstance
        """
        return await self._proxy.fetch_async()

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Trusthub.V1.EndUserTypeInstance {}>".format(context)


class EndUserTypeContext(InstanceContext):

    def __init__(self, version: Version, sid: str):
        """
        Initialize the EndUserTypeContext

        :param version: Version that contains the resource
        :param sid: The unique string that identifies the End-User Type resource.
        """
        super().__init__(version)

        # Path Solution
        self._solution = {
            "sid": sid,
        }
        self._uri = "/EndUserTypes/{sid}".format(**self._solution)

    def fetch(self) -> EndUserTypeInstance:
        """
        Fetch the EndUserTypeInstance


        :returns: The fetched EndUserTypeInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = self._version.fetch(method="GET", uri=self._uri, headers=headers)

        return EndUserTypeInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    async def fetch_async(self) -> EndUserTypeInstance:
        """
        Asynchronous coroutine to fetch the EndUserTypeInstance


        :returns: The fetched EndUserTypeInstance
        """

        headers = values.of({})

        headers["Accept"] = "application/json"

        payload = await self._version.fetch_async(
            method="GET", uri=self._uri, headers=headers
        )

        return EndUserTypeInstance(
            self._version,
            payload,
            sid=self._solution["sid"],
        )

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = " ".join("{}={}".format(k, v) for k, v in self._solution.items())
        return "<Twilio.Trusthub.V1.EndUserTypeContext {}>".format(context)


class EndUserTypePage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> EndUserTypeInstance:
        """
        Build an instance of EndUserTypeInstance

        :param payload: Payload response from the API
        """
        return EndUserTypeInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Twilio.Trusthub.V1.EndUserTypePage>"


class EndUserTypeList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the EndUserTypeList

        :param version: Version that contains the resource

        """
        super().__init__(version)

        self._uri = "/EndUserTypes"

    def stream(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[EndUserTypeInstance]:
=======
from twilio.base.page import Page


class EndUserTypeList(ListResource):

    def __init__(self, version):
        """
        Initialize the EndUserTypeList

        :param Version version: Version that contains the resource

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeList
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeList
        """
        super(EndUserTypeList, self).__init__(version)

        # Path Solution
        self._solution = {}
        self._uri = '/EndUserTypes'.format(**self._solution)

    def stream(self, limit=None, page_size=None):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Streams EndUserTypeInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

<<<<<<< HEAD
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(page_size=limits["page_size"])

        return self._version.stream(page, limits["limit"])

    async def stream_async(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[EndUserTypeInstance]:
        """
        Asynchronously streams EndUserTypeInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(page_size=limits["page_size"])

        return self._version.stream_async(page, limits["limit"])

    def list(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[EndUserTypeInstance]:
=======
        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, limit=None, page_size=None):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Lists EndUserTypeInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

<<<<<<< HEAD
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(
            self.stream(
                limit=limit,
                page_size=page_size,
            )
        )

    async def list_async(
        self,
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[EndUserTypeInstance]:
        """
        Asynchronously lists EndUserTypeInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [
            record
            async for record in await self.stream_async(
                limit=limit,
                page_size=page_size,
            )
        ]

    def page(
        self,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> EndUserTypePage:
=======
        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance]
        """
        return list(self.stream(limit=limit, page_size=page_size, ))

    def page(self, page_token=values.unset, page_number=values.unset,
             page_size=values.unset):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Retrieve a single page of EndUserTypeInstance records from the API.
        Request is executed immediately

<<<<<<< HEAD
        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of EndUserTypeInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = self._version.page(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return EndUserTypePage(self._version, response)

    async def page_async(
        self,
        page_token: Union[str, object] = values.unset,
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> EndUserTypePage:
        """
        Asynchronously retrieve a single page of EndUserTypeInstance records from the API.
        Request is executed immediately

        :param page_token: PageToken provided by the API
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 50

        :returns: Page of EndUserTypeInstance
        """
        data = values.of(
            {
                "PageToken": page_token,
                "Page": page_number,
                "PageSize": page_size,
            }
        )

        headers = values.of({"Content-Type": "application/x-www-form-urlencoded"})

        headers["Accept"] = "application/json"

        response = await self._version.page_async(
            method="GET", uri=self._uri, params=data, headers=headers
        )
        return EndUserTypePage(self._version, response)

    def get_page(self, target_url: str) -> EndUserTypePage:
=======
        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypePage
        """
        data = values.of({'PageToken': page_token, 'Page': page_number, 'PageSize': page_size, })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return EndUserTypePage(self._version, response, self._solution)

    def get_page(self, target_url):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Retrieve a specific page of EndUserTypeInstance records from the API.
        Request is executed immediately

<<<<<<< HEAD
        :param target_url: API-generated URL for the requested results page

        :returns: Page of EndUserTypeInstance
        """
        response = self._version.domain.twilio.request("GET", target_url)
        return EndUserTypePage(self._version, response)

    async def get_page_async(self, target_url: str) -> EndUserTypePage:
        """
        Asynchronously retrieve a specific page of EndUserTypeInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of EndUserTypeInstance
        """
        response = await self._version.domain.twilio.request_async("GET", target_url)
        return EndUserTypePage(self._version, response)

    def get(self, sid: str) -> EndUserTypeContext:
        """
        Constructs a EndUserTypeContext

        :param sid: The unique string that identifies the End-User Type resource.
        """
        return EndUserTypeContext(self._version, sid=sid)

    def __call__(self, sid: str) -> EndUserTypeContext:
        """
        Constructs a EndUserTypeContext

        :param sid: The unique string that identifies the End-User Type resource.
        """
        return EndUserTypeContext(self._version, sid=sid)

    def __repr__(self) -> str:
=======
        :param str target_url: API-generated URL for the requested results page

        :returns: Page of EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypePage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return EndUserTypePage(self._version, response, self._solution)

    def get(self, sid):
        """
        Constructs a EndUserTypeContext

        :param sid: The unique string that identifies the End-User Type resource

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        """
        return EndUserTypeContext(self._version, sid=sid, )

    def __call__(self, sid):
        """
        Constructs a EndUserTypeContext

        :param sid: The unique string that identifies the End-User Type resource

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        """
        return EndUserTypeContext(self._version, sid=sid, )

    def __repr__(self):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
        """
        Provide a friendly representation

        :returns: Machine friendly representation
<<<<<<< HEAD
        """
        return "<Twilio.Trusthub.V1.EndUserTypeList>"
=======
        :rtype: str
        """
        return '<Twilio.Trusthub.V1.EndUserTypeList>'


class EndUserTypePage(Page):

    def __init__(self, version, response, solution):
        """
        Initialize the EndUserTypePage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypePage
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypePage
        """
        super(EndUserTypePage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of EndUserTypeInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        """
        return EndUserTypeInstance(self._version, payload, )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Trusthub.V1.EndUserTypePage>'


class EndUserTypeContext(InstanceContext):

    def __init__(self, version, sid):
        """
        Initialize the EndUserTypeContext

        :param Version version: Version that contains the resource
        :param sid: The unique string that identifies the End-User Type resource

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        """
        super(EndUserTypeContext, self).__init__(version)

        # Path Solution
        self._solution = {'sid': sid, }
        self._uri = '/EndUserTypes/{sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch the EndUserTypeInstance

        :returns: The fetched EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return EndUserTypeInstance(self._version, payload, sid=self._solution['sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Trusthub.V1.EndUserTypeContext {}>'.format(context)


class EndUserTypeInstance(InstanceResource):

    def __init__(self, version, payload, sid=None):
        """
        Initialize the EndUserTypeInstance

        :returns: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        """
        super(EndUserTypeInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'sid': payload.get('sid'),
            'friendly_name': payload.get('friendly_name'),
            'machine_name': payload.get('machine_name'),
            'fields': payload.get('fields'),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {'sid': sid or self._properties['sid'], }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: EndUserTypeContext for this EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeContext
        """
        if self._context is None:
            self._context = EndUserTypeContext(self._version, sid=self._solution['sid'], )
        return self._context

    @property
    def sid(self):
        """
        :returns: The unique string that identifies the End-User Type resource
        :rtype: unicode
        """
        return self._properties['sid']

    @property
    def friendly_name(self):
        """
        :returns: A human-readable description of the End-User Type resource
        :rtype: unicode
        """
        return self._properties['friendly_name']

    @property
    def machine_name(self):
        """
        :returns: A machine-readable description of the End-User Type resource
        :rtype: unicode
        """
        return self._properties['machine_name']

    @property
    def fields(self):
        """
        :returns: The required information for creating an End-User.
        :rtype: list[dict]
        """
        return self._properties['fields']

    @property
    def url(self):
        """
        :returns: The absolute URL of the End-User Type resource
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self):
        """
        Fetch the EndUserTypeInstance

        :returns: The fetched EndUserTypeInstance
        :rtype: twilio.rest.trusthub.v1.end_user_type.EndUserTypeInstance
        """
        return self._proxy.fetch()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Trusthub.V1.EndUserTypeInstance {}>'.format(context)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
