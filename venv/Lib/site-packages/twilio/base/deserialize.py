import datetime
<<<<<<< HEAD
from decimal import BasicContext, Decimal
from email.utils import parsedate
from typing import Optional, Union

ISO8601_DATE_FORMAT = "%Y-%m-%d"
ISO8601_DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%SZ"


def iso8601_date(s: str) -> Union[datetime.date, str]:
=======
from decimal import Decimal, BasicContext
from email.utils import parsedate
import pytz

ISO8601_DATE_FORMAT = '%Y-%m-%d'
ISO8601_DATETIME_FORMAT = '%Y-%m-%dT%H:%M:%SZ'


def iso8601_date(s):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    """
    Parses an ISO 8601 date string and returns a UTC date object or the string
    if the parsing failed.
    :param s: ISO 8601-formatted date string (2015-01-25)
    :return:
    """
    try:
<<<<<<< HEAD
        return (
            datetime.datetime.strptime(s, ISO8601_DATE_FORMAT)
            .replace(tzinfo=datetime.timezone.utc)
            .date()
        )
=======
        return datetime.datetime.strptime(s, ISO8601_DATE_FORMAT).replace(tzinfo=pytz.utc).date()
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    except (TypeError, ValueError):
        return s


<<<<<<< HEAD
def iso8601_datetime(
    s: str,
) -> Union[datetime.datetime, str]:
=======
def iso8601_datetime(s):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    """
    Parses an ISO 8601 datetime string and returns a UTC datetime object,
    or the string if parsing failed.
    :param s: ISO 8601-formatted datetime string (2015-01-25T12:34:56Z)
<<<<<<< HEAD
    """
    try:
        return datetime.datetime.strptime(s, ISO8601_DATETIME_FORMAT).replace(
            tzinfo=datetime.timezone.utc
        )
=======
    :return: datetime or str
    """
    try:
        return datetime.datetime.strptime(s, ISO8601_DATETIME_FORMAT).replace(tzinfo=pytz.utc)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    except (TypeError, ValueError):
        return s


<<<<<<< HEAD
def rfc2822_datetime(s: str) -> Optional[datetime.datetime]:
=======
def rfc2822_datetime(s):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    """
    Parses an RFC 2822 date string and returns a UTC datetime object,
    or the string if parsing failed.
    :param s: RFC 2822-formatted string date
    :return: datetime or str
    """
    date_tuple = parsedate(s)
    if date_tuple is None:
        return None
<<<<<<< HEAD
    return datetime.datetime(*date_tuple[:6]).replace(tzinfo=datetime.timezone.utc)


def decimal(d: Optional[str]) -> Union[Decimal, str]:
    """
    Parses a decimal string into a Decimal
    :param d: decimal string
=======
    return datetime.datetime(*date_tuple[:6]).replace(tzinfo=pytz.utc)


def decimal(d):
    """
    Parses a decimal string into a Decimal
    :param d: decimal string
    :return: Decimal
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    """
    if not d:
        return d
    return Decimal(d, BasicContext)


<<<<<<< HEAD
def integer(i: str) -> Union[int, str]:
=======
def integer(i):
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    """
    Parses an integer string into an int
    :param i: integer string
    :return: int
    """
    try:
        return int(i)
    except (TypeError, ValueError):
        return i
