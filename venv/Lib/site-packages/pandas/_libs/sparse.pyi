<<<<<<< HEAD
from typing import Sequence

import numpy as np

from pandas._typing import (
    Self,
    npt,
)
=======
from typing import (
    Sequence,
    TypeVar,
)

import numpy as np

from pandas._typing import npt

_SparseIndexT = TypeVar("_SparseIndexT", bound=SparseIndex)
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

class SparseIndex:
    length: int
    npoints: int
<<<<<<< HEAD
    def __init__(self) -> None: ...
=======
    def __init__(self): ...
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a
    @property
    def ngaps(self) -> int: ...
    @property
    def nbytes(self) -> int: ...
    @property
    def indices(self) -> npt.NDArray[np.int32]: ...
    def equals(self, other) -> bool: ...
    def lookup(self, index: int) -> np.int32: ...
    def lookup_array(self, indexer: npt.NDArray[np.int32]) -> npt.NDArray[np.int32]: ...
    def to_int_index(self) -> IntIndex: ...
    def to_block_index(self) -> BlockIndex: ...
<<<<<<< HEAD
    def intersect(self, y_: SparseIndex) -> Self: ...
    def make_union(self, y_: SparseIndex) -> Self: ...
=======
    def intersect(self: _SparseIndexT, y_: SparseIndex) -> _SparseIndexT: ...
    def make_union(self: _SparseIndexT, y_: SparseIndex) -> _SparseIndexT: ...
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

class IntIndex(SparseIndex):
    indices: npt.NDArray[np.int32]
    def __init__(
        self, length: int, indices: Sequence[int], check_integrity: bool = ...
<<<<<<< HEAD
    ) -> None: ...
=======
    ): ...
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

class BlockIndex(SparseIndex):
    nblocks: int
    blocs: np.ndarray
    blengths: np.ndarray
<<<<<<< HEAD
    def __init__(
        self, length: int, blocs: np.ndarray, blengths: np.ndarray
    ) -> None: ...

    # Override to have correct parameters
    def intersect(self, other: SparseIndex) -> Self: ...
    def make_union(self, y: SparseIndex) -> Self: ...
=======
    def __init__(self, length: int, blocs: np.ndarray, blengths: np.ndarray): ...
>>>>>>> 0a1ec7f2b5fdf2814bfdd7c1a032c09ad2fe1c0a

def make_mask_object_ndarray(
    arr: npt.NDArray[np.object_], fill_value
) -> npt.NDArray[np.bool_]: ...
def get_blocks(
    indices: npt.NDArray[np.int32],
) -> tuple[npt.NDArray[np.int32], npt.NDArray[np.int32]]: ...
